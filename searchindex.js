Search.setIndex({"docnames": ["array/activations", "array/activations/ArrayWithActivations", "array/array_methods", "array/array_methods/abs", "array/array_methods/acos", "array/array_methods/acosh", "array/array_methods/add", "array/array_methods/all", "array/array_methods/all_equal", "array/array_methods/any", "array/array_methods/argsort", "array/array_methods/asin", "array/array_methods/asinh", "array/array_methods/atan", "array/array_methods/atan2", "array/array_methods/atanh", "array/array_methods/binary_cross_entropy", "array/array_methods/bitwise_and", "array/array_methods/bitwise_invert", "array/array_methods/bitwise_left_shift", "array/array_methods/bitwise_or", "array/array_methods/bitwise_right_shift", "array/array_methods/bitwise_xor", "array/array_methods/can_cast", "array/array_methods/ceil", "array/array_methods/clip", "array/array_methods/concat", "array/array_methods/constant_pad", "array/array_methods/cos", "array/array_methods/cosh", "array/array_methods/cross_entropy", "array/array_methods/divide", "array/array_methods/einsum", "array/array_methods/equal", "array/array_methods/erf", "array/array_methods/exp", "array/array_methods/expand_dims", "array/array_methods/expm1", "array/array_methods/flip", "array/array_methods/floor", "array/array_methods/floor_divide", "array/array_methods/greater", "array/array_methods/greater_equal", "array/array_methods/isfinite", "array/array_methods/isinf", "array/array_methods/isnan", "array/array_methods/layer_norm", "array/array_methods/less", "array/array_methods/less_equal", "array/array_methods/log", "array/array_methods/log10", "array/array_methods/log1p", "array/array_methods/log2", "array/array_methods/logaddexp", "array/array_methods/logical_and", "array/array_methods/logical_not", "array/array_methods/logical_or", "array/array_methods/logical_xor", "array/array_methods/matmul", "array/array_methods/max", "array/array_methods/mean", "array/array_methods/min", "array/array_methods/multiply", "array/array_methods/negative", "array/array_methods/not_equal", "array/array_methods/permute_dims", "array/array_methods/positive", "array/array_methods/pow", "array/array_methods/prod", "array/array_methods/remainder", "array/array_methods/repeat", "array/array_methods/reshape", "array/array_methods/roll", "array/array_methods/round", "array/array_methods/sign", "array/array_methods/sin", "array/array_methods/sinh", "array/array_methods/sort", "array/array_methods/sparse_cross_entropy", "array/array_methods/sqrt", "array/array_methods/square", "array/array_methods/squeeze", "array/array_methods/stack", "array/array_methods/std", "array/array_methods/subtract", "array/array_methods/sum", "array/array_methods/swapaxes", "array/array_methods/tan", "array/array_methods/tanh", "array/array_methods/tile", "array/array_methods/trunc", "array/array_methods/var", "array/array_methods/zero_pad", "array/conversions", "array/conversions/args_to_ivy", "array/conversions/args_to_native", "array/conversions/to_ivy", "array/conversions/to_native", "array/creation", "array/creation/ArrayWithCreation", "array/data_types", "array/data_types/ArrayWithDataTypes", "array/device", "array/device/ArrayWithDevice", "array/elementwise", "array/elementwise/ArrayWithElementwise", "array/general", "array/general/ArrayWithGeneral", "array/gradients", "array/gradients/ArrayWithGradients", "array/image", "array/image/ArrayWithImage", "array/layers", "array/layers/ArrayWithLayers", "array/linear_algebra", "array/linear_algebra/ArrayWithLinearAlgebra", "array/losses", "array/losses/ArrayWithLosses", "array/manipulation", "array/manipulation/ArrayWithManipulation", "array/norms", "array/norms/ArrayWithNorms", "array/random", "array/random/ArrayWithRandom", "array/searching", "array/searching/ArrayWithSearching", "array/set", "array/set/ArrayWithSet", "array/sorting", "array/sorting/ArrayWithSorting", "array/statistical", "array/statistical/ArrayWithStatistical", "array/utility", "array/utility/ArrayWithUtility", "array/wrapping", "array/wrapping/add_ivy_array_instance_methods", "backend_handler", "backend_handler/ContextManager:\n    def __init__", "backend_handler/choose_random_backend", "backend_handler/clear_backend_stack", "backend_handler/current_backend", "backend_handler/get_backend", "backend_handler/set_backend", "backend_handler/try_import_ivy_jax", "backend_handler/try_import_ivy_mxnet", "backend_handler/try_import_ivy_numpy", "backend_handler/try_import_ivy_tf", "backend_handler/try_import_ivy_torch", "backend_handler/unset_backend", "background", "background/ml_explosion", "background/standardization", "background/why_unify", "container/activations", "container/activations/ContainerWithActivations", "container/base", "container/base/ContainerBase", "container/container", "container/container/Container", "container/container/MultiDevContainer", "container/container_methods", "container/container_methods/abs", "container/container_methods/acos", "container/container_methods/acosh", "container/container_methods/adam_update", "container/container_methods/add", "container/container_methods/all", "container/container_methods/all_equal", "container/container_methods/any", "container/container_methods/argsort", "container/container_methods/asin", "container/container_methods/asinh", "container/container_methods/at_dev", "container/container_methods/at_devs", "container/container_methods/atan", "container/container_methods/atan2", "container/container_methods/atanh", "container/container_methods/binary_cross_entropy", "container/container_methods/bitwise_and", "container/container_methods/bitwise_invert", "container/container_methods/bitwise_left_shift", "container/container_methods/bitwise_or", "container/container_methods/bitwise_right_shift", "container/container_methods/bitwise_xor", "container/container_methods/can_cast", "container/container_methods/ceil", "container/container_methods/clip", "container/container_methods/clip_vector_norm", "container/container_methods/concat", "container/container_methods/constant_pad", "container/container_methods/cos", "container/container_methods/cosh", "container/container_methods/cross_entropy", "container/container_methods/divide", "container/container_methods/einsum", "container/container_methods/equal", "container/container_methods/erf", "container/container_methods/exp", "container/container_methods/expand_dims", "container/container_methods/expm1", "container/container_methods/flip", "container/container_methods/floor", "container/container_methods/floor_divide", "container/container_methods/gradient_descent_update", "container/container_methods/greater", "container/container_methods/greater_equal", "container/container_methods/isfinite", "container/container_methods/isinf", "container/container_methods/isnan", "container/container_methods/lamb_update", "container/container_methods/lars_update", "container/container_methods/layer_norm", "container/container_methods/less", "container/container_methods/less_equal", "container/container_methods/log", "container/container_methods/log10", "container/container_methods/log1p", "container/container_methods/log2", "container/container_methods/logaddexp", "container/container_methods/logical_and", "container/container_methods/logical_not", "container/container_methods/logical_or", "container/container_methods/logical_xor", "container/container_methods/matmul", "container/container_methods/max", "container/container_methods/mean", "container/container_methods/min", "container/container_methods/multiply", "container/container_methods/negative", "container/container_methods/not_equal", "container/container_methods/optimizer_update", "container/container_methods/permute_dims", "container/container_methods/positive", "container/container_methods/pow", "container/container_methods/prod", "container/container_methods/random_uniform", "container/container_methods/remainder", "container/container_methods/repeat", "container/container_methods/reshape", "container/container_methods/roll", "container/container_methods/round", "container/container_methods/sign", "container/container_methods/sin", "container/container_methods/sinh", "container/container_methods/sort", "container/container_methods/sparse_cross_entropy", "container/container_methods/sqrt", "container/container_methods/square", "container/container_methods/squeeze", "container/container_methods/stack", "container/container_methods/static_adam_update", "container/container_methods/static_add", "container/container_methods/static_all_equal", "container/container_methods/static_argsort", "container/container_methods/static_binary_cross_entropy", "container/container_methods/static_can_cast", "container/container_methods/static_clip", "container/container_methods/static_cross_entropy", "container/container_methods/static_divide", "container/container_methods/static_gradient_descent_update", "container/container_methods/static_lamb_update", "container/container_methods/static_lars_update", "container/container_methods/static_multiply", "container/container_methods/static_optimizer_update", "container/container_methods/static_randint", "container/container_methods/static_random_uniform", "container/container_methods/static_roll", "container/container_methods/static_sort", "container/container_methods/static_sparse_cross_entropy", "container/container_methods/static_subtract", "container/container_methods/static_tan", "container/container_methods/static_tanh", "container/container_methods/std", "container/container_methods/subtract", "container/container_methods/sum", "container/container_methods/swapaxes", "container/container_methods/tan", "container/container_methods/tanh", "container/container_methods/tile", "container/container_methods/trunc", "container/container_methods/var", "container/container_methods/zero_pad", "container/creation", "container/creation/ContainerWithCreation", "container/data_types", "container/data_types/ContainerWithDataTypes", "container/device", "container/device/ContainerWithDevice", "container/elementwise", "container/elementwise/ContainerWithElementwise", "container/general", "container/general/ContainerWithGeneral", "container/gradients", "container/gradients/ContainerWithGradients", "container/image", "container/image/ContainerWithImage", "container/layers", "container/layers/ContainerWithLayers", "container/linear_algebra", "container/linear_algebra/ContainerWithLinearAlgebra", "container/losses", "container/losses/ContainerWithLosses", "container/manipulation", "container/manipulation/ContainerWithManipulation", "container/norms", "container/norms/ContainerWithNorms", "container/random", "container/random/ContainerWithRandom", "container/searching", "container/searching/ContainerWithSearching", "container/set", "container/set/ContainerWithSet", "container/sorting", "container/sorting/ContainerWithSorting", "container/statistical", "container/statistical/ContainerWithStatistical", "container/utility", "container/utility/ContainerWithUtility", "container/wrapping", "container/wrapping/add_ivy_container_instance_methods", "contributing", "contributing/0_setting_up", "contributing/1_the_basics", "contributing/4_open_tasks", "contributing/building_the_docs", "deep_dive", "deep_dive/0_navigating_the_code", "deep_dive/10_docstrings", "deep_dive/11_docstring_examples", "deep_dive/12_array_api_tests", "deep_dive/13_ivy_tests", "deep_dive/1_function_types", "deep_dive/2_backend_setting", "deep_dive/3_function_wrapping", "deep_dive/4_arrays", "deep_dive/5_containers", "deep_dive/6_data_types", "deep_dive/7_devices", "deep_dive/8_inplace_updates", "deep_dive/9_function_arguments", "design", "design/building_blocks", "design/ivy_as_a_framework", "design/ivy_as_a_framework/ivy_array", "design/ivy_as_a_framework/ivy_container", "design/ivy_as_a_framework/ivy_stateful_api", "design/ivy_as_a_transpiler", "docs/ivy", "docs/ivy_builder", "docs/ivy_ecosystem", "docs/ivy_gym", "docs/ivy_mech", "docs/ivy_memory", "docs/ivy_models", "docs/ivy_robot", "docs/ivy_vision", "extensions", "extensions/applied_libraries", "faq", "func_wrapper", "func_wrapper/handle_nestable", "func_wrapper/handle_out_argument", "func_wrapper/infer_device", "func_wrapper/infer_dtype", "func_wrapper/inputs_to_ivy_arrays", "func_wrapper/inputs_to_native_arrays", "func_wrapper/outputs_to_ivy_arrays", "func_wrapper/to_native_arrays_and_back", "functional/ivy", "functional/ivy/activations", "functional/ivy/activations/gelu", "functional/ivy/activations/leaky_relu", "functional/ivy/activations/relu", "functional/ivy/activations/sigmoid", "functional/ivy/activations/softmax", "functional/ivy/activations/softplus", "functional/ivy/activations/tanh", "functional/ivy/compilation", "functional/ivy/compilation/compile", "functional/ivy/constants", "functional/ivy/creation", "functional/ivy/creation/arange", "functional/ivy/creation/asarray", "functional/ivy/creation/empty", "functional/ivy/creation/empty_like", "functional/ivy/creation/eye", "functional/ivy/creation/from_dlpack", "functional/ivy/creation/full", "functional/ivy/creation/full_like", "functional/ivy/creation/linspace", "functional/ivy/creation/logspace", "functional/ivy/creation/meshgrid", "functional/ivy/creation/native_array", "functional/ivy/creation/ones", "functional/ivy/creation/ones_like", "functional/ivy/creation/tril", "functional/ivy/creation/triu", "functional/ivy/creation/zeros", "functional/ivy/creation/zeros_like", "functional/ivy/data_type", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/data_type/as_ivy_dtype", "functional/ivy/data_type/as_native_dtype", "functional/ivy/data_type/astype", "functional/ivy/data_type/broadcast_arrays", "functional/ivy/data_type/broadcast_to", "functional/ivy/data_type/can_cast", "functional/ivy/data_type/closest_valid_dtype", "functional/ivy/data_type/default_dtype", "functional/ivy/data_type/default_float_dtype", "functional/ivy/data_type/default_int_dtype", "functional/ivy/data_type/dtype", "functional/ivy/data_type/dtype_bits", "functional/ivy/data_type/finfo", "functional/ivy/data_type/function_supported_dtypes", "functional/ivy/data_type/function_unsupported_dtypes", "functional/ivy/data_type/iinfo", "functional/ivy/data_type/invalid_dtype", "functional/ivy/data_type/is_float_dtype", "functional/ivy/data_type/is_int_dtype", "functional/ivy/data_type/promote_types", "functional/ivy/data_type/result_type", "functional/ivy/data_type/set_default_dtype", "functional/ivy/data_type/set_default_float_dtype", "functional/ivy/data_type/set_default_int_dtype", "functional/ivy/data_type/type_promote_arrays", "functional/ivy/data_type/unset_default_dtype", "functional/ivy/data_type/unset_default_float_dtype", "functional/ivy/data_type/unset_default_int_dtype", "functional/ivy/data_type/valid_dtype", "functional/ivy/device", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/device/DevClonedItem", "functional/ivy/device/DevClonedIter", "functional/ivy/device/DevClonedNest", "functional/ivy/device/DevDistItem", "functional/ivy/device/DevDistIter", "functional/ivy/device/DevDistNest", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__", "functional/ivy/device/DevMapper", "functional/ivy/device/DevMapperMultiProc", "functional/ivy/device/MultiDev:\n    def __init__", "functional/ivy/device/MultiDevItem", "functional/ivy/device/MultiDevIter", "functional/ivy/device/MultiDevNest", "functional/ivy/device/Profiler", "functional/ivy/device/as_ivy_dev", "functional/ivy/device/as_native_dev", "functional/ivy/device/clear_mem_on_dev", "functional/ivy/device/default_device", "functional/ivy/device/dev", "functional/ivy/device/dev_clone", "functional/ivy/device/dev_clone_array", "functional/ivy/device/dev_clone_iter", "functional/ivy/device/dev_clone_nest", "functional/ivy/device/dev_dist", "functional/ivy/device/dev_dist_array", "functional/ivy/device/dev_dist_iter", "functional/ivy/device/dev_dist_nest", "functional/ivy/device/dev_unify", "functional/ivy/device/dev_unify_array", "functional/ivy/device/dev_unify_iter", "functional/ivy/device/dev_unify_nest", "functional/ivy/device/dev_util", "functional/ivy/device/get_all_ivy_arrays_on_dev", "functional/ivy/device/gpu_is_available", "functional/ivy/device/num_cpu_cores", "functional/ivy/device/num_gpus", "functional/ivy/device/num_ivy_arrays_on_dev", "functional/ivy/device/percent_used_mem_on_dev", "functional/ivy/device/print_all_ivy_arrays_on_dev", "functional/ivy/device/set_default_device", "functional/ivy/device/set_split_factor", "functional/ivy/device/split_factor", "functional/ivy/device/split_func_call", "functional/ivy/device/to_device", "functional/ivy/device/total_mem_on_dev", "functional/ivy/device/tpu_is_available", "functional/ivy/device/unset_default_device", "functional/ivy/device/used_mem_on_dev", "functional/ivy/elementwise", "functional/ivy/elementwise/abs", "functional/ivy/elementwise/acos", "functional/ivy/elementwise/acosh", "functional/ivy/elementwise/add", "functional/ivy/elementwise/asin", "functional/ivy/elementwise/asin/asin_array", "functional/ivy/elementwise/asin/asin_functional", "functional/ivy/elementwise/asinh", "functional/ivy/elementwise/atan", "functional/ivy/elementwise/atan2", "functional/ivy/elementwise/atanh", "functional/ivy/elementwise/bitwise_and", "functional/ivy/elementwise/bitwise_invert", "functional/ivy/elementwise/bitwise_left_shift", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional", "functional/ivy/elementwise/bitwise_or", "functional/ivy/elementwise/bitwise_or/bitwise_or_array", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional", "functional/ivy/elementwise/bitwise_right_shift", "functional/ivy/elementwise/bitwise_xor", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional", "functional/ivy/elementwise/ceil", "functional/ivy/elementwise/cos", "functional/ivy/elementwise/cosh", "functional/ivy/elementwise/divide", "functional/ivy/elementwise/equal", "functional/ivy/elementwise/erf", "functional/ivy/elementwise/erf/erf_array", "functional/ivy/elementwise/erf/erf_container", "functional/ivy/elementwise/erf/erf_functional", "functional/ivy/elementwise/exp", "functional/ivy/elementwise/expm1", "functional/ivy/elementwise/floor", "functional/ivy/elementwise/floor_divide", "functional/ivy/elementwise/greater", "functional/ivy/elementwise/greater_equal", "functional/ivy/elementwise/isfinite", "functional/ivy/elementwise/isinf", "functional/ivy/elementwise/isnan", "functional/ivy/elementwise/less", "functional/ivy/elementwise/less_equal", "functional/ivy/elementwise/log", "functional/ivy/elementwise/log/log_array", "functional/ivy/elementwise/log/log_functional", "functional/ivy/elementwise/log10", "functional/ivy/elementwise/log1p", "functional/ivy/elementwise/log2", "functional/ivy/elementwise/log2/log2_array", "functional/ivy/elementwise/log2/log2_functional", "functional/ivy/elementwise/logaddexp", "functional/ivy/elementwise/logical_and", "functional/ivy/elementwise/logical_not", "functional/ivy/elementwise/logical_or", "functional/ivy/elementwise/logical_or/logical_or_array", "functional/ivy/elementwise/logical_or/logical_or_functional", "functional/ivy/elementwise/logical_xor", "functional/ivy/elementwise/maximum", "functional/ivy/elementwise/minimum", "functional/ivy/elementwise/multiply", "functional/ivy/elementwise/negative", "functional/ivy/elementwise/not_equal", "functional/ivy/elementwise/positive", "functional/ivy/elementwise/pow", "functional/ivy/elementwise/remainder", "functional/ivy/elementwise/round", "functional/ivy/elementwise/sign", "functional/ivy/elementwise/sin", "functional/ivy/elementwise/sin/sin_array", "functional/ivy/elementwise/sin/sin_container", "functional/ivy/elementwise/sin/sin_functional", "functional/ivy/elementwise/sinh", "functional/ivy/elementwise/sqrt", "functional/ivy/elementwise/square", "functional/ivy/elementwise/square/square_array", "functional/ivy/elementwise/square/square_functional", "functional/ivy/elementwise/subtract", "functional/ivy/elementwise/tan", "functional/ivy/elementwise/tanh", "functional/ivy/elementwise/trunc", "functional/ivy/general", "functional/ivy/general/all_equal", "functional/ivy/general/arg_info", "functional/ivy/general/arg_names", "functional/ivy/general/array_equal", "functional/ivy/general/arrays_equal", "functional/ivy/general/assert_supports_inplace", "functional/ivy/general/cache_fn", "functional/ivy/general/clip_matrix_norm", "functional/ivy/general/clip_vector_norm", "functional/ivy/general/container_types", "functional/ivy/general/copy_array", "functional/ivy/general/cumprod", "functional/ivy/general/cumsum", "functional/ivy/general/current_backend_str", "functional/ivy/general/default", "functional/ivy/general/einops_rearrange", "functional/ivy/general/einops_reduce", "functional/ivy/general/einops_repeat", "functional/ivy/general/exists", "functional/ivy/general/floormod", "functional/ivy/general/fourier_encode", "functional/ivy/general/gather", "functional/ivy/general/gather_nd", "functional/ivy/general/get_all_arrays_in_memory", "functional/ivy/general/get_min_base", "functional/ivy/general/get_min_denominator", "functional/ivy/general/get_num_dims", "functional/ivy/general/get_referrers_recursive", "functional/ivy/general/has_nans", "functional/ivy/general/indices_where", "functional/ivy/general/inplace_arrays_supported", "functional/ivy/general/inplace_decrement", "functional/ivy/general/inplace_increment", "functional/ivy/general/inplace_update", "functional/ivy/general/inplace_variables_supported", "functional/ivy/general/is_array", "functional/ivy/general/is_ivy_array", "functional/ivy/general/is_ivy_container", "functional/ivy/general/is_native_array", "functional/ivy/general/match_kwargs", "functional/ivy/general/multiprocessing", "functional/ivy/general/num_arrays_in_memory", "functional/ivy/general/one_hot", "functional/ivy/general/print_all_arrays_in_memory", "functional/ivy/general/queue_timeout", "functional/ivy/general/scatter_flat", "functional/ivy/general/scatter_nd", "functional/ivy/general/set_min_base", "functional/ivy/general/set_min_denominator", "functional/ivy/general/set_queue_timeout", "functional/ivy/general/set_tmp_dir", "functional/ivy/general/shape", "functional/ivy/general/shape_to_tuple", "functional/ivy/general/stable_divide", "functional/ivy/general/stable_pow", "functional/ivy/general/supports_inplace", "functional/ivy/general/tmp_dir", "functional/ivy/general/to_list", "functional/ivy/general/to_numpy", "functional/ivy/general/to_scalar", "functional/ivy/general/try_else_none", "functional/ivy/general/unstack", "functional/ivy/general/value_is_nan", "functional/ivy/gradients", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__", "functional/ivy/gradients/adam_step", "functional/ivy/gradients/adam_update", "functional/ivy/gradients/execute_with_gradients", "functional/ivy/gradients/gradient_descent_update", "functional/ivy/gradients/is_variable", "functional/ivy/gradients/lamb_update", "functional/ivy/gradients/lars_update", "functional/ivy/gradients/optimizer_update", "functional/ivy/gradients/set_with_grads", "functional/ivy/gradients/stop_gradient", "functional/ivy/gradients/unset_with_grads", "functional/ivy/gradients/variable", "functional/ivy/gradients/variable_data", "functional/ivy/gradients/with_grads", "functional/ivy/layers", "functional/ivy/layers/conv1d", "functional/ivy/layers/conv1d_transpose", "functional/ivy/layers/conv2d", "functional/ivy/layers/conv2d_transpose", "functional/ivy/layers/conv3d", "functional/ivy/layers/conv3d_transpose", "functional/ivy/layers/depthwise_conv2d", "functional/ivy/layers/dropout", "functional/ivy/layers/linear", "functional/ivy/layers/lstm_update", "functional/ivy/layers/multi_head_attention", "functional/ivy/layers/scaled_dot_product_attention", "functional/ivy/linear_algebra", "functional/ivy/linear_algebra/cholesky", "functional/ivy/linear_algebra/cross", "functional/ivy/linear_algebra/det", "functional/ivy/linear_algebra/diagonal", "functional/ivy/linear_algebra/eigh", "functional/ivy/linear_algebra/eigvalsh", "functional/ivy/linear_algebra/inv", "functional/ivy/linear_algebra/matmul", "functional/ivy/linear_algebra/matrix_norm", "functional/ivy/linear_algebra/matrix_power", "functional/ivy/linear_algebra/matrix_rank", "functional/ivy/linear_algebra/matrix_transpose", "functional/ivy/linear_algebra/outer", "functional/ivy/linear_algebra/pinv", "functional/ivy/linear_algebra/qr", "functional/ivy/linear_algebra/slogdet", "functional/ivy/linear_algebra/solve", "functional/ivy/linear_algebra/svd", "functional/ivy/linear_algebra/svdvals", "functional/ivy/linear_algebra/tensordot", "functional/ivy/linear_algebra/trace", "functional/ivy/linear_algebra/vecdot", "functional/ivy/linear_algebra/vector_norm", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix", "functional/ivy/losses", "functional/ivy/losses/binary_cross_entropy", "functional/ivy/losses/cross_entropy", "functional/ivy/losses/cross_entropy/cross_entropy_array", "functional/ivy/losses/cross_entropy/cross_entropy_functional", "functional/ivy/losses/sparse_cross_entropy", "functional/ivy/manipulation", "functional/ivy/manipulation/clip", "functional/ivy/manipulation/clip/clip_functional", "functional/ivy/manipulation/clip/static_clip_container", "functional/ivy/manipulation/concat", "functional/ivy/manipulation/concat/concat_array", "functional/ivy/manipulation/concat/concat_functional", "functional/ivy/manipulation/constant_pad", "functional/ivy/manipulation/expand_dims", "functional/ivy/manipulation/flip", "functional/ivy/manipulation/permute_dims", "functional/ivy/manipulation/repeat", "functional/ivy/manipulation/reshape", "functional/ivy/manipulation/reshape/reshape_array", "functional/ivy/manipulation/reshape/reshape_functional", "functional/ivy/manipulation/roll", "functional/ivy/manipulation/split", "functional/ivy/manipulation/squeeze", "functional/ivy/manipulation/stack", "functional/ivy/manipulation/swapaxes", "functional/ivy/manipulation/tile", "functional/ivy/manipulation/zero_pad", "functional/ivy/meta", "functional/ivy/meta/fomaml_step", "functional/ivy/meta/maml_step", "functional/ivy/meta/reptile_step", "functional/ivy/nest", "functional/ivy/nest/all_nested_indices", "functional/ivy/nest/copy_nest", "functional/ivy/nest/index_nest", "functional/ivy/nest/insert_into_nest_at_index", "functional/ivy/nest/insert_into_nest_at_indices", "functional/ivy/nest/map", "functional/ivy/nest/map_nest_at_index", "functional/ivy/nest/map_nest_at_indices", "functional/ivy/nest/multi_index_nest", "functional/ivy/nest/nested_any", "functional/ivy/nest/nested_indices_where", "functional/ivy/nest/nested_map", "functional/ivy/nest/nested_multi_map", "functional/ivy/nest/prune_nest_at_index", "functional/ivy/nest/prune_nest_at_indices", "functional/ivy/nest/set_nest_at_index", "functional/ivy/nest/set_nest_at_indices", "functional/ivy/norms", "functional/ivy/norms/layer_norm", "functional/ivy/random", "functional/ivy/random/multinomial", "functional/ivy/random/randint", "functional/ivy/random/random_normal", "functional/ivy/random/random_uniform", "functional/ivy/random/seed", "functional/ivy/random/shuffle", "functional/ivy/searching", "functional/ivy/searching/argmax", "functional/ivy/searching/argmin", "functional/ivy/searching/nonzero", "functional/ivy/searching/where", "functional/ivy/set", "functional/ivy/set/unique_all", "functional/ivy/set/unique_counts", "functional/ivy/set/unique_inverse", "functional/ivy/set/unique_values", "functional/ivy/sorting", "functional/ivy/sorting/argsort", "functional/ivy/sorting/sort", "functional/ivy/statistical", "functional/ivy/statistical/einsum", "functional/ivy/statistical/max", "functional/ivy/statistical/mean", "functional/ivy/statistical/min", "functional/ivy/statistical/prod", "functional/ivy/statistical/std", "functional/ivy/statistical/sum", "functional/ivy/statistical/var", "functional/ivy/utility", "functional/ivy/utility/all", "functional/ivy/utility/all/all_array", "functional/ivy/utility/all/all_functional", "functional/ivy/utility/any", "index", "index_append", "index_prepend", "inspection", "inspection/add_array_specs", "inspection/fn_array_spec", "roadmap", "stateful/activations", "stateful/activations/GEGLU", "stateful/activations/GELU", "stateful/converters", "stateful/converters/to_ivy_module", "stateful/initializers", "stateful/initializers/Constant:\n    def __init__", "stateful/initializers/FirstLayerSiren", "stateful/initializers/GlorotUniform", "stateful/initializers/KaimingNormal:\n    def __init__", "stateful/initializers/Ones", "stateful/initializers/Siren", "stateful/initializers/Uniform:\n    def __init__", "stateful/initializers/Zeros", "stateful/layers", "stateful/layers/Conv1D", "stateful/layers/Conv1DTranspose", "stateful/layers/Conv2D", "stateful/layers/Conv2DTranspose", "stateful/layers/Conv3D", "stateful/layers/Conv3DTranspose", "stateful/layers/DepthwiseConv2D", "stateful/layers/Dropout", "stateful/layers/LSTM", "stateful/layers/Linear", "stateful/layers/MultiHeadAttention", "stateful/module", "stateful/module/Module", "stateful/norms", "stateful/norms/LayerNorm", "stateful/optimizers", "stateful/optimizers/Adam", "stateful/optimizers/LAMB", "stateful/optimizers/LARS", "stateful/optimizers/Optimizer", "stateful/optimizers/SGD", "stateful/sequential", "stateful/sequential/Sequential", "supported_frameworks", "verbosity", "verbosity/cprint"], "filenames": ["array/activations.rst", "array/activations/ArrayWithActivations.rst", "array/array_methods.rst", "array/array_methods/abs.rst", "array/array_methods/acos.rst", "array/array_methods/acosh.rst", "array/array_methods/add.rst", "array/array_methods/all.rst", "array/array_methods/all_equal.rst", "array/array_methods/any.rst", "array/array_methods/argsort.rst", "array/array_methods/asin.rst", "array/array_methods/asinh.rst", "array/array_methods/atan.rst", "array/array_methods/atan2.rst", "array/array_methods/atanh.rst", "array/array_methods/binary_cross_entropy.rst", "array/array_methods/bitwise_and.rst", "array/array_methods/bitwise_invert.rst", "array/array_methods/bitwise_left_shift.rst", "array/array_methods/bitwise_or.rst", "array/array_methods/bitwise_right_shift.rst", "array/array_methods/bitwise_xor.rst", "array/array_methods/can_cast.rst", "array/array_methods/ceil.rst", "array/array_methods/clip.rst", "array/array_methods/concat.rst", "array/array_methods/constant_pad.rst", "array/array_methods/cos.rst", "array/array_methods/cosh.rst", "array/array_methods/cross_entropy.rst", "array/array_methods/divide.rst", "array/array_methods/einsum.rst", "array/array_methods/equal.rst", "array/array_methods/erf.rst", "array/array_methods/exp.rst", "array/array_methods/expand_dims.rst", "array/array_methods/expm1.rst", "array/array_methods/flip.rst", "array/array_methods/floor.rst", "array/array_methods/floor_divide.rst", "array/array_methods/greater.rst", "array/array_methods/greater_equal.rst", "array/array_methods/isfinite.rst", "array/array_methods/isinf.rst", "array/array_methods/isnan.rst", "array/array_methods/layer_norm.rst", "array/array_methods/less.rst", "array/array_methods/less_equal.rst", "array/array_methods/log.rst", "array/array_methods/log10.rst", "array/array_methods/log1p.rst", "array/array_methods/log2.rst", "array/array_methods/logaddexp.rst", "array/array_methods/logical_and.rst", "array/array_methods/logical_not.rst", "array/array_methods/logical_or.rst", "array/array_methods/logical_xor.rst", "array/array_methods/matmul.rst", "array/array_methods/max.rst", "array/array_methods/mean.rst", "array/array_methods/min.rst", "array/array_methods/multiply.rst", "array/array_methods/negative.rst", "array/array_methods/not_equal.rst", "array/array_methods/permute_dims.rst", "array/array_methods/positive.rst", "array/array_methods/pow.rst", "array/array_methods/prod.rst", "array/array_methods/remainder.rst", "array/array_methods/repeat.rst", "array/array_methods/reshape.rst", "array/array_methods/roll.rst", "array/array_methods/round.rst", "array/array_methods/sign.rst", "array/array_methods/sin.rst", "array/array_methods/sinh.rst", "array/array_methods/sort.rst", "array/array_methods/sparse_cross_entropy.rst", "array/array_methods/sqrt.rst", "array/array_methods/square.rst", "array/array_methods/squeeze.rst", "array/array_methods/stack.rst", "array/array_methods/std.rst", "array/array_methods/subtract.rst", "array/array_methods/sum.rst", "array/array_methods/swapaxes.rst", "array/array_methods/tan.rst", "array/array_methods/tanh.rst", "array/array_methods/tile.rst", "array/array_methods/trunc.rst", "array/array_methods/var.rst", "array/array_methods/zero_pad.rst", "array/conversions.rst", "array/conversions/args_to_ivy.rst", "array/conversions/args_to_native.rst", "array/conversions/to_ivy.rst", "array/conversions/to_native.rst", "array/creation.rst", "array/creation/ArrayWithCreation.rst", "array/data_types.rst", "array/data_types/ArrayWithDataTypes.rst", "array/device.rst", "array/device/ArrayWithDevice.rst", "array/elementwise.rst", "array/elementwise/ArrayWithElementwise.rst", "array/general.rst", "array/general/ArrayWithGeneral.rst", "array/gradients.rst", "array/gradients/ArrayWithGradients.rst", "array/image.rst", "array/image/ArrayWithImage.rst", "array/layers.rst", "array/layers/ArrayWithLayers.rst", "array/linear_algebra.rst", "array/linear_algebra/ArrayWithLinearAlgebra.rst", "array/losses.rst", "array/losses/ArrayWithLosses.rst", "array/manipulation.rst", "array/manipulation/ArrayWithManipulation.rst", "array/norms.rst", "array/norms/ArrayWithNorms.rst", "array/random.rst", "array/random/ArrayWithRandom.rst", "array/searching.rst", "array/searching/ArrayWithSearching.rst", "array/set.rst", "array/set/ArrayWithSet.rst", "array/sorting.rst", "array/sorting/ArrayWithSorting.rst", "array/statistical.rst", "array/statistical/ArrayWithStatistical.rst", "array/utility.rst", "array/utility/ArrayWithUtility.rst", "array/wrapping.rst", "array/wrapping/add_ivy_array_instance_methods.rst", "backend_handler.rst", "backend_handler/ContextManager:\n    def __init__.rst", "backend_handler/choose_random_backend.rst", "backend_handler/clear_backend_stack.rst", "backend_handler/current_backend.rst", "backend_handler/get_backend.rst", "backend_handler/set_backend.rst", "backend_handler/try_import_ivy_jax.rst", "backend_handler/try_import_ivy_mxnet.rst", "backend_handler/try_import_ivy_numpy.rst", "backend_handler/try_import_ivy_tf.rst", "backend_handler/try_import_ivy_torch.rst", "backend_handler/unset_backend.rst", "background.rst", "background/ml_explosion.rst", "background/standardization.rst", "background/why_unify.rst", "container/activations.rst", "container/activations/ContainerWithActivations.rst", "container/base.rst", "container/base/ContainerBase.rst", "container/container.rst", "container/container/Container.rst", "container/container/MultiDevContainer.rst", "container/container_methods.rst", "container/container_methods/abs.rst", "container/container_methods/acos.rst", "container/container_methods/acosh.rst", "container/container_methods/adam_update.rst", "container/container_methods/add.rst", "container/container_methods/all.rst", "container/container_methods/all_equal.rst", "container/container_methods/any.rst", "container/container_methods/argsort.rst", "container/container_methods/asin.rst", "container/container_methods/asinh.rst", "container/container_methods/at_dev.rst", "container/container_methods/at_devs.rst", "container/container_methods/atan.rst", "container/container_methods/atan2.rst", "container/container_methods/atanh.rst", "container/container_methods/binary_cross_entropy.rst", "container/container_methods/bitwise_and.rst", "container/container_methods/bitwise_invert.rst", "container/container_methods/bitwise_left_shift.rst", "container/container_methods/bitwise_or.rst", "container/container_methods/bitwise_right_shift.rst", "container/container_methods/bitwise_xor.rst", "container/container_methods/can_cast.rst", "container/container_methods/ceil.rst", "container/container_methods/clip.rst", "container/container_methods/clip_vector_norm.rst", "container/container_methods/concat.rst", "container/container_methods/constant_pad.rst", "container/container_methods/cos.rst", "container/container_methods/cosh.rst", "container/container_methods/cross_entropy.rst", "container/container_methods/divide.rst", "container/container_methods/einsum.rst", "container/container_methods/equal.rst", "container/container_methods/erf.rst", "container/container_methods/exp.rst", "container/container_methods/expand_dims.rst", "container/container_methods/expm1.rst", "container/container_methods/flip.rst", "container/container_methods/floor.rst", "container/container_methods/floor_divide.rst", "container/container_methods/gradient_descent_update.rst", "container/container_methods/greater.rst", "container/container_methods/greater_equal.rst", "container/container_methods/isfinite.rst", "container/container_methods/isinf.rst", "container/container_methods/isnan.rst", "container/container_methods/lamb_update.rst", "container/container_methods/lars_update.rst", "container/container_methods/layer_norm.rst", "container/container_methods/less.rst", "container/container_methods/less_equal.rst", "container/container_methods/log.rst", "container/container_methods/log10.rst", "container/container_methods/log1p.rst", "container/container_methods/log2.rst", "container/container_methods/logaddexp.rst", "container/container_methods/logical_and.rst", "container/container_methods/logical_not.rst", "container/container_methods/logical_or.rst", "container/container_methods/logical_xor.rst", "container/container_methods/matmul.rst", "container/container_methods/max.rst", "container/container_methods/mean.rst", "container/container_methods/min.rst", "container/container_methods/multiply.rst", "container/container_methods/negative.rst", "container/container_methods/not_equal.rst", "container/container_methods/optimizer_update.rst", "container/container_methods/permute_dims.rst", "container/container_methods/positive.rst", "container/container_methods/pow.rst", "container/container_methods/prod.rst", "container/container_methods/random_uniform.rst", "container/container_methods/remainder.rst", "container/container_methods/repeat.rst", "container/container_methods/reshape.rst", "container/container_methods/roll.rst", "container/container_methods/round.rst", "container/container_methods/sign.rst", "container/container_methods/sin.rst", "container/container_methods/sinh.rst", "container/container_methods/sort.rst", "container/container_methods/sparse_cross_entropy.rst", "container/container_methods/sqrt.rst", "container/container_methods/square.rst", "container/container_methods/squeeze.rst", "container/container_methods/stack.rst", "container/container_methods/static_adam_update.rst", "container/container_methods/static_add.rst", "container/container_methods/static_all_equal.rst", "container/container_methods/static_argsort.rst", "container/container_methods/static_binary_cross_entropy.rst", "container/container_methods/static_can_cast.rst", "container/container_methods/static_clip.rst", "container/container_methods/static_cross_entropy.rst", "container/container_methods/static_divide.rst", "container/container_methods/static_gradient_descent_update.rst", "container/container_methods/static_lamb_update.rst", "container/container_methods/static_lars_update.rst", "container/container_methods/static_multiply.rst", "container/container_methods/static_optimizer_update.rst", "container/container_methods/static_randint.rst", "container/container_methods/static_random_uniform.rst", "container/container_methods/static_roll.rst", "container/container_methods/static_sort.rst", "container/container_methods/static_sparse_cross_entropy.rst", "container/container_methods/static_subtract.rst", "container/container_methods/static_tan.rst", "container/container_methods/static_tanh.rst", "container/container_methods/std.rst", "container/container_methods/subtract.rst", "container/container_methods/sum.rst", "container/container_methods/swapaxes.rst", "container/container_methods/tan.rst", "container/container_methods/tanh.rst", "container/container_methods/tile.rst", "container/container_methods/trunc.rst", "container/container_methods/var.rst", "container/container_methods/zero_pad.rst", "container/creation.rst", "container/creation/ContainerWithCreation.rst", "container/data_types.rst", "container/data_types/ContainerWithDataTypes.rst", "container/device.rst", "container/device/ContainerWithDevice.rst", "container/elementwise.rst", "container/elementwise/ContainerWithElementwise.rst", "container/general.rst", "container/general/ContainerWithGeneral.rst", "container/gradients.rst", "container/gradients/ContainerWithGradients.rst", "container/image.rst", "container/image/ContainerWithImage.rst", "container/layers.rst", "container/layers/ContainerWithLayers.rst", "container/linear_algebra.rst", "container/linear_algebra/ContainerWithLinearAlgebra.rst", "container/losses.rst", "container/losses/ContainerWithLosses.rst", "container/manipulation.rst", "container/manipulation/ContainerWithManipulation.rst", "container/norms.rst", "container/norms/ContainerWithNorms.rst", "container/random.rst", "container/random/ContainerWithRandom.rst", "container/searching.rst", "container/searching/ContainerWithSearching.rst", "container/set.rst", "container/set/ContainerWithSet.rst", "container/sorting.rst", "container/sorting/ContainerWithSorting.rst", "container/statistical.rst", "container/statistical/ContainerWithStatistical.rst", "container/utility.rst", "container/utility/ContainerWithUtility.rst", "container/wrapping.rst", "container/wrapping/add_ivy_container_instance_methods.rst", "contributing.rst", "contributing/0_setting_up.rst", "contributing/1_the_basics.rst", "contributing/4_open_tasks.rst", "contributing/building_the_docs.rst", "deep_dive.rst", "deep_dive/0_navigating_the_code.rst", "deep_dive/10_docstrings.rst", "deep_dive/11_docstring_examples.rst", "deep_dive/12_array_api_tests.rst", "deep_dive/13_ivy_tests.rst", "deep_dive/1_function_types.rst", "deep_dive/2_backend_setting.rst", "deep_dive/3_function_wrapping.rst", "deep_dive/4_arrays.rst", "deep_dive/5_containers.rst", "deep_dive/6_data_types.rst", "deep_dive/7_devices.rst", "deep_dive/8_inplace_updates.rst", "deep_dive/9_function_arguments.rst", "design.rst", "design/building_blocks.rst", "design/ivy_as_a_framework.rst", "design/ivy_as_a_framework/ivy_array.rst", "design/ivy_as_a_framework/ivy_container.rst", "design/ivy_as_a_framework/ivy_stateful_api.rst", "design/ivy_as_a_transpiler.rst", "docs/ivy.rst", "docs/ivy_builder.rst", "docs/ivy_ecosystem.rst", "docs/ivy_gym.rst", "docs/ivy_mech.rst", "docs/ivy_memory.rst", "docs/ivy_models.rst", "docs/ivy_robot.rst", "docs/ivy_vision.rst", "extensions.rst", "extensions/applied_libraries.rst", "faq.rst", "func_wrapper.rst", "func_wrapper/handle_nestable.rst", "func_wrapper/handle_out_argument.rst", "func_wrapper/infer_device.rst", "func_wrapper/infer_dtype.rst", "func_wrapper/inputs_to_ivy_arrays.rst", "func_wrapper/inputs_to_native_arrays.rst", "func_wrapper/outputs_to_ivy_arrays.rst", "func_wrapper/to_native_arrays_and_back.rst", "functional/ivy.rst", "functional/ivy/activations.rst", "functional/ivy/activations/gelu.rst", "functional/ivy/activations/leaky_relu.rst", "functional/ivy/activations/relu.rst", "functional/ivy/activations/sigmoid.rst", "functional/ivy/activations/softmax.rst", "functional/ivy/activations/softplus.rst", "functional/ivy/activations/tanh.rst", "functional/ivy/compilation.rst", "functional/ivy/compilation/compile.rst", "functional/ivy/constants.rst", "functional/ivy/creation.rst", "functional/ivy/creation/arange.rst", "functional/ivy/creation/asarray.rst", "functional/ivy/creation/empty.rst", "functional/ivy/creation/empty_like.rst", "functional/ivy/creation/eye.rst", "functional/ivy/creation/from_dlpack.rst", "functional/ivy/creation/full.rst", "functional/ivy/creation/full_like.rst", "functional/ivy/creation/linspace.rst", "functional/ivy/creation/logspace.rst", "functional/ivy/creation/meshgrid.rst", "functional/ivy/creation/native_array.rst", "functional/ivy/creation/ones.rst", "functional/ivy/creation/ones_like.rst", "functional/ivy/creation/tril.rst", "functional/ivy/creation/triu.rst", "functional/ivy/creation/zeros.rst", "functional/ivy/creation/zeros_like.rst", "functional/ivy/data_type.rst", "functional/ivy/data_type/DefaultDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultFloatDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/DefaultIntDtype:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/data_type/as_ivy_dtype.rst", "functional/ivy/data_type/as_native_dtype.rst", "functional/ivy/data_type/astype.rst", "functional/ivy/data_type/broadcast_arrays.rst", "functional/ivy/data_type/broadcast_to.rst", "functional/ivy/data_type/can_cast.rst", "functional/ivy/data_type/closest_valid_dtype.rst", "functional/ivy/data_type/default_dtype.rst", "functional/ivy/data_type/default_float_dtype.rst", "functional/ivy/data_type/default_int_dtype.rst", "functional/ivy/data_type/dtype.rst", "functional/ivy/data_type/dtype_bits.rst", "functional/ivy/data_type/finfo.rst", "functional/ivy/data_type/function_supported_dtypes.rst", "functional/ivy/data_type/function_unsupported_dtypes.rst", "functional/ivy/data_type/iinfo.rst", "functional/ivy/data_type/invalid_dtype.rst", "functional/ivy/data_type/is_float_dtype.rst", "functional/ivy/data_type/is_int_dtype.rst", "functional/ivy/data_type/promote_types.rst", "functional/ivy/data_type/result_type.rst", "functional/ivy/data_type/set_default_dtype.rst", "functional/ivy/data_type/set_default_float_dtype.rst", "functional/ivy/data_type/set_default_int_dtype.rst", "functional/ivy/data_type/type_promote_arrays.rst", "functional/ivy/data_type/unset_default_dtype.rst", "functional/ivy/data_type/unset_default_float_dtype.rst", "functional/ivy/data_type/unset_default_int_dtype.rst", "functional/ivy/data_type/valid_dtype.rst", "functional/ivy/device.rst", "functional/ivy/device/DefaultDevice:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/device/DevClonedItem.rst", "functional/ivy/device/DevClonedIter.rst", "functional/ivy/device/DevClonedNest.rst", "functional/ivy/device/DevDistItem.rst", "functional/ivy/device/DevDistIter.rst", "functional/ivy/device/DevDistNest.rst", "functional/ivy/device/DevManager:\n    \"\"\"\"\"\"\n\n    def __init__.rst", "functional/ivy/device/DevMapper.rst", "functional/ivy/device/DevMapperMultiProc.rst", "functional/ivy/device/MultiDev:\n    def __init__.rst", "functional/ivy/device/MultiDevItem.rst", "functional/ivy/device/MultiDevIter.rst", "functional/ivy/device/MultiDevNest.rst", "functional/ivy/device/Profiler.rst", "functional/ivy/device/as_ivy_dev.rst", "functional/ivy/device/as_native_dev.rst", "functional/ivy/device/clear_mem_on_dev.rst", "functional/ivy/device/default_device.rst", "functional/ivy/device/dev.rst", "functional/ivy/device/dev_clone.rst", "functional/ivy/device/dev_clone_array.rst", "functional/ivy/device/dev_clone_iter.rst", "functional/ivy/device/dev_clone_nest.rst", "functional/ivy/device/dev_dist.rst", "functional/ivy/device/dev_dist_array.rst", "functional/ivy/device/dev_dist_iter.rst", "functional/ivy/device/dev_dist_nest.rst", "functional/ivy/device/dev_unify.rst", "functional/ivy/device/dev_unify_array.rst", "functional/ivy/device/dev_unify_iter.rst", "functional/ivy/device/dev_unify_nest.rst", "functional/ivy/device/dev_util.rst", "functional/ivy/device/get_all_ivy_arrays_on_dev.rst", "functional/ivy/device/gpu_is_available.rst", "functional/ivy/device/num_cpu_cores.rst", "functional/ivy/device/num_gpus.rst", "functional/ivy/device/num_ivy_arrays_on_dev.rst", "functional/ivy/device/percent_used_mem_on_dev.rst", "functional/ivy/device/print_all_ivy_arrays_on_dev.rst", "functional/ivy/device/set_default_device.rst", "functional/ivy/device/set_split_factor.rst", "functional/ivy/device/split_factor.rst", "functional/ivy/device/split_func_call.rst", "functional/ivy/device/to_device.rst", "functional/ivy/device/total_mem_on_dev.rst", "functional/ivy/device/tpu_is_available.rst", "functional/ivy/device/unset_default_device.rst", "functional/ivy/device/used_mem_on_dev.rst", "functional/ivy/elementwise.rst", "functional/ivy/elementwise/abs.rst", "functional/ivy/elementwise/acos.rst", "functional/ivy/elementwise/acosh.rst", "functional/ivy/elementwise/add.rst", "functional/ivy/elementwise/asin.rst", "functional/ivy/elementwise/asin/asin_array.rst", "functional/ivy/elementwise/asin/asin_functional.rst", "functional/ivy/elementwise/asinh.rst", "functional/ivy/elementwise/atan.rst", "functional/ivy/elementwise/atan2.rst", "functional/ivy/elementwise/atanh.rst", "functional/ivy/elementwise/bitwise_and.rst", "functional/ivy/elementwise/bitwise_invert.rst", "functional/ivy/elementwise/bitwise_left_shift.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_array.rst", "functional/ivy/elementwise/bitwise_left_shift/bitwise_left_shift_functional.rst", "functional/ivy/elementwise/bitwise_or.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_array.rst", "functional/ivy/elementwise/bitwise_or/bitwise_or_functional.rst", "functional/ivy/elementwise/bitwise_right_shift.rst", "functional/ivy/elementwise/bitwise_xor.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_array.rst", "functional/ivy/elementwise/bitwise_xor/bitwise_xor_functional.rst", "functional/ivy/elementwise/ceil.rst", "functional/ivy/elementwise/cos.rst", "functional/ivy/elementwise/cosh.rst", "functional/ivy/elementwise/divide.rst", "functional/ivy/elementwise/equal.rst", "functional/ivy/elementwise/erf.rst", "functional/ivy/elementwise/erf/erf_array.rst", "functional/ivy/elementwise/erf/erf_container.rst", "functional/ivy/elementwise/erf/erf_functional.rst", "functional/ivy/elementwise/exp.rst", "functional/ivy/elementwise/expm1.rst", "functional/ivy/elementwise/floor.rst", "functional/ivy/elementwise/floor_divide.rst", "functional/ivy/elementwise/greater.rst", "functional/ivy/elementwise/greater_equal.rst", "functional/ivy/elementwise/isfinite.rst", "functional/ivy/elementwise/isinf.rst", "functional/ivy/elementwise/isnan.rst", "functional/ivy/elementwise/less.rst", "functional/ivy/elementwise/less_equal.rst", "functional/ivy/elementwise/log.rst", "functional/ivy/elementwise/log/log_array.rst", "functional/ivy/elementwise/log/log_functional.rst", "functional/ivy/elementwise/log10.rst", "functional/ivy/elementwise/log1p.rst", "functional/ivy/elementwise/log2.rst", "functional/ivy/elementwise/log2/log2_array.rst", "functional/ivy/elementwise/log2/log2_functional.rst", "functional/ivy/elementwise/logaddexp.rst", "functional/ivy/elementwise/logical_and.rst", "functional/ivy/elementwise/logical_not.rst", "functional/ivy/elementwise/logical_or.rst", "functional/ivy/elementwise/logical_or/logical_or_array.rst", "functional/ivy/elementwise/logical_or/logical_or_functional.rst", "functional/ivy/elementwise/logical_xor.rst", "functional/ivy/elementwise/maximum.rst", "functional/ivy/elementwise/minimum.rst", "functional/ivy/elementwise/multiply.rst", "functional/ivy/elementwise/negative.rst", "functional/ivy/elementwise/not_equal.rst", "functional/ivy/elementwise/positive.rst", "functional/ivy/elementwise/pow.rst", "functional/ivy/elementwise/remainder.rst", "functional/ivy/elementwise/round.rst", "functional/ivy/elementwise/sign.rst", "functional/ivy/elementwise/sin.rst", "functional/ivy/elementwise/sin/sin_array.rst", "functional/ivy/elementwise/sin/sin_container.rst", "functional/ivy/elementwise/sin/sin_functional.rst", "functional/ivy/elementwise/sinh.rst", "functional/ivy/elementwise/sqrt.rst", "functional/ivy/elementwise/square.rst", "functional/ivy/elementwise/square/square_array.rst", "functional/ivy/elementwise/square/square_functional.rst", "functional/ivy/elementwise/subtract.rst", "functional/ivy/elementwise/tan.rst", "functional/ivy/elementwise/tanh.rst", "functional/ivy/elementwise/trunc.rst", "functional/ivy/general.rst", "functional/ivy/general/all_equal.rst", "functional/ivy/general/arg_info.rst", "functional/ivy/general/arg_names.rst", "functional/ivy/general/array_equal.rst", "functional/ivy/general/arrays_equal.rst", "functional/ivy/general/assert_supports_inplace.rst", "functional/ivy/general/cache_fn.rst", "functional/ivy/general/clip_matrix_norm.rst", "functional/ivy/general/clip_vector_norm.rst", "functional/ivy/general/container_types.rst", "functional/ivy/general/copy_array.rst", "functional/ivy/general/cumprod.rst", "functional/ivy/general/cumsum.rst", "functional/ivy/general/current_backend_str.rst", "functional/ivy/general/default.rst", "functional/ivy/general/einops_rearrange.rst", "functional/ivy/general/einops_reduce.rst", "functional/ivy/general/einops_repeat.rst", "functional/ivy/general/exists.rst", "functional/ivy/general/floormod.rst", "functional/ivy/general/fourier_encode.rst", "functional/ivy/general/gather.rst", "functional/ivy/general/gather_nd.rst", "functional/ivy/general/get_all_arrays_in_memory.rst", "functional/ivy/general/get_min_base.rst", "functional/ivy/general/get_min_denominator.rst", "functional/ivy/general/get_num_dims.rst", "functional/ivy/general/get_referrers_recursive.rst", "functional/ivy/general/has_nans.rst", "functional/ivy/general/indices_where.rst", "functional/ivy/general/inplace_arrays_supported.rst", "functional/ivy/general/inplace_decrement.rst", "functional/ivy/general/inplace_increment.rst", "functional/ivy/general/inplace_update.rst", "functional/ivy/general/inplace_variables_supported.rst", "functional/ivy/general/is_array.rst", "functional/ivy/general/is_ivy_array.rst", "functional/ivy/general/is_ivy_container.rst", "functional/ivy/general/is_native_array.rst", "functional/ivy/general/match_kwargs.rst", "functional/ivy/general/multiprocessing.rst", "functional/ivy/general/num_arrays_in_memory.rst", "functional/ivy/general/one_hot.rst", "functional/ivy/general/print_all_arrays_in_memory.rst", "functional/ivy/general/queue_timeout.rst", "functional/ivy/general/scatter_flat.rst", "functional/ivy/general/scatter_nd.rst", "functional/ivy/general/set_min_base.rst", "functional/ivy/general/set_min_denominator.rst", "functional/ivy/general/set_queue_timeout.rst", "functional/ivy/general/set_tmp_dir.rst", "functional/ivy/general/shape.rst", "functional/ivy/general/shape_to_tuple.rst", "functional/ivy/general/stable_divide.rst", "functional/ivy/general/stable_pow.rst", "functional/ivy/general/supports_inplace.rst", "functional/ivy/general/tmp_dir.rst", "functional/ivy/general/to_list.rst", "functional/ivy/general/to_numpy.rst", "functional/ivy/general/to_scalar.rst", "functional/ivy/general/try_else_none.rst", "functional/ivy/general/unstack.rst", "functional/ivy/general/value_is_nan.rst", "functional/ivy/gradients.rst", "functional/ivy/gradients/GradientTracking:\n    \"\"\"\"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__.rst", "functional/ivy/gradients/adam_step.rst", "functional/ivy/gradients/adam_update.rst", "functional/ivy/gradients/execute_with_gradients.rst", "functional/ivy/gradients/gradient_descent_update.rst", "functional/ivy/gradients/is_variable.rst", "functional/ivy/gradients/lamb_update.rst", "functional/ivy/gradients/lars_update.rst", "functional/ivy/gradients/optimizer_update.rst", "functional/ivy/gradients/set_with_grads.rst", "functional/ivy/gradients/stop_gradient.rst", "functional/ivy/gradients/unset_with_grads.rst", "functional/ivy/gradients/variable.rst", "functional/ivy/gradients/variable_data.rst", "functional/ivy/gradients/with_grads.rst", "functional/ivy/layers.rst", "functional/ivy/layers/conv1d.rst", "functional/ivy/layers/conv1d_transpose.rst", "functional/ivy/layers/conv2d.rst", "functional/ivy/layers/conv2d_transpose.rst", "functional/ivy/layers/conv3d.rst", "functional/ivy/layers/conv3d_transpose.rst", "functional/ivy/layers/depthwise_conv2d.rst", "functional/ivy/layers/dropout.rst", "functional/ivy/layers/linear.rst", "functional/ivy/layers/lstm_update.rst", "functional/ivy/layers/multi_head_attention.rst", "functional/ivy/layers/scaled_dot_product_attention.rst", "functional/ivy/linear_algebra.rst", "functional/ivy/linear_algebra/cholesky.rst", "functional/ivy/linear_algebra/cross.rst", "functional/ivy/linear_algebra/det.rst", "functional/ivy/linear_algebra/diagonal.rst", "functional/ivy/linear_algebra/eigh.rst", "functional/ivy/linear_algebra/eigvalsh.rst", "functional/ivy/linear_algebra/inv.rst", "functional/ivy/linear_algebra/matmul.rst", "functional/ivy/linear_algebra/matrix_norm.rst", "functional/ivy/linear_algebra/matrix_power.rst", "functional/ivy/linear_algebra/matrix_rank.rst", "functional/ivy/linear_algebra/matrix_transpose.rst", "functional/ivy/linear_algebra/outer.rst", "functional/ivy/linear_algebra/pinv.rst", "functional/ivy/linear_algebra/qr.rst", "functional/ivy/linear_algebra/slogdet.rst", "functional/ivy/linear_algebra/solve.rst", "functional/ivy/linear_algebra/svd.rst", "functional/ivy/linear_algebra/svdvals.rst", "functional/ivy/linear_algebra/tensordot.rst", "functional/ivy/linear_algebra/trace.rst", "functional/ivy/linear_algebra/vecdot.rst", "functional/ivy/linear_algebra/vector_norm.rst", "functional/ivy/linear_algebra/vector_to_skew_symmetric_matrix.rst", "functional/ivy/losses.rst", "functional/ivy/losses/binary_cross_entropy.rst", "functional/ivy/losses/cross_entropy.rst", "functional/ivy/losses/cross_entropy/cross_entropy_array.rst", "functional/ivy/losses/cross_entropy/cross_entropy_functional.rst", "functional/ivy/losses/sparse_cross_entropy.rst", "functional/ivy/manipulation.rst", "functional/ivy/manipulation/clip.rst", "functional/ivy/manipulation/clip/clip_functional.rst", "functional/ivy/manipulation/clip/static_clip_container.rst", "functional/ivy/manipulation/concat.rst", "functional/ivy/manipulation/concat/concat_array.rst", "functional/ivy/manipulation/concat/concat_functional.rst", "functional/ivy/manipulation/constant_pad.rst", "functional/ivy/manipulation/expand_dims.rst", "functional/ivy/manipulation/flip.rst", "functional/ivy/manipulation/permute_dims.rst", "functional/ivy/manipulation/repeat.rst", "functional/ivy/manipulation/reshape.rst", "functional/ivy/manipulation/reshape/reshape_array.rst", "functional/ivy/manipulation/reshape/reshape_functional.rst", "functional/ivy/manipulation/roll.rst", "functional/ivy/manipulation/split.rst", "functional/ivy/manipulation/squeeze.rst", "functional/ivy/manipulation/stack.rst", "functional/ivy/manipulation/swapaxes.rst", "functional/ivy/manipulation/tile.rst", "functional/ivy/manipulation/zero_pad.rst", "functional/ivy/meta.rst", "functional/ivy/meta/fomaml_step.rst", "functional/ivy/meta/maml_step.rst", "functional/ivy/meta/reptile_step.rst", "functional/ivy/nest.rst", "functional/ivy/nest/all_nested_indices.rst", "functional/ivy/nest/copy_nest.rst", "functional/ivy/nest/index_nest.rst", "functional/ivy/nest/insert_into_nest_at_index.rst", "functional/ivy/nest/insert_into_nest_at_indices.rst", "functional/ivy/nest/map.rst", "functional/ivy/nest/map_nest_at_index.rst", "functional/ivy/nest/map_nest_at_indices.rst", "functional/ivy/nest/multi_index_nest.rst", "functional/ivy/nest/nested_any.rst", "functional/ivy/nest/nested_indices_where.rst", "functional/ivy/nest/nested_map.rst", "functional/ivy/nest/nested_multi_map.rst", "functional/ivy/nest/prune_nest_at_index.rst", "functional/ivy/nest/prune_nest_at_indices.rst", "functional/ivy/nest/set_nest_at_index.rst", "functional/ivy/nest/set_nest_at_indices.rst", "functional/ivy/norms.rst", "functional/ivy/norms/layer_norm.rst", "functional/ivy/random.rst", "functional/ivy/random/multinomial.rst", "functional/ivy/random/randint.rst", "functional/ivy/random/random_normal.rst", "functional/ivy/random/random_uniform.rst", "functional/ivy/random/seed.rst", "functional/ivy/random/shuffle.rst", "functional/ivy/searching.rst", "functional/ivy/searching/argmax.rst", "functional/ivy/searching/argmin.rst", "functional/ivy/searching/nonzero.rst", "functional/ivy/searching/where.rst", "functional/ivy/set.rst", "functional/ivy/set/unique_all.rst", "functional/ivy/set/unique_counts.rst", "functional/ivy/set/unique_inverse.rst", "functional/ivy/set/unique_values.rst", "functional/ivy/sorting.rst", "functional/ivy/sorting/argsort.rst", "functional/ivy/sorting/sort.rst", "functional/ivy/statistical.rst", "functional/ivy/statistical/einsum.rst", "functional/ivy/statistical/max.rst", "functional/ivy/statistical/mean.rst", "functional/ivy/statistical/min.rst", "functional/ivy/statistical/prod.rst", "functional/ivy/statistical/std.rst", "functional/ivy/statistical/sum.rst", "functional/ivy/statistical/var.rst", "functional/ivy/utility.rst", "functional/ivy/utility/all.rst", "functional/ivy/utility/all/all_array.rst", "functional/ivy/utility/all/all_functional.rst", "functional/ivy/utility/any.rst", "index.rst", "index_append.rst", "index_prepend.rst", "inspection.rst", "inspection/add_array_specs.rst", "inspection/fn_array_spec.rst", "roadmap.rst", "stateful/activations.rst", "stateful/activations/GEGLU.rst", "stateful/activations/GELU.rst", "stateful/converters.rst", "stateful/converters/to_ivy_module.rst", "stateful/initializers.rst", "stateful/initializers/Constant:\n    def __init__.rst", "stateful/initializers/FirstLayerSiren.rst", "stateful/initializers/GlorotUniform.rst", "stateful/initializers/KaimingNormal:\n    def __init__.rst", "stateful/initializers/Ones.rst", "stateful/initializers/Siren.rst", "stateful/initializers/Uniform:\n    def __init__.rst", "stateful/initializers/Zeros.rst", "stateful/layers.rst", "stateful/layers/Conv1D.rst", "stateful/layers/Conv1DTranspose.rst", "stateful/layers/Conv2D.rst", "stateful/layers/Conv2DTranspose.rst", "stateful/layers/Conv3D.rst", "stateful/layers/Conv3DTranspose.rst", "stateful/layers/DepthwiseConv2D.rst", "stateful/layers/Dropout.rst", "stateful/layers/LSTM.rst", "stateful/layers/Linear.rst", "stateful/layers/MultiHeadAttention.rst", "stateful/module.rst", "stateful/module/Module.rst", "stateful/norms.rst", "stateful/norms/LayerNorm.rst", "stateful/optimizers.rst", "stateful/optimizers/Adam.rst", "stateful/optimizers/LAMB.rst", "stateful/optimizers/LARS.rst", "stateful/optimizers/Optimizer.rst", "stateful/optimizers/SGD.rst", "stateful/sequential.rst", "stateful/sequential/Sequential.rst", "supported_frameworks.rst", "verbosity.rst", "verbosity/cprint.rst"], "titles": ["Activations", "ArrayWithActivations", "Array methods", "abs array", "acos array", "acosh array", "add array", "all array", "all_equal array", "any array", "argsort array", "asin array", "asinh array", "atan array", "atan2 array", "atanh array", "binary_cross_entropy array", "bitwise_and array", "bitwise_invert array", "bitwise_left_shift array", "bitwise_or array", "bitwise_right_shift array", "bitwise_xor array", "can_cast array", "ceil array", "clip array", "concat array", "constant_pad array", "cos array", "cosh array", "cross_entropy array", "divide array", "einsum array", "equal array", "erf array", "exp array", "expand_dims array", "expm1 array", "flip array", "floor array", "floor_divide array", "greater array", "greater_equal array", "isfinite array", "isinf array", "isnan array", "layer_norm array", "less array", "less_equal array", "log array", "log10 array", "log1p array", "log2 array", "logaddexp array", "logical_and array", "logical_not array", "logical_or array", "logical_xor array", "matmul array", "max array", "mean array", "min array", "multiply array", "negative array", "not_equal array", "permute_dims array", "positive array", "pow array", "prod array", "remainder array", "repeat array", "reshape array", "roll array", "round array", "sign array", "sin array", "sinh array", "sort array", "sparse_cross_entropy array", "sqrt array", "square array", "squeeze array", "stack array", "std array", "subtract array", "sum array", "swapaxes array", "tan array", "tanh array", "tile array", "trunc array", "var array", "zero_pad array", "Conversions", "args_to_ivy", "args_to_native", "to_ivy", "to_native", "Creation", "ArrayWithCreation", "Data types", "ArrayWithDataTypes", "Device", "ArrayWithDevice", "Elementwise", "ArrayWithElementwise", "General", "ArrayWithGeneral", "Gradients", "ArrayWithGradients", "Image", "ArrayWithImage", "Layers", "ArrayWithLayers", "Linear algebra", "ArrayWithLinearAlgebra", "Losses", "ArrayWithLosses", "Manipulation", "ArrayWithManipulation", "Norms", "ArrayWithNorms", "Random", "ArrayWithRandom", "Searching", "ArrayWithSearching", "Set", "ArrayWithSet", "Sorting", "ArrayWithSorting", "Statistical", "ArrayWithStatistical", "Utility", "ArrayWithUtility", "Wrapping", "add_ivy_array_instance_methods", "Backend handler", "&lt;no title&gt;", "choose_random_backend", "clear_backend_stack", "current_backend", "get_backend", "set_backend", "try_import_ivy_jax", "try_import_ivy_mxnet", "try_import_ivy_numpy", "try_import_ivy_tf", "try_import_ivy_torch", "unset_backend", "Background", "ML Explosion", "Standardization", "Why Unify?", "Activations", "ContainerWithActivations", "Base", "ContainerBase", "Container", "Container", "MultiDevContainer", "Container methods", "abs container", "acos container", "acosh container", "adam_update container", "add container", "all container", "all_equal container", "any container", "argsort container", "asin container", "asinh container", "at_dev container", "at_devs container", "atan container", "atan2 container", "atanh container", "binary_cross_entropy container", "bitwise_and container", "bitwise_invert container", "bitwise_left_shift container", "bitwise_or container", "bitwise_right_shift container", "bitwise_xor container", "can_cast container", "ceil container", "clip container", "clip_vector_norm container", "concat container", "constant_pad container", "cos container", "cosh container", "cross_entropy container", "divide container", "einsum container", "equal container", "erf container", "exp container", "expand_dims container", "expm1 container", "flip container", "floor container", "floor_divide container", "gradient_descent_update container", "greater container", "greater_equal container", "isfinite container", "isinf container", "isnan container", "lamb_update container", "lars_update container", "layer_norm container", "less container", "less_equal container", "log container", "log10 container", "log1p container", "log2 container", "logaddexp container", "logical_and container", "logical_not container", "logical_or container", "logical_xor container", "matmul container", "max container", "mean container", "min container", "multiply container", "negative container", "not_equal container", "optimizer_update container", "permute_dims container", "positive container", "pow container", "prod container", "random_uniform container", "remainder container", "repeat container", "reshape container", "roll container", "round container", "sign container", "sin container", "sinh container", "sort container", "sparse_cross_entropy container", "sqrt container", "square container", "squeeze container", "stack container", "static_adam_update container", "static_add container", "static_all_equal container", "static_argsort container", "static_binary_cross_entropy container", "static_can_cast container", "static_clip container", "static_cross_entropy container", "static_divide container", "static_gradient_descent_update container", "static_lamb_update container", "static_lars_update container", "static_multiply container", "static_optimizer_update container", "static_randint container", "static_random_uniform container", "static_roll container", "static_sort container", "static_sparse_cross_entropy container", "static_subtract container", "static_tan container", "static_tanh container", "std container", "subtract container", "sum container", "swapaxes container", "tan container", "tanh container", "tile container", "trunc container", "var container", "zero_pad container", "Creation", "ContainerWithCreation", "Data types", "ContainerWithDataTypes", "Device", "ContainerWithDevice", "Elementwise", "ContainerWithElementwise", "General", "ContainerWithGeneral", "Gradients", "ContainerWithGradients", "Image", "ContainerWithImage", "Layers", "ContainerWithLayers", "Linear algebra", "ContainerWithLinearAlgebra", "Losses", "ContainerWithLosses", "Manipulation", "ContainerWithManipulation", "Norms", "ContainerWithNorms", "Random", "ContainerWithRandom", "Searching", "ContainerWithSearching", "Set", "ContainerWithSet", "Sorting", "ContainerWithSorting", "Statistical", "ContainerWithStatistical", "Utility", "ContainerWithUtility", "Wrapping", "add_ivy_container_instance_methods", "Contributing", "Setting Up", "The Basics", "Open Tasks", "Building the Docs", "Deep Dive", "Navigating the Code", "Docstrings", "Docstring Examples", "Array API Tests", "Ivy Tests", "Function Types", "Backend Setting", "Function Wrapping", "Arrays", "Containers", "Data Types", "Devices", "Inplace Updates", "Function Arguments", "Design", "Building Blocks", "Ivy as a Framework", "Ivy Array", "Ivy Container", "Ivy Stateful API", "Ivy as a Transpiler", "Ivy", "Ivy builder", "Ivy ecosystem", "Ivy gym", "Ivy mech", "Ivy memory", "Ivy models", "Ivy robot", "Ivy vision", "Extensions", "Applied Libraries", "FAQ", "Func wrapper", "handle_nestable", "handle_out_argument", "infer_device", "infer_dtype", "inputs_to_ivy_arrays", "inputs_to_native_arrays", "outputs_to_ivy_arrays", "to_native_arrays_and_back", "&lt;no title&gt;", "Activations", "gelu", "leaky_relu", "relu", "sigmoid", "softmax", "softplus", "tanh", "Compilation", "compile", "Constants", "Creation", "arange", "asarray", "empty", "empty_like", "eye", "from_dlpack", "full", "full_like", "linspace", "logspace", "meshgrid", "native_array", "ones", "ones_like", "tril", "triu", "zeros", "zeros_like", "Data type", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "as_ivy_dtype", "as_native_dtype", "astype", "broadcast_arrays", "broadcast_to", "can_cast", "closest_valid_dtype", "default_dtype", "default_float_dtype", "default_int_dtype", "dtype", "dtype_bits", "finfo", "function_supported_dtypes", "function_unsupported_dtypes", "iinfo", "invalid_dtype", "is_float_dtype", "is_int_dtype", "promote_types", "result_type", "set_default_dtype", "set_default_float_dtype", "set_default_int_dtype", "type_promote_arrays", "unset_default_dtype", "unset_default_float_dtype", "unset_default_int_dtype", "valid_dtype", "Device", "&lt;no title&gt;", "DevClonedItem", "DevClonedIter", "DevClonedNest", "DevDistItem", "DevDistIter", "DevDistNest", "&lt;no title&gt;", "DevMapper", "DevMapperMultiProc", "&lt;no title&gt;", "MultiDevItem", "MultiDevIter", "MultiDevNest", "Profiler", "as_ivy_dev", "as_native_dev", "clear_mem_on_dev", "default_device", "dev", "dev_clone", "dev_clone_array", "dev_clone_iter", "dev_clone_nest", "dev_dist", "dev_dist_array", "dev_dist_iter", "dev_dist_nest", "dev_unify", "dev_unify_array", "dev_unify_iter", "dev_unify_nest", "dev_util", "get_all_ivy_arrays_on_dev", "gpu_is_available", "num_cpu_cores", "num_gpus", "num_ivy_arrays_on_dev", "percent_used_mem_on_dev", "print_all_ivy_arrays_on_dev", "set_default_device", "set_split_factor", "split_factor", "split_func_call", "to_device", "total_mem_on_dev", "tpu_is_available", "unset_default_device", "used_mem_on_dev", "Elementwise", "abs", "acos", "acosh", "add", "asin", "asin array", "asin functional", "asinh", "atan", "atan2", "atanh", "bitwise_and", "bitwise_invert", "bitwise_left_shift", "bitwise_left_shift array", "bitwise_left_shift functional", "bitwise_or", "bitwise_or array", "bitwise_or functional", "bitwise_right_shift", "bitwise_xor", "bitwise_xor array", "bitwise_xor functional", "ceil", "cos", "cosh", "divide", "equal", "erf", "erf array", "erf container", "erf functional", "exp", "expm1", "floor", "floor_divide", "greater", "greater_equal", "isfinite", "isinf", "isnan", "less", "less_equal", "log", "log array", "log functional", "log10", "log1p", "log2", "log2 array", "log2 functional", "logaddexp", "logical_and", "logical_not", "logical_or", "logical_or array", "logical_or functional", "logical_xor", "maximum", "minimum", "multiply", "negative", "not_equal", "positive", "pow", "remainder", "round", "sign", "sin", "sin array", "sin container", "sin functional", "sinh", "sqrt", "square", "square array", "square functional", "subtract", "tan", "tanh", "trunc", "General", "all_equal", "arg_info", "arg_names", "array_equal", "arrays_equal", "assert_supports_inplace", "cache_fn", "clip_matrix_norm", "clip_vector_norm", "container_types", "copy_array", "cumprod", "cumsum", "current_backend_str", "default", "einops_rearrange", "einops_reduce", "einops_repeat", "exists", "floormod", "fourier_encode", "gather", "gather_nd", "get_all_arrays_in_memory", "get_min_base", "get_min_denominator", "get_num_dims", "get_referrers_recursive", "has_nans", "indices_where", "inplace_arrays_supported", "inplace_decrement", "inplace_increment", "inplace_update", "inplace_variables_supported", "is_array", "is_ivy_array", "is_ivy_container", "is_native_array", "match_kwargs", "multiprocessing", "num_arrays_in_memory", "one_hot", "print_all_arrays_in_memory", "queue_timeout", "scatter_flat", "scatter_nd", "set_min_base", "set_min_denominator", "set_queue_timeout", "set_tmp_dir", "shape", "shape_to_tuple", "stable_divide", "stable_pow", "supports_inplace", "tmp_dir", "to_list", "to_numpy", "to_scalar", "try_else_none", "unstack", "value_is_nan", "Gradients", "&lt;no title&gt;", "adam_step", "adam_update", "execute_with_gradients", "gradient_descent_update", "is_variable", "lamb_update", "lars_update", "optimizer_update", "set_with_grads", "stop_gradient", "unset_with_grads", "variable", "variable_data", "with_grads", "Layers", "conv1d", "conv1d_transpose", "conv2d", "conv2d_transpose", "conv3d", "conv3d_transpose", "depthwise_conv2d", "dropout", "linear", "lstm_update", "multi_head_attention", "scaled_dot_product_attention", "Linear algebra", "cholesky", "cross", "det", "diagonal", "eigh", "eigvalsh", "inv", "matmul", "matrix_norm", "matrix_power", "matrix_rank", "matrix_transpose", "outer", "pinv", "qr", "slogdet", "solve", "svd", "svdvals", "tensordot", "trace", "vecdot", "vector_norm", "vector_to_skew_symmetric_matrix", "Losses", "binary_cross_entropy", "cross_entropy", "cross_entropy array", "cross_entropy functional", "sparse_cross_entropy", "Manipulation", "clip", "clip functional", "static_clip container", "concat", "concat array", "concat functional", "constant_pad", "expand_dims", "flip", "permute_dims", "repeat", "reshape", "reshape array", "reshape functional", "roll", "split", "squeeze", "stack", "swapaxes", "tile", "zero_pad", "Meta", "fomaml_step", "maml_step", "reptile_step", "Nest", "all_nested_indices", "copy_nest", "index_nest", "insert_into_nest_at_index", "insert_into_nest_at_indices", "map", "map_nest_at_index", "map_nest_at_indices", "multi_index_nest", "nested_any", "nested_indices_where", "nested_map", "nested_multi_map", "prune_nest_at_index", "prune_nest_at_indices", "set_nest_at_index", "set_nest_at_indices", "Norms", "layer_norm", "Random", "multinomial", "randint", "random_normal", "random_uniform", "seed", "shuffle", "Searching", "argmax", "argmin", "nonzero", "where", "Set", "unique_all", "unique_counts", "unique_inverse", "unique_values", "Sorting", "argsort", "sort", "Statistical", "einsum", "max", "mean", "min", "prod", "std", "sum", "var", "Utility", "all", "all array", "all functional", "any", "Contents", "&lt;no title&gt;", "&lt;no title&gt;", "Inspection", "add_array_specs", "fn_array_spec", "Roadmap", "Activations", "GEGLU", "GELU", "Converters", "to_ivy_module", "Initializers", "&lt;no title&gt;", "FirstLayerSiren", "GlorotUniform", "&lt;no title&gt;", "Ones", "Siren", "&lt;no title&gt;", "Zeros", "Layers", "Conv1D", "Conv1DTranspose", "Conv2D", "Conv2DTranspose", "Conv3D", "Conv3DTranspose", "DepthwiseConv2D", "Dropout", "LSTM", "Linear", "MultiHeadAttention", "Module", "Module", "Norms", "LayerNorm", "Optimizers", "Adam", "LAMB", "LARS", "Optimizer", "SGD", "Sequential", "Sequential", "&lt;no title&gt;", "Verbosity", "cprint"], "terms": {"class": [0, 1, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 142, 148, 153, 154, 155, 156, 157, 158, 159, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 323, 324, 327, 328, 330, 334, 335, 336, 337, 339, 341, 342, 344, 345, 346, 356, 357, 358, 399, 418, 432, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 564, 567, 598, 604, 623, 628, 642, 714, 716, 726, 741, 744, 768, 775, 776, 777, 778, 779, 780, 782, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812], "ivi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 322, 323, 324, 325, 327, 329, 331, 332, 333, 335, 336, 337, 338, 339, 340, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 782, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815], "arrai": [0, 1, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 140, 155, 156, 157, 158, 159, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 321, 322, 323, 325, 326, 327, 328, 330, 331, 332, 333, 335, 336, 337, 338, 340, 341, 342, 344, 345, 346, 358, 359, 367, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 405, 406, 407, 408, 413, 415, 418, 420, 421, 423, 427, 432, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 463, 464, 466, 470, 472, 476, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 568, 569, 570, 572, 573, 575, 576, 577, 580, 581, 582, 583, 584, 585, 586, 587, 588, 591, 593, 594, 595, 596, 597, 598, 600, 601, 603, 606, 607, 608, 610, 611, 616, 620, 622, 623, 624, 626, 627, 628, 630, 631, 633, 634, 635, 636, 637, 639, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 716, 726, 727, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 771, 773, 789, 797, 800], "arraywithactiv": 0, "sourc": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 334, 335, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 772, 773, 775, 776, 777, 778, 779, 780, 782, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815], "base": [0, 1, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 153, 154, 156, 157, 158, 159, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 322, 330, 333, 335, 341, 357, 380, 390, 399, 432, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 482, 515, 526, 528, 529, 530, 531, 533, 547, 564, 589, 612, 619, 628, 746, 747, 748, 750, 754, 755, 775, 776, 777, 780, 782, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812], "abc": [0, 1, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 155, 156, 343, 432, 441, 447, 564, 583, 801, 802, 805, 809], "activ": [1, 134, 135, 154, 318, 319, 321, 322, 324, 326, 345, 370, 371, 372, 373, 374, 375, 376, 768, 776, 777], "support": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 327, 328, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 346, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 748, 749, 750, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 772, 773, 774, 776, 777, 779, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815], "framework": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 325, 329, 331, 332, 333, 334, 337, 339, 340, 343, 346, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 711, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 733, 735, 736, 737, 738, 739, 740, 742, 743, 744, 745, 747, 748, 749, 750, 752, 753, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 768, 772, 773, 774, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815], "array_method": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 487, 488, 496, 497, 499, 500, 503, 504, 511, 512, 526, 527, 531, 532, 537, 538, 551, 552, 557, 558, 684, 685, 692, 693, 700, 701, 764, 765], "ab": [2, 104, 105, 160, 288, 289, 330, 333, 482, 547, 657, 680, 768], "self": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 334, 335, 341, 343, 344, 345, 346, 432, 487, 488, 496, 497, 499, 500, 503, 504, 511, 512, 513, 526, 527, 531, 532, 537, 538, 551, 552, 553, 557, 558, 684, 685, 692, 693, 700, 701, 764, 765, 768, 805, 809], "out": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 104, 105, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 150, 151, 152, 155, 156, 157, 158, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 251, 253, 254, 256, 257, 258, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 288, 289, 290, 291, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 341, 343, 344, 345, 346, 357, 369, 371, 372, 373, 374, 375, 376, 380, 381, 383, 384, 385, 387, 388, 393, 394, 395, 396, 397, 398, 399, 405, 407, 432, 477, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 572, 573, 575, 576, 577, 580, 581, 582, 584, 586, 587, 594, 607, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 705, 706, 707, 708, 709, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 745, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 789, 797], "none": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 104, 105, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 136, 138, 141, 148, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 326, 328, 331, 335, 336, 337, 338, 339, 341, 343, 345, 346, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 405, 407, 410, 411, 412, 415, 418, 432, 441, 442, 450, 451, 474, 475, 476, 477, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 572, 573, 575, 576, 577, 579, 580, 581, 582, 583, 584, 586, 587, 592, 594, 595, 599, 605, 607, 610, 611, 612, 613, 618, 619, 625, 628, 631, 633, 635, 636, 637, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 720, 725, 726, 727, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 745, 746, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 778, 779, 780, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812], "instanc": [2, 3, 6, 8, 23, 24, 25, 72, 87, 88, 93, 94, 95, 96, 97, 100, 101, 104, 105, 106, 107, 118, 119, 134, 135, 155, 156, 157, 158, 160, 165, 167, 184, 185, 186, 239, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 318, 319, 323, 327, 328, 330, 331, 334, 336, 338, 339, 344, 345, 346, 359, 367, 369, 371, 372, 373, 374, 375, 376, 380, 391, 399, 408, 432, 441, 473, 482, 486, 487, 489, 494, 503, 505, 506, 508, 517, 520, 541, 542, 544, 549, 556, 557, 559, 561, 562, 564, 575, 586, 598, 622, 624, 644, 647, 650, 656, 657, 658, 659, 660, 682, 683, 688, 696, 697, 699, 703, 704, 707, 732, 733, 734, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 754, 755, 756, 763, 764, 766, 778, 779], "variant": [2, 3, 6, 8, 23, 24, 25, 72, 87, 88, 100, 101, 104, 105, 106, 107, 118, 119, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 327, 328, 689, 691], "thi": [2, 3, 6, 8, 23, 24, 25, 72, 87, 88, 100, 101, 104, 105, 106, 107, 118, 119, 150, 151, 152, 155, 156, 157, 158, 159, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 357, 358, 380, 381, 382, 391, 392, 399, 408, 432, 456, 460, 464, 471, 476, 481, 482, 483, 486, 487, 489, 494, 502, 503, 505, 506, 508, 516, 517, 536, 537, 539, 548, 549, 556, 557, 559, 561, 562, 564, 585, 586, 598, 609, 614, 628, 631, 633, 634, 635, 636, 637, 642, 644, 647, 653, 656, 657, 660, 666, 673, 688, 689, 691, 696, 697, 700, 702, 703, 706, 714, 720, 726, 727, 732, 733, 741, 742, 746, 747, 748, 750, 751, 752, 754, 756, 757, 760, 762, 763, 764, 766, 768, 774, 801, 802, 805, 806, 807, 808, 809, 810], "simpli": [2, 3, 6, 8, 23, 24, 25, 72, 87, 88, 100, 101, 104, 105, 106, 107, 118, 119, 155, 156, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 322, 327, 328, 330, 331, 334, 335, 337, 338, 339, 341, 345, 346, 482, 516, 689, 691], "wrap": [2, 3, 6, 8, 23, 24, 25, 72, 87, 88, 93, 100, 101, 104, 105, 106, 107, 118, 119, 135, 155, 156, 157, 158, 159, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 319, 325, 327, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 343, 346, 358, 359, 367, 564, 571, 628, 642, 689, 691], "function": [2, 3, 6, 8, 23, 24, 25, 72, 87, 88, 93, 100, 101, 104, 105, 106, 107, 118, 119, 134, 135, 136, 140, 141, 142, 150, 155, 156, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 318, 319, 322, 324, 325, 326, 327, 328, 329, 330, 332, 334, 338, 340, 342, 343, 344, 345, 356, 357, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 494, 495, 496, 499, 502, 503, 506, 507, 508, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 529, 530, 531, 534, 535, 536, 537, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 555, 556, 557, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 687, 688, 689, 691, 692, 695, 696, 697, 698, 699, 700, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 767, 768, 771, 773, 775, 776, 777, 805, 808, 810], "so": [2, 3, 6, 8, 23, 24, 25, 72, 87, 88, 93, 96, 97, 100, 101, 104, 105, 106, 107, 118, 119, 150, 151, 155, 156, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 321, 322, 326, 327, 328, 330, 333, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 358, 359, 367, 689, 691, 714, 715, 725, 768], "docstr": [2, 3, 6, 8, 23, 24, 25, 72, 87, 88, 100, 101, 104, 105, 106, 107, 118, 119, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 323, 324, 325, 326, 331, 335, 339, 380, 391, 399, 408, 482, 486, 487, 489, 494, 503, 505, 506, 508, 517, 549, 556, 557, 559, 561, 562, 657, 660, 688, 689, 691, 696, 697, 703, 746, 747, 748, 751, 752, 754, 756, 763, 764, 766], "also": [2, 3, 6, 8, 23, 24, 25, 72, 87, 88, 93, 94, 95, 96, 97, 100, 101, 104, 105, 106, 107, 118, 119, 150, 151, 155, 156, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 320, 321, 322, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 357, 358, 380, 391, 399, 408, 482, 486, 487, 489, 494, 503, 505, 506, 508, 517, 549, 556, 557, 559, 561, 562, 564, 586, 598, 628, 631, 644, 647, 653, 656, 657, 660, 688, 689, 691, 696, 697, 703, 710, 711, 712, 713, 714, 715, 716, 724, 725, 726, 732, 733, 746, 747, 748, 751, 752, 754, 756, 763, 764, 766, 789, 799], "appli": [2, 3, 6, 8, 23, 24, 25, 72, 87, 88, 93, 96, 97, 100, 101, 104, 105, 106, 107, 118, 119, 155, 156, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 321, 322, 323, 327, 328, 330, 331, 333, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 356, 358, 369, 370, 371, 372, 373, 374, 375, 376, 399, 423, 564, 580, 581, 582, 628, 635, 636, 644, 653, 655, 656, 657, 668, 671, 682, 683, 684, 686, 687, 688, 689, 691, 706, 710, 711, 712, 714, 720, 723, 726, 727, 732, 733, 768, 775, 776, 777, 803, 804], "minim": [2, 3, 6, 8, 23, 24, 25, 72, 87, 88, 100, 101, 104, 105, 106, 107, 118, 119, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 327, 338, 341, 689, 691], "chang": [2, 3, 6, 8, 23, 24, 25, 72, 87, 88, 100, 101, 104, 105, 106, 107, 118, 119, 152, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 321, 322, 323, 324, 327, 329, 330, 335, 341, 345, 358, 432, 657, 659, 688, 689, 691, 700, 702, 714, 716, 726, 768, 774], "return": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 100, 101, 104, 105, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 136, 140, 141, 148, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 431, 432, 441, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 720, 724, 725, 726, 727, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 771, 773, 778, 779, 789, 798, 799, 805, 809], "type": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 101, 104, 105, 114, 115, 116, 117, 118, 119, 120, 121, 128, 129, 130, 131, 132, 133, 134, 135, 136, 142, 148, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 285, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 318, 319, 321, 323, 325, 326, 327, 328, 333, 334, 335, 337, 338, 339, 341, 343, 344, 346, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 427, 431, 432, 448, 449, 450, 451, 452, 454, 464, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 591, 593, 594, 596, 597, 598, 600, 601, 602, 603, 607, 610, 611, 612, 613, 616, 618, 619, 620, 622, 623, 624, 626, 627, 628, 630, 631, 633, 634, 635, 636, 637, 639, 641, 644, 645, 647, 649, 650, 651, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 720, 724, 725, 726, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800], "aco": [2, 104, 105, 160, 288, 289, 482, 768], "acosh": [2, 104, 105, 160, 288, 289, 399, 416, 417, 482, 768], "add": [2, 104, 105, 134, 135, 155, 156, 157, 158, 160, 251, 252, 288, 289, 290, 291, 318, 319, 321, 322, 323, 325, 326, 327, 331, 332, 334, 335, 339, 341, 343, 358, 482, 732, 733, 768, 774, 803, 804], "x2": [2, 6, 8, 14, 17, 19, 20, 21, 22, 31, 33, 40, 41, 42, 47, 48, 53, 54, 56, 57, 58, 62, 64, 67, 69, 84, 104, 105, 106, 107, 114, 115, 155, 156, 160, 165, 167, 175, 178, 180, 181, 182, 183, 193, 195, 202, 204, 205, 212, 213, 218, 219, 221, 222, 223, 227, 229, 233, 236, 251, 252, 258, 262, 269, 273, 288, 289, 290, 291, 298, 299, 328, 339, 399, 427, 432, 470, 482, 486, 492, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 509, 510, 518, 519, 520, 524, 525, 534, 535, 537, 538, 539, 540, 541, 542, 543, 545, 547, 548, 560, 564, 565, 644, 649, 657, 659, 665, 670, 674, 677, 679, 741, 745], "exampl": [2, 6, 8, 23, 24, 25, 72, 87, 88, 100, 101, 104, 105, 106, 107, 118, 119, 134, 135, 136, 140, 141, 142, 148, 152, 157, 158, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 318, 319, 321, 322, 323, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 344, 345, 346, 357, 358, 369, 371, 372, 373, 374, 375, 376, 377, 378, 380, 387, 388, 391, 393, 394, 397, 398, 399, 405, 408, 416, 417, 432, 451, 452, 454, 466, 467, 468, 469, 470, 473, 475, 477, 479, 480, 482, 486, 487, 489, 493, 494, 495, 502, 503, 505, 506, 507, 508, 515, 517, 519, 520, 524, 541, 542, 544, 549, 556, 557, 559, 561, 562, 564, 565, 568, 569, 575, 576, 583, 586, 590, 601, 616, 622, 623, 624, 644, 645, 647, 649, 650, 651, 656, 657, 658, 659, 660, 661, 664, 668, 670, 675, 677, 678, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 694, 696, 697, 699, 700, 702, 703, 704, 705, 706, 707, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 754, 755, 760, 761, 763, 764, 766, 768], "x": [2, 6, 23, 24, 25, 72, 82, 87, 88, 93, 96, 97, 100, 101, 104, 105, 118, 119, 136, 140, 148, 155, 156, 157, 158, 160, 165, 184, 185, 186, 239, 249, 251, 253, 255, 256, 264, 266, 267, 270, 271, 276, 277, 284, 285, 288, 289, 302, 303, 306, 307, 312, 313, 324, 326, 327, 328, 331, 332, 335, 338, 339, 341, 343, 344, 345, 346, 369, 370, 371, 372, 373, 374, 375, 376, 380, 382, 384, 386, 388, 391, 392, 394, 395, 396, 397, 398, 399, 405, 407, 408, 413, 432, 451, 452, 453, 454, 457, 458, 466, 470, 475, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 503, 505, 506, 507, 508, 511, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 533, 536, 541, 542, 544, 546, 549, 550, 551, 554, 555, 556, 557, 559, 561, 562, 563, 564, 568, 569, 570, 572, 573, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 593, 594, 596, 597, 598, 600, 601, 602, 603, 607, 616, 620, 622, 623, 624, 626, 627, 628, 632, 634, 639, 641, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 680, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 714, 715, 720, 724, 725, 726, 732, 733, 734, 736, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 789, 800], "1": [2, 6, 8, 10, 23, 24, 25, 30, 46, 72, 77, 78, 87, 88, 100, 101, 104, 105, 106, 107, 116, 117, 118, 119, 120, 121, 128, 129, 136, 142, 148, 151, 152, 155, 156, 157, 158, 160, 165, 167, 169, 184, 185, 186, 192, 211, 235, 239, 244, 245, 251, 252, 253, 255, 256, 257, 264, 265, 266, 267, 268, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 324, 328, 331, 335, 338, 339, 340, 341, 343, 344, 345, 346, 358, 369, 371, 372, 373, 374, 376, 380, 381, 388, 389, 390, 391, 393, 394, 398, 399, 405, 408, 415, 432, 436, 439, 441, 446, 451, 452, 454, 456, 460, 464, 466, 469, 470, 477, 482, 484, 485, 486, 487, 489, 492, 494, 495, 502, 503, 505, 506, 507, 508, 515, 516, 517, 519, 520, 524, 526, 528, 529, 530, 531, 533, 541, 542, 544, 547, 549, 550, 551, 554, 556, 557, 559, 561, 562, 564, 565, 568, 569, 575, 576, 583, 586, 587, 601, 607, 610, 611, 616, 619, 622, 623, 624, 626, 644, 645, 646, 647, 648, 649, 650, 651, 652, 656, 657, 658, 659, 660, 661, 664, 668, 670, 674, 675, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 694, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 714, 726, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 753, 754, 755, 756, 760, 761, 762, 763, 764, 766, 767, 768, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812], "2": [2, 6, 8, 23, 24, 25, 72, 87, 88, 100, 101, 104, 105, 106, 107, 118, 119, 136, 140, 155, 156, 157, 158, 160, 165, 167, 184, 185, 186, 239, 251, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 321, 322, 324, 328, 332, 335, 339, 340, 341, 343, 344, 345, 346, 358, 369, 371, 372, 373, 374, 376, 379, 380, 387, 388, 391, 393, 394, 398, 399, 405, 408, 432, 451, 452, 454, 466, 468, 470, 477, 482, 486, 487, 489, 491, 492, 494, 495, 502, 503, 505, 506, 507, 508, 515, 517, 519, 520, 524, 531, 533, 541, 542, 544, 549, 556, 557, 559, 561, 562, 564, 565, 568, 569, 572, 573, 576, 583, 586, 601, 616, 622, 644, 647, 648, 649, 650, 651, 656, 657, 658, 659, 660, 661, 664, 665, 666, 668, 670, 671, 672, 675, 677, 678, 680, 682, 683, 687, 688, 689, 690, 691, 692, 694, 696, 697, 699, 700, 702, 703, 704, 705, 707, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 754, 755, 756, 763, 764, 766, 768], "3": [2, 6, 8, 23, 25, 100, 101, 104, 105, 106, 107, 118, 119, 157, 158, 160, 165, 167, 184, 185, 186, 239, 251, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 321, 324, 328, 332, 335, 341, 343, 344, 345, 346, 369, 371, 372, 373, 374, 379, 380, 388, 391, 394, 397, 398, 399, 408, 432, 451, 454, 470, 477, 482, 486, 487, 489, 494, 502, 503, 505, 506, 508, 515, 517, 519, 520, 524, 541, 542, 544, 549, 556, 557, 559, 561, 562, 564, 568, 569, 576, 583, 586, 616, 622, 624, 644, 645, 646, 647, 649, 650, 651, 656, 657, 658, 659, 660, 661, 664, 668, 670, 675, 677, 678, 681, 682, 683, 687, 688, 689, 690, 691, 692, 694, 696, 697, 699, 700, 702, 703, 704, 705, 707, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 754, 755, 756, 761, 763, 764, 766, 768], "y": [2, 6, 8, 24, 25, 72, 87, 88, 104, 105, 106, 107, 118, 119, 157, 158, 160, 165, 167, 185, 186, 239, 251, 252, 256, 264, 266, 270, 271, 276, 277, 288, 289, 290, 291, 302, 303, 306, 307, 326, 328, 332, 335, 341, 343, 369, 371, 372, 373, 374, 375, 376, 380, 387, 388, 391, 393, 394, 398, 399, 405, 432, 452, 466, 470, 475, 482, 486, 487, 489, 492, 494, 495, 502, 503, 505, 506, 507, 508, 515, 517, 520, 541, 542, 544, 549, 556, 557, 559, 561, 562, 564, 565, 568, 569, 575, 576, 583, 584, 586, 616, 622, 623, 624, 628, 632, 644, 650, 651, 653, 657, 658, 659, 660, 664, 670, 677, 678, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 694, 696, 697, 699, 700, 702, 703, 704, 707, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 748, 751, 752, 754, 755, 756, 760, 761, 763, 764, 766], "4": [2, 6, 25, 104, 105, 118, 119, 152, 153, 154, 155, 156, 157, 158, 159, 160, 165, 184, 185, 186, 239, 251, 255, 256, 264, 266, 270, 271, 276, 277, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 324, 328, 332, 335, 341, 343, 344, 345, 346, 369, 371, 372, 374, 380, 388, 391, 394, 398, 399, 408, 432, 454, 470, 482, 486, 487, 489, 492, 494, 503, 505, 506, 508, 517, 520, 541, 542, 544, 549, 556, 557, 559, 561, 562, 564, 569, 576, 585, 586, 622, 644, 647, 648, 649, 651, 654, 656, 657, 659, 660, 661, 664, 668, 670, 677, 678, 682, 687, 688, 689, 690, 691, 692, 694, 696, 697, 699, 700, 702, 703, 704, 707, 732, 733, 734, 735, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 754, 755, 756, 763, 764, 766, 768, 805, 806, 807, 808, 810], "5": [2, 6, 8, 24, 25, 104, 105, 106, 107, 118, 119, 157, 158, 160, 165, 184, 185, 186, 239, 251, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 302, 303, 306, 307, 322, 324, 328, 332, 339, 343, 344, 345, 369, 371, 372, 374, 380, 388, 391, 394, 397, 398, 399, 408, 432, 454, 470, 482, 486, 487, 489, 493, 494, 502, 503, 505, 506, 508, 517, 520, 541, 542, 544, 549, 556, 557, 559, 561, 562, 564, 569, 576, 586, 622, 644, 647, 649, 650, 656, 657, 658, 659, 660, 661, 664, 670, 677, 678, 682, 687, 688, 689, 690, 691, 692, 694, 696, 697, 699, 700, 702, 703, 704, 707, 732, 733, 734, 735, 736, 740, 741, 743, 744, 745, 746, 747, 748, 751, 752, 754, 755, 756, 763, 764, 766, 789, 800], "6": [2, 6, 24, 25, 104, 105, 118, 119, 157, 158, 160, 165, 185, 251, 264, 288, 289, 306, 307, 324, 328, 332, 335, 343, 344, 345, 369, 371, 372, 374, 380, 388, 432, 454, 470, 482, 486, 487, 489, 494, 495, 503, 505, 506, 508, 517, 520, 541, 542, 544, 549, 556, 557, 559, 561, 562, 564, 569, 576, 586, 622, 644, 647, 650, 651, 656, 657, 659, 660, 661, 670, 675, 677, 682, 683, 687, 688, 689, 690, 692, 694, 696, 697, 699, 700, 702, 703, 704, 707, 732, 733, 734, 735, 736, 741, 742, 745, 746, 747, 748, 754, 755, 756], "z": [2, 6, 104, 105, 157, 158, 160, 165, 251, 288, 289, 328, 332, 335, 341, 343, 432, 466, 482, 486, 494, 503, 505, 520, 541, 542, 564, 568, 569, 586, 616, 657, 659, 682, 683, 684, 686, 688, 689, 690, 741, 742, 754, 755, 756], "print": [2, 6, 8, 23, 24, 25, 72, 87, 88, 100, 101, 104, 105, 106, 107, 118, 119, 134, 135, 136, 140, 141, 142, 148, 155, 156, 157, 158, 159, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 318, 319, 321, 328, 335, 341, 343, 344, 345, 369, 371, 372, 373, 374, 375, 376, 380, 387, 388, 391, 393, 394, 397, 398, 399, 405, 408, 416, 417, 432, 452, 466, 467, 468, 469, 470, 472, 475, 479, 482, 486, 487, 489, 493, 494, 495, 502, 503, 505, 506, 507, 508, 515, 517, 519, 520, 524, 541, 542, 544, 549, 556, 557, 559, 561, 562, 564, 565, 568, 569, 575, 576, 583, 586, 590, 608, 616, 622, 623, 624, 644, 645, 647, 649, 650, 651, 656, 657, 658, 659, 660, 661, 664, 670, 675, 677, 678, 682, 683, 684, 686, 687, 688, 689, 690, 691, 696, 697, 699, 700, 702, 703, 704, 705, 707, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 754, 755, 756, 760, 761, 763, 764, 766, 768], "7": [2, 6, 25, 104, 105, 118, 119, 157, 158, 160, 165, 251, 264, 288, 289, 306, 307, 322, 324, 328, 331, 335, 338, 369, 371, 372, 432, 454, 482, 486, 494, 495, 503, 505, 506, 508, 515, 517, 520, 541, 542, 549, 556, 561, 562, 564, 569, 576, 586, 628, 630, 631, 635, 644, 650, 651, 656, 657, 659, 660, 661, 670, 677, 682, 683, 684, 686, 687, 688, 689, 690, 696, 697, 699, 704, 707, 732, 733, 734, 735, 736, 737, 738, 741, 745, 746, 747, 754, 755], "9": [2, 6, 25, 104, 105, 118, 119, 157, 158, 160, 164, 165, 209, 250, 251, 260, 264, 288, 289, 292, 293, 306, 307, 324, 328, 344, 345, 482, 486, 494, 495, 541, 542, 549, 556, 557, 559, 564, 586, 628, 630, 631, 635, 644, 647, 650, 651, 657, 659, 660, 661, 670, 675, 677, 688, 689, 690, 697, 699, 703, 704, 734, 735, 736, 741, 745, 746, 747, 754, 755, 805, 806, 807], "all": [2, 93, 94, 95, 96, 97, 132, 133, 134, 135, 150, 151, 152, 155, 156, 160, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 357, 358, 359, 367, 377, 378, 380, 381, 395, 396, 432, 441, 466, 472, 564, 565, 568, 569, 588, 608, 623, 644, 654, 657, 674, 677, 680, 688, 697, 703, 710, 711, 712, 713, 714, 715, 716, 725, 726, 727, 734, 735, 738, 763, 768, 771, 773], "axi": [2, 7, 9, 10, 26, 30, 36, 38, 59, 60, 61, 68, 70, 72, 77, 78, 81, 82, 83, 85, 91, 116, 117, 118, 119, 128, 129, 130, 131, 132, 133, 155, 156, 160, 166, 168, 169, 188, 192, 198, 200, 224, 225, 226, 234, 237, 239, 244, 245, 248, 249, 253, 257, 266, 267, 268, 272, 274, 280, 300, 301, 302, 303, 312, 313, 314, 315, 316, 317, 328, 331, 335, 336, 338, 339, 341, 343, 346, 357, 369, 374, 380, 389, 390, 432, 434, 437, 444, 457, 458, 459, 460, 461, 462, 463, 464, 476, 564, 576, 577, 586, 626, 657, 659, 661, 679, 680, 682, 684, 685, 686, 687, 688, 692, 693, 694, 695, 696, 697, 699, 703, 704, 705, 706, 707, 708, 709, 734, 740, 741, 742, 743, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767], "keepdim": [2, 7, 9, 59, 60, 61, 68, 83, 85, 91, 130, 131, 132, 133, 155, 156, 160, 166, 168, 224, 225, 226, 234, 272, 274, 280, 314, 315, 316, 317, 564, 626, 657, 666, 680, 741, 742, 743, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767], "fals": [2, 7, 8, 9, 10, 59, 60, 61, 68, 77, 83, 85, 91, 93, 94, 95, 96, 97, 106, 107, 128, 129, 130, 131, 132, 133, 136, 143, 144, 145, 146, 147, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 328, 335, 338, 344, 345, 346, 399, 405, 408, 413, 432, 451, 452, 463, 467, 468, 471, 476, 479, 481, 482, 494, 511, 513, 519, 520, 521, 522, 523, 524, 536, 537, 539, 551, 553, 564, 565, 568, 569, 576, 579, 583, 585, 591, 598, 600, 601, 603, 604, 616, 626, 628, 631, 632, 633, 634, 635, 636, 637, 657, 658, 666, 675, 680, 688, 689, 691, 704, 710, 711, 712, 713, 714, 715, 716, 720, 724, 725, 726, 727, 734, 735, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 778, 779, 801, 802, 805, 806, 807, 808, 809, 810], "all_equ": [2, 106, 107, 160, 252, 290, 291, 564], "equality_matrix": [2, 8, 106, 107, 160, 167, 252, 290, 291, 564, 565], "contain": [2, 8, 93, 96, 97, 106, 107, 150, 153, 154, 155, 156, 159, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 327, 328, 330, 331, 336, 338, 339, 340, 341, 342, 345, 346, 358, 369, 372, 373, 375, 380, 381, 384, 386, 393, 395, 396, 397, 399, 408, 432, 453, 454, 457, 466, 470, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 569, 572, 573, 575, 576, 583, 586, 593, 602, 622, 623, 624, 644, 647, 650, 651, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 686, 687, 688, 689, 690, 696, 697, 698, 699, 703, 704, 707, 710, 711, 712, 713, 714, 727, 732, 733, 734, 735, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 805, 809, 811, 812], "With": [2, 8, 106, 107, 151, 152, 155, 156, 157, 158, 160, 167, 251, 252, 256, 264, 266, 270, 271, 288, 289, 290, 291, 302, 303, 306, 307, 321, 328, 330, 341, 369, 371, 372, 373, 374, 375, 376, 380, 391, 399, 408, 432, 454, 470, 482, 486, 487, 489, 494, 503, 505, 506, 508, 517, 520, 541, 542, 544, 549, 556, 557, 559, 561, 562, 564, 565, 569, 575, 576, 583, 586, 622, 623, 624, 644, 647, 650, 651, 656, 657, 658, 659, 660, 661, 666, 677, 682, 683, 687, 688, 689, 690, 691, 696, 697, 699, 703, 704, 707, 732, 733, 734, 735, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 754, 755, 763, 764, 766], "x1": [2, 8, 106, 107, 160, 167, 251, 252, 258, 262, 269, 288, 289, 290, 291, 328, 339, 399, 427, 432, 470, 482, 486, 492, 494, 496, 498, 499, 501, 502, 503, 505, 509, 510, 518, 519, 520, 524, 525, 534, 535, 537, 539, 540, 541, 542, 543, 545, 547, 548, 560, 564, 565, 568, 644, 649, 657, 659, 665, 670, 674, 677, 679, 741, 745], "0": [2, 8, 24, 25, 26, 27, 36, 46, 72, 82, 83, 87, 88, 91, 104, 105, 106, 107, 118, 119, 120, 121, 130, 131, 136, 140, 153, 154, 155, 156, 157, 158, 159, 160, 164, 167, 184, 185, 186, 188, 189, 198, 209, 210, 211, 235, 239, 249, 250, 251, 252, 255, 256, 260, 261, 264, 265, 266, 270, 271, 272, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 322, 326, 327, 328, 341, 343, 344, 345, 346, 369, 371, 372, 373, 374, 375, 376, 380, 381, 385, 389, 390, 394, 395, 396, 397, 398, 399, 405, 408, 415, 432, 434, 437, 441, 444, 448, 451, 452, 454, 457, 458, 459, 460, 461, 462, 463, 464, 466, 470, 473, 475, 476, 480, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 496, 498, 502, 503, 505, 506, 507, 508, 515, 516, 517, 520, 526, 528, 529, 531, 533, 541, 542, 543, 544, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 561, 562, 563, 564, 565, 568, 569, 572, 573, 575, 576, 577, 583, 586, 587, 592, 601, 607, 610, 611, 616, 622, 623, 624, 628, 630, 631, 635, 636, 644, 645, 647, 649, 650, 651, 656, 657, 658, 659, 660, 661, 664, 675, 677, 678, 680, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 703, 704, 705, 706, 707, 714, 726, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 754, 755, 756, 757, 760, 761, 762, 763, 764, 766, 768, 780, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 811, 812], "mix": [2, 8, 106, 107, 157, 158, 160, 325, 328, 330, 341, 399, 423, 432, 470, 482, 486, 494, 503, 505, 520, 541, 542, 564, 575, 583, 586, 622, 623, 624, 644, 647, 650, 651, 656, 657, 677, 682, 683, 687, 688, 689, 690, 732, 733, 741, 745, 754, 755, 757], "nativearrai": [2, 8, 93, 96, 97, 106, 107, 326, 328, 331, 334, 335, 338, 339, 341, 343, 346, 359, 367, 369, 371, 372, 373, 374, 375, 376, 380, 381, 382, 384, 388, 389, 390, 391, 392, 394, 395, 396, 398, 399, 405, 406, 407, 408, 413, 415, 418, 420, 421, 423, 427, 432, 451, 452, 454, 470, 476, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 568, 569, 572, 573, 575, 576, 577, 580, 581, 582, 584, 585, 586, 587, 591, 593, 594, 596, 597, 598, 607, 610, 611, 616, 622, 623, 624, 626, 627, 628, 630, 631, 633, 635, 636, 637, 639, 641, 644, 645, 647, 649, 650, 651, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 714, 716, 726, 732, 733, 734, 735, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 766, 767], "native_arrai": [2, 8, 106, 107, 136, 142, 148, 157, 158, 160, 167, 252, 290, 291, 369, 371, 372, 373, 374, 375, 376, 380, 391, 399, 408, 432, 454, 470, 482, 487, 489, 494, 503, 505, 506, 517, 520, 541, 542, 544, 556, 557, 559, 562, 564, 565, 569, 575, 576, 583, 586, 622, 623, 624, 644, 647, 650, 651, 656, 657, 659, 660, 661, 677, 682, 683, 687, 688, 689, 690, 696, 697, 699, 704, 707, 732, 733, 734, 735, 741, 742, 743, 744, 745, 746, 747, 748, 754, 755, 756, 763, 764, 766], "true": [2, 8, 10, 23, 77, 100, 101, 106, 107, 128, 129, 134, 135, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 328, 330, 331, 335, 336, 338, 341, 343, 344, 345, 346, 369, 370, 377, 378, 380, 389, 399, 405, 408, 432, 451, 468, 472, 473, 482, 494, 503, 505, 511, 513, 519, 520, 521, 522, 523, 524, 536, 537, 539, 551, 553, 564, 565, 568, 569, 570, 571, 576, 583, 585, 593, 594, 601, 616, 622, 624, 627, 628, 631, 633, 634, 635, 636, 637, 639, 644, 652, 657, 658, 666, 675, 680, 682, 683, 684, 686, 687, 688, 689, 691, 704, 710, 711, 712, 713, 714, 715, 724, 725, 727, 734, 735, 741, 742, 743, 745, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 789, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810], "ani": [2, 93, 94, 95, 132, 133, 134, 135, 136, 140, 148, 150, 151, 152, 155, 156, 160, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 357, 358, 377, 378, 380, 382, 392, 399, 408, 432, 477, 482, 486, 487, 489, 506, 510, 517, 520, 525, 556, 557, 559, 561, 564, 565, 579, 580, 581, 582, 583, 586, 593, 600, 601, 602, 603, 618, 619, 628, 632, 644, 647, 656, 688, 703, 710, 711, 712, 713, 714, 720, 724, 732, 733, 734, 738, 754, 756, 763, 764, 766, 768], "argsort": [2, 128, 129, 160, 312, 313, 751], "descend": [2, 10, 77, 128, 129, 160, 169, 244, 253, 267, 312, 313, 657, 675, 676, 751, 752, 753], "stabl": [2, 10, 77, 128, 129, 160, 169, 244, 253, 267, 312, 313, 321, 341, 358, 564, 589, 590, 612, 613, 618, 619, 751, 752, 753], "asin": [2, 104, 105, 160, 288, 289, 482, 768], "asinh": [2, 104, 105, 160, 288, 289, 482, 768], "atan": [2, 104, 105, 160, 288, 289, 482, 768], "atan2": [2, 104, 105, 160, 288, 289, 482, 768], "atanh": [2, 104, 105, 160, 288, 289, 482, 768], "binary_cross_entropi": [2, 116, 117, 160, 300, 301, 682], "pred": [2, 16, 30, 78, 116, 117, 160, 177, 192, 245, 254, 257, 268, 300, 301, 331, 335, 338, 682, 683, 684, 685, 686, 687], "epsilon": [2, 16, 30, 46, 78, 116, 117, 120, 121, 160, 164, 177, 192, 209, 211, 245, 250, 254, 257, 260, 268, 292, 293, 300, 301, 304, 305, 331, 335, 338, 345, 628, 630, 631, 635, 657, 668, 671, 682, 683, 684, 685, 686, 687, 732, 733, 803, 804, 805, 806, 807], "1e": [2, 16, 30, 46, 78, 116, 117, 120, 121, 160, 164, 177, 192, 209, 211, 245, 250, 254, 257, 260, 268, 292, 293, 300, 301, 304, 305, 331, 335, 338, 345, 346, 564, 590, 628, 630, 631, 635, 657, 675, 682, 683, 684, 685, 686, 687, 732, 733, 768, 805, 806, 807, 808, 810], "07": [2, 16, 30, 78, 116, 117, 160, 164, 177, 192, 209, 245, 250, 254, 257, 260, 268, 292, 293, 300, 301, 345, 628, 630, 631, 635, 682, 683, 684, 685, 686, 687, 805, 806, 807], "bitwise_and": [2, 104, 105, 160, 288, 289, 482], "bitwise_invert": [2, 104, 105, 160, 288, 289, 482], "bitwise_left_shift": [2, 104, 105, 160, 288, 289, 482], "bitwise_or": [2, 104, 105, 160, 288, 289, 482], "bitwise_right_shift": [2, 104, 105, 160, 288, 289, 482], "bitwise_xor": [2, 104, 105, 160, 288, 289, 482], "can_cast": [2, 100, 101, 160, 255, 284, 285, 331, 336, 399], "dtype": [2, 23, 68, 85, 100, 101, 130, 131, 155, 156, 160, 184, 234, 255, 274, 284, 285, 314, 315, 326, 328, 331, 336, 337, 343, 380, 381, 382, 383, 384, 385, 387, 388, 389, 392, 393, 394, 397, 398, 399, 403, 404, 405, 406, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 431, 432, 472, 482, 502, 564, 568, 569, 607, 623, 644, 652, 688, 696, 732, 733, 734, 738, 741, 742, 743, 751, 753, 754, 759, 760, 761, 763, 764, 766, 768, 780, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 811, 812], "float32": [2, 23, 100, 101, 160, 184, 255, 284, 285, 328, 336, 399, 403, 404, 408, 416, 732, 733], "float64": [2, 23, 100, 101, 336, 399, 405, 408, 416], "bool": [2, 23, 93, 94, 95, 96, 97, 100, 101, 155, 156, 318, 319, 328, 335, 336, 338, 346, 377, 378, 380, 387, 399, 405, 408, 410, 411, 412, 413, 416, 419, 420, 421, 431, 432, 451, 452, 467, 476, 479, 482, 494, 495, 499, 501, 503, 505, 510, 519, 520, 521, 522, 523, 524, 525, 535, 536, 537, 539, 545, 564, 565, 568, 569, 576, 579, 583, 585, 591, 593, 598, 600, 601, 602, 603, 616, 626, 627, 628, 639, 657, 658, 666, 675, 680, 688, 704, 710, 711, 712, 713, 714, 715, 716, 720, 724, 725, 726, 734, 735, 741, 742, 743, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767], "ceil": [2, 104, 105, 160, 288, 289, 380, 381, 482, 768], "clip": [2, 118, 119, 155, 156, 160, 256, 302, 303, 331, 335, 338, 341, 344, 346, 482, 541, 542, 564, 572, 573, 688, 691, 768], "x_min": [2, 25, 118, 119, 155, 156, 160, 186, 256, 302, 303, 341, 346, 688, 689, 690, 691], "x_max": [2, 25, 118, 119, 155, 156, 160, 186, 256, 302, 303, 341, 346, 688, 689, 690, 691], "roll": [2, 25, 118, 119, 160, 266, 302, 303, 335, 339, 688], "8": [2, 25, 118, 119, 157, 158, 160, 251, 264, 288, 289, 306, 307, 321, 324, 328, 335, 340, 344, 369, 373, 432, 454, 482, 486, 494, 506, 508, 520, 541, 542, 549, 556, 557, 559, 562, 564, 569, 586, 644, 651, 657, 659, 660, 661, 670, 677, 682, 683, 688, 689, 690, 697, 699, 704, 734, 735, 736, 741, 745, 746, 747, 754, 755, 768, 789, 800], "concat": [2, 118, 119, 155, 156, 160, 302, 303, 432, 461, 462, 463, 464, 476, 564, 585, 688, 768], "xs": [2, 26, 118, 119, 160, 188, 302, 303, 335, 432, 455, 459, 461, 462, 463, 564, 565, 569, 628, 632, 688, 692, 693, 694], "constant_pad": [2, 118, 119, 160, 302, 303, 688], "pad_width": [2, 27, 92, 118, 119, 160, 189, 281, 302, 303, 688, 695, 709], "valu": [2, 27, 118, 119, 155, 156, 157, 158, 159, 160, 189, 281, 302, 303, 322, 328, 330, 331, 335, 336, 337, 338, 339, 341, 343, 346, 358, 380, 381, 385, 387, 388, 389, 390, 399, 405, 410, 411, 412, 432, 444, 475, 476, 482, 483, 484, 486, 487, 489, 491, 506, 510, 511, 514, 517, 518, 519, 520, 524, 525, 541, 542, 543, 545, 546, 547, 549, 562, 563, 564, 572, 573, 574, 579, 585, 586, 587, 592, 595, 599, 609, 610, 611, 612, 613, 614, 627, 628, 630, 631, 632, 635, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 654, 655, 656, 657, 668, 671, 672, 673, 674, 675, 676, 680, 688, 689, 690, 695, 699, 700, 702, 709, 710, 711, 712, 714, 718, 719, 720, 721, 722, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 789, 790, 791, 792, 793, 794, 795, 796, 800, 801, 802, 803, 804, 805, 806, 807, 809], "co": [2, 104, 105, 151, 160, 288, 289, 341, 357, 482, 564, 585, 768], "cosh": [2, 104, 105, 160, 288, 289, 482, 768], "cross_entropi": [2, 116, 117, 160, 300, 301, 331, 335, 338, 682, 687], "divid": [2, 104, 105, 155, 156, 160, 288, 289, 328, 334, 482, 518, 564, 618, 688, 704], "einsum": [2, 130, 131, 160, 314, 315, 754], "equat": [2, 32, 130, 131, 160, 194, 314, 315, 657, 674, 754, 755], "equal": [2, 104, 105, 155, 156, 160, 288, 289, 328, 335, 336, 380, 385, 387, 388, 399, 405, 482, 496, 498, 502, 521, 522, 547, 549, 564, 565, 568, 569, 657, 661, 668, 671, 688, 689, 690, 695, 704, 709, 734, 738, 746, 747, 748, 750, 751, 752, 753, 754, 757, 760, 761, 762], "erf": [2, 104, 105, 160, 288, 289, 482], "exp": [2, 104, 105, 160, 288, 289, 482, 516, 534, 768], "expand_dim": [2, 118, 119, 160, 302, 303, 341, 344, 688, 768], "expm1": [2, 104, 105, 160, 288, 289, 482], "flip": [2, 118, 119, 160, 302, 303, 343, 344, 346, 482, 495, 688, 699, 768], "floor": [2, 104, 105, 160, 288, 289, 482, 502, 564, 584, 768], "floor_divid": [2, 104, 105, 160, 288, 289, 482], "greater": [2, 104, 105, 155, 156, 160, 288, 289, 482, 484, 487, 489, 492, 496, 498, 502, 517, 518, 547, 548, 550, 563, 657, 659, 688, 705, 734, 738], "greater_equ": [2, 104, 105, 160, 288, 289, 482], "isfinit": [2, 104, 105, 160, 288, 289, 482], "isinf": [2, 104, 105, 160, 288, 289, 482], "isnan": [2, 104, 105, 160, 288, 289, 482], "layer_norm": [2, 120, 121, 160, 304, 305, 732], "normalized_idx": [2, 46, 120, 121, 160, 211, 304, 305, 732, 733], "05": [2, 46, 120, 121, 160, 211, 304, 305, 432, 732, 733], "scale": [2, 46, 120, 121, 160, 211, 304, 305, 335, 432, 474, 475, 628, 636, 644, 652, 655, 656, 732, 733, 789, 797, 800, 805, 808], "offset": [2, 46, 120, 121, 160, 211, 304, 305, 657, 661, 678, 732, 733], "new_std": [2, 46, 120, 121, 160, 211, 304, 305, 732, 733, 803, 804], "less": [2, 104, 105, 151, 155, 156, 160, 288, 289, 322, 328, 335, 339, 340, 341, 482, 484, 485, 487, 489, 492, 506, 526, 528, 529, 531, 533, 547, 548, 550, 556, 657, 668, 671, 680, 734, 738, 754, 762], "less_equ": [2, 104, 105, 160, 288, 289, 482], "log": [2, 104, 105, 160, 288, 289, 321, 322, 331, 335, 338, 341, 344, 380, 390, 482, 530, 534, 657, 673, 768], "log10": [2, 104, 105, 160, 288, 289, 482], "log1p": [2, 104, 105, 160, 288, 289, 482], "log2": [2, 104, 105, 160, 288, 289, 482], "logaddexp": [2, 104, 105, 160, 288, 289, 482], "logical_and": [2, 104, 105, 160, 288, 289, 482, 768], "logical_not": [2, 104, 105, 160, 288, 289, 482, 768], "logical_or": [2, 104, 105, 160, 288, 289, 482, 768], "logical_xor": [2, 104, 105, 160, 288, 289, 482], "matmul": [2, 114, 115, 160, 298, 299, 326, 332, 341, 657, 675, 768], "max": [2, 130, 131, 155, 156, 160, 314, 315, 399, 415, 418, 482, 541, 564, 572, 573, 581, 610, 611, 657, 668, 671, 754, 805, 807], "mean": [2, 130, 131, 155, 156, 160, 314, 315, 318, 319, 321, 322, 325, 328, 331, 335, 336, 337, 338, 341, 343, 344, 345, 346, 357, 358, 432, 461, 462, 463, 464, 476, 564, 581, 710, 711, 712, 713, 714, 720, 734, 737, 746, 747, 754, 768, 780], "min": [2, 130, 131, 155, 156, 160, 314, 315, 399, 415, 418, 482, 542, 564, 581, 610, 611, 618, 657, 672, 675, 676, 680, 754], "multipli": [2, 104, 105, 160, 288, 289, 328, 332, 334, 482, 564, 576], "neg": [2, 104, 105, 160, 288, 289, 331, 335, 338, 369, 371, 380, 381, 385, 482, 521, 522, 543, 547, 548, 657, 675, 679, 680, 688, 697, 703, 763, 764, 766, 767], "not_equ": [2, 104, 105, 160, 288, 289, 482], "permute_dim": [2, 118, 119, 160, 302, 303, 688], "ax": [2, 65, 118, 119, 155, 156, 160, 231, 302, 303, 326, 328, 336, 343, 432, 476, 564, 576, 657, 666, 674, 677, 680, 688, 695, 697, 698, 703, 705, 707, 709, 741, 742, 743, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767], "posit": [2, 93, 94, 95, 104, 105, 160, 288, 289, 339, 344, 357, 379, 380, 385, 399, 415, 432, 456, 460, 464, 482, 483, 521, 522, 543, 548, 564, 585, 657, 658, 688, 696, 703, 734, 739, 741, 744, 763, 764, 766, 767, 778, 779], "pow": [2, 104, 105, 160, 288, 289, 482], "prod": [2, 130, 131, 155, 156, 160, 314, 315, 328, 336, 564, 581, 754], "remaind": [2, 104, 105, 155, 156, 160, 288, 289, 482, 564, 584, 688, 704], "repeat": [2, 118, 119, 155, 156, 160, 302, 303, 322, 327, 328, 332, 334, 335, 564, 582, 688, 708], "reshap": [2, 118, 119, 155, 156, 160, 302, 303, 338, 341, 343, 346, 688, 768], "shape": [2, 71, 118, 119, 155, 156, 160, 238, 264, 265, 302, 303, 306, 307, 322, 326, 327, 328, 336, 337, 338, 339, 341, 343, 344, 345, 346, 369, 372, 380, 383, 384, 387, 388, 391, 393, 394, 395, 396, 397, 398, 399, 405, 406, 407, 432, 444, 472, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 515, 516, 517, 520, 521, 522, 523, 524, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 543, 544, 545, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 564, 573, 584, 587, 591, 607, 610, 611, 617, 644, 646, 647, 648, 650, 651, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 674, 675, 676, 678, 679, 682, 683, 684, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 734, 736, 737, 738, 741, 742, 744, 751, 752, 753, 754, 755, 763, 764, 766, 767, 768, 789, 791, 792, 793, 794, 795, 796, 803, 804], "shift": [2, 72, 118, 119, 160, 239, 266, 302, 303, 328, 339, 482, 496, 498, 502, 688, 703], "round": [2, 104, 105, 150, 151, 152, 160, 288, 289, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 357, 482, 486, 506, 517, 518, 543, 556, 563, 768], "sign": [2, 104, 105, 151, 160, 288, 289, 321, 342, 346, 380, 381, 482, 483, 486, 492, 502, 543, 548, 657, 673, 746, 747, 748, 750, 754, 759, 761], "sin": [2, 104, 105, 160, 288, 289, 334, 341, 482, 564, 585, 768], "sinh": [2, 104, 105, 160, 288, 289, 482, 768], "sort": [2, 129, 155, 156, 157, 158, 159, 160, 313, 326, 657, 662, 675, 676, 752], "sparse_cross_entropi": [2, 116, 117, 160, 300, 301, 682], "sqrt": [2, 104, 105, 160, 288, 289, 482, 657, 680], "squar": [2, 104, 105, 160, 288, 289, 482, 556, 644, 647, 657, 658, 660, 662, 663, 664, 667, 673, 674, 675], "squeez": [2, 118, 119, 160, 302, 303, 688, 768], "stack": [2, 118, 119, 155, 156, 160, 302, 303, 341, 380, 395, 396, 657, 660, 661, 662, 663, 664, 665, 667, 668, 669, 671, 672, 675, 676, 678, 688, 714, 715, 724, 725, 768, 789, 798], "std": [2, 130, 131, 160, 314, 315, 328, 734, 737, 746, 747, 754], "correct": [2, 83, 91, 130, 131, 160, 272, 280, 314, 315, 322, 323, 325, 331, 335, 336, 337, 339, 399, 427, 688, 689, 690, 754, 760, 762, 768], "subtract": [2, 104, 105, 160, 288, 289, 328, 334, 482], "sum": [2, 130, 131, 155, 156, 160, 314, 315, 331, 335, 336, 338, 341, 432, 461, 462, 463, 464, 476, 482, 486, 534, 564, 577, 581, 610, 611, 644, 656, 657, 675, 678, 680, 754, 755, 760], "swapax": [2, 118, 119, 160, 302, 303, 688], "axis0": [2, 86, 118, 119, 160, 275, 302, 303, 688, 707], "axis1": [2, 86, 118, 119, 160, 275, 302, 303, 657, 661, 688, 707], "tan": [2, 104, 105, 160, 270, 288, 289, 327, 331, 335, 338, 339, 341, 482, 487, 489, 746, 747, 748, 751, 752, 768], "56": [2, 87, 104, 105, 160, 270, 276, 288, 289, 328, 482, 556, 561, 657, 670, 754, 755], "19": [2, 87, 104, 105, 160, 270, 276, 288, 289, 328, 482, 503, 505, 561, 657, 661], "tanh": [2, 104, 105, 160, 271, 288, 289, 341, 369, 482, 768], "76": [2, 88, 104, 105, 160, 271, 277, 288, 289, 482, 508, 562, 657, 677, 754, 755], "96": [2, 88, 104, 105, 160, 271, 277, 288, 289, 482, 561, 562, 657, 670, 754, 755], "tile": [2, 118, 119, 160, 302, 303, 688, 768], "rep": [2, 89, 118, 119, 160, 278, 302, 303, 688, 708], "trunc": [2, 104, 105, 160, 288, 289, 482], "var": [2, 130, 131, 160, 314, 315, 318, 319, 328, 341, 710, 711, 712, 754], "zero_pad": [2, 118, 119, 160, 302, 303, 688, 768], "method": [3, 6, 8, 23, 24, 25, 72, 87, 88, 100, 101, 104, 105, 106, 107, 118, 119, 134, 135, 155, 156, 157, 158, 159, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 318, 319, 323, 326, 327, 328, 330, 331, 334, 339, 341, 342, 345, 346, 358, 369, 371, 372, 373, 374, 375, 376, 380, 386, 391, 482, 487, 489, 494, 503, 505, 506, 508, 517, 520, 541, 542, 544, 549, 556, 557, 559, 562, 564, 574, 575, 586, 610, 611, 622, 624, 628, 635, 636, 644, 650, 656, 657, 658, 659, 660, 682, 683, 688, 689, 691, 696, 697, 699, 704, 707, 714, 715, 725, 726, 727, 732, 733, 734, 737, 738, 741, 742, 743, 744, 745, 746, 747, 748, 751, 752, 754, 755, 756, 763, 764, 766, 768, 789, 800, 801, 802], "collect": [93, 155, 156, 330, 357, 369, 377, 432, 564, 628, 644, 682, 714, 727, 732, 734, 775, 789, 803, 805], "accept": [93, 321, 322, 327, 328, 330, 331, 334, 335, 337, 338, 339, 343, 380, 391, 399, 408, 482, 486, 487, 489, 494, 503, 505, 506, 508, 517, 536, 537, 539, 548, 549, 556, 557, 559, 561, 562, 564, 586, 644, 647, 656, 657, 660, 688, 696, 697, 703, 732, 733, 746, 747, 748, 751, 752, 754, 756, 757, 763, 764, 766, 768], "args_to_ivi": 93, "arg": [93, 94, 95, 136, 140, 155, 156, 324, 341, 343, 345, 432, 441, 456, 460, 464, 476, 564, 611, 778, 779, 801, 802], "include_deriv": [93, 94, 95, 96, 97, 714, 716, 726], "kwarg": [93, 94, 95, 136, 140, 153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 341, 343, 345, 432, 441, 456, 460, 464, 564, 604, 778, 779, 801, 802], "keyword": [93, 94, 95, 155, 156, 157, 158, 159, 326, 336, 337, 338, 339, 344, 380, 391, 432, 441, 442, 456, 460, 464, 564, 567, 604, 714, 720, 754, 761, 801, 802], "variabl": [93, 94, 95, 96, 97, 155, 156, 157, 158, 327, 332, 335, 336, 338, 339, 344, 345, 346, 358, 564, 570, 596, 597, 598, 599, 600, 601, 603, 620, 628, 631, 632, 633, 634, 635, 636, 637, 639, 642, 644, 655, 657, 674, 710, 711, 712, 713, 732, 733, 768, 778, 779, 780, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812], "form": [93, 94, 95, 96, 97, 151, 155, 156, 320, 331, 345, 346, 380, 382, 392, 395, 396, 564, 566, 628, 631, 633, 635, 636, 637, 644, 657, 658, 660, 661, 662, 663, 664, 668, 669, 671, 672, 674, 675, 676, 678, 714, 716, 726], "nest": [93, 94, 95, 96, 97, 155, 156, 157, 158, 159, 326, 331, 334, 335, 343, 344, 345, 358, 432, 456, 460, 464, 564, 622, 710, 711, 712, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 801, 802, 805, 806, 807, 808, 809, 810], "otherwis": [93, 94, 95, 96, 97, 136, 148, 155, 156, 334, 336, 337, 339, 341, 343, 380, 381, 399, 405, 408, 410, 411, 412, 432, 451, 482, 521, 522, 523, 564, 570, 625, 628, 634, 639, 657, 658, 660, 679, 680, 710, 711, 712, 714, 727, 741, 742, 743, 745, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767], "argument": [93, 94, 95, 96, 97, 136, 140, 141, 150, 155, 156, 157, 158, 159, 323, 325, 326, 327, 328, 330, 331, 332, 334, 335, 341, 343, 344, 377, 378, 380, 381, 399, 408, 423, 432, 441, 442, 456, 460, 464, 482, 486, 487, 489, 506, 517, 556, 557, 559, 561, 564, 566, 567, 571, 579, 586, 604, 611, 644, 647, 656, 688, 703, 714, 720, 732, 733, 754, 756, 761, 763, 764, 766, 771, 773, 778, 779, 801, 802], "ar": [93, 94, 95, 150, 151, 152, 155, 156, 157, 158, 159, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 357, 358, 359, 367, 380, 381, 432, 441, 442, 466, 470, 472, 476, 482, 507, 536, 537, 539, 549, 551, 554, 561, 564, 565, 568, 569, 570, 588, 594, 595, 599, 606, 608, 620, 644, 653, 657, 659, 665, 666, 668, 671, 675, 676, 679, 688, 689, 690, 697, 703, 714, 716, 720, 726, 734, 737, 738, 741, 742, 743, 744, 746, 747, 768, 811, 812], "unchang": [93, 94, 95, 96, 97], "paramet": [93, 94, 95, 96, 97, 134, 135, 136, 140, 141, 155, 156, 157, 158, 159, 318, 319, 326, 327, 330, 343, 344, 357, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 441, 442, 445, 446, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 771, 773, 778, 779, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812], "iter": [93, 94, 95, 96, 97, 134, 135, 152, 155, 156, 157, 158, 159, 318, 319, 335, 341, 344, 377, 378, 432, 454, 455, 457, 458, 459, 460, 463, 476, 564, 565, 611, 616, 688, 695, 699, 704, 708, 709, 714, 715, 716, 720, 724, 725, 726], "The": [93, 94, 95, 96, 97, 136, 140, 141, 149, 150, 152, 155, 156, 157, 158, 159, 320, 321, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 345, 346, 357, 369, 370, 371, 374, 376, 377, 378, 380, 381, 386, 390, 391, 395, 396, 399, 403, 404, 405, 409, 414, 416, 417, 419, 422, 427, 431, 432, 441, 442, 448, 449, 450, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 470, 471, 472, 473, 474, 475, 476, 478, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 533, 534, 535, 536, 537, 539, 540, 543, 545, 547, 548, 549, 550, 551, 554, 555, 556, 561, 562, 563, 564, 566, 568, 571, 572, 578, 579, 585, 587, 596, 597, 598, 600, 601, 602, 603, 605, 610, 611, 612, 613, 614, 617, 618, 619, 627, 628, 630, 631, 633, 635, 636, 637, 639, 642, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 686, 687, 688, 692, 694, 695, 696, 697, 698, 699, 700, 702, 704, 708, 710, 711, 712, 713, 714, 715, 716, 717, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 737, 741, 742, 743, 744, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 778, 779, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 800, 801, 802, 803, 804, 805, 807, 808, 809], "check": [93, 94, 95, 96, 97, 150, 151, 152, 155, 156, 321, 322, 335, 340, 341, 343, 344, 345, 346, 357, 399, 409, 416, 417, 419, 431, 432, 471, 481, 564, 570, 583, 593, 600, 601, 602, 603, 620, 627, 628, 634, 657, 662, 714, 715, 724, 725, 726, 768], "option": [93, 94, 95, 96, 97, 134, 135, 136, 141, 155, 156, 318, 319, 321, 322, 326, 327, 328, 331, 335, 336, 337, 338, 339, 341, 346, 358, 369, 371, 372, 374, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 397, 398, 399, 409, 410, 411, 412, 419, 431, 432, 451, 475, 476, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 515, 516, 517, 521, 522, 523, 524, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 543, 544, 545, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 564, 566, 573, 576, 577, 578, 584, 586, 605, 607, 610, 611, 618, 619, 628, 639, 644, 647, 650, 651, 656, 657, 666, 668, 671, 680, 682, 683, 684, 686, 687, 688, 689, 690, 692, 694, 696, 697, 698, 699, 703, 704, 705, 706, 707, 710, 711, 712, 713, 714, 715, 720, 725, 726, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767], "dict": [93, 94, 95, 96, 97, 136, 148, 155, 156, 157, 158, 159, 335, 344, 345, 432, 441, 442, 451, 454, 457, 458, 459, 460, 564, 566, 580, 581, 582, 714, 716, 717, 720, 723, 726, 727], "whether": [93, 94, 95, 96, 97, 155, 156, 157, 158, 159, 318, 319, 320, 321, 336, 338, 339, 369, 370, 377, 378, 399, 405, 413, 419, 420, 421, 431, 432, 451, 452, 463, 467, 468, 471, 472, 476, 479, 481, 482, 523, 564, 565, 568, 569, 576, 579, 583, 585, 591, 593, 595, 598, 599, 600, 601, 602, 603, 604, 616, 620, 626, 627, 628, 631, 632, 633, 634, 635, 636, 637, 639, 644, 652, 657, 662, 710, 711, 712, 713, 714, 715, 716, 720, 724, 725, 726, 727, 734, 735, 763, 764, 766, 767, 778, 779, 789, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810], "recurs": [93, 94, 95, 96, 97, 155, 156, 321, 324, 331, 335, 345, 358, 714, 715, 716, 724, 725, 726], "deriv": [93, 94, 95, 96, 97, 336, 337, 343, 345, 380, 384, 388, 394, 398, 628, 630, 631, 633, 635, 636, 637, 714, 716, 726, 801, 805, 809, 811], "from": [93, 94, 95, 96, 97, 134, 135, 136, 140, 141, 142, 150, 151, 152, 155, 156, 157, 158, 159, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 332, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 357, 358, 380, 381, 382, 384, 386, 387, 388, 391, 392, 394, 398, 399, 408, 423, 432, 441, 442, 451, 466, 470, 475, 476, 482, 519, 556, 564, 579, 586, 587, 622, 628, 631, 635, 644, 652, 655, 657, 661, 675, 679, 688, 697, 700, 702, 705, 710, 711, 712, 713, 714, 716, 726, 727, 734, 735, 736, 737, 738, 741, 745, 746, 747, 749, 754, 759, 760, 761, 762, 763, 764, 766, 767, 768, 774, 778, 779, 789, 797, 800, 805, 809], "tupl": [93, 94, 95, 96, 97, 155, 156, 326, 335, 336, 337, 339, 343, 344, 345, 358, 377, 378, 380, 382, 383, 387, 392, 393, 397, 399, 407, 417, 432, 451, 564, 585, 617, 644, 647, 650, 651, 657, 668, 671, 675, 677, 680, 688, 692, 694, 695, 697, 698, 703, 705, 706, 709, 710, 711, 712, 713, 714, 716, 717, 719, 721, 722, 723, 725, 726, 728, 729, 730, 731, 734, 737, 738, 741, 744, 746, 747, 748, 749, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767], "list": [93, 94, 95, 96, 97, 134, 135, 155, 156, 318, 319, 321, 323, 324, 326, 328, 336, 337, 339, 341, 344, 345, 346, 358, 380, 381, 382, 383, 391, 392, 393, 397, 399, 406, 432, 441, 442, 451, 453, 454, 457, 458, 461, 462, 476, 564, 569, 617, 622, 626, 644, 645, 646, 647, 648, 649, 650, 651, 657, 677, 688, 692, 694, 697, 704, 706, 714, 715, 716, 720, 725, 726, 732, 733, 741, 744, 763, 764, 766, 767, 768, 789, 790, 791, 792, 793, 794, 795, 796], "default": [93, 94, 95, 96, 97, 134, 135, 136, 141, 155, 156, 157, 158, 159, 318, 319, 322, 327, 328, 331, 332, 335, 336, 337, 339, 345, 369, 370, 371, 372, 374, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 405, 410, 411, 412, 413, 432, 441, 442, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 464, 471, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 515, 516, 517, 521, 522, 523, 524, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 543, 544, 545, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 564, 565, 566, 572, 573, 576, 577, 584, 585, 586, 591, 592, 593, 595, 598, 599, 600, 601, 603, 604, 605, 607, 609, 610, 611, 614, 616, 618, 619, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 661, 666, 668, 671, 672, 675, 677, 678, 679, 680, 682, 683, 684, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 703, 704, 705, 706, 707, 710, 711, 712, 713, 714, 715, 716, 720, 724, 725, 726, 727, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 746, 747, 748, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 778, 779, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812], "str": [93, 94, 95, 136, 141, 155, 156, 336, 337, 380, 391, 399, 403, 409, 410, 411, 414, 415, 418, 419, 420, 421, 424, 425, 426, 431, 432, 448, 451, 452, 454, 457, 458, 459, 460, 476, 564, 566, 578, 580, 581, 582, 605, 610, 611, 644, 645, 647, 649, 650, 651, 657, 672, 710, 711, 712, 713, 714, 720, 754, 755], "kei": [93, 94, 95, 155, 156, 157, 158, 159, 335, 344, 432, 444, 564, 566, 574, 644, 655, 656, 710, 711, 712, 714, 717, 723, 727, 778, 779, 789, 800, 805, 809], "word": [93, 94, 95, 380, 381, 734, 738, 778, 779], "ret": [93, 94, 95, 96, 97, 136, 140, 141, 148, 155, 156, 326, 327, 341, 346, 369, 370, 371, 372, 373, 374, 375, 376, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 431, 432, 441, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 607, 610, 611, 616, 618, 619, 620, 622, 623, 624, 626, 627, 628, 630, 631, 632, 633, 634, 635, 636, 637, 639, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 720, 724, 725, 726, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 771, 773, 778, 779, 805, 809], "same": [93, 94, 95, 150, 152, 155, 156, 321, 322, 324, 326, 328, 330, 331, 334, 335, 337, 338, 339, 341, 343, 345, 346, 380, 381, 384, 388, 391, 394, 395, 396, 398, 399, 405, 406, 407, 432, 441, 442, 476, 482, 483, 486, 495, 506, 517, 543, 548, 549, 550, 563, 564, 584, 586, 587, 607, 610, 611, 628, 634, 639, 644, 645, 646, 647, 648, 649, 650, 651, 656, 657, 658, 659, 660, 661, 662, 663, 664, 669, 671, 672, 674, 675, 678, 679, 688, 692, 694, 697, 698, 703, 705, 706, 710, 711, 712, 714, 727, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 761, 762, 768, 789, 790, 791, 792, 793, 794, 795, 796], "convert": [93, 94, 95, 96, 97, 152, 155, 156, 334, 341, 358, 359, 367, 380, 382, 392, 399, 403, 404, 432, 448, 449, 450, 451, 471, 478, 481, 564, 617, 623, 624, 657, 681, 714, 716, 726, 727, 779], "args_to_n": [93, 338, 343], "nativ": [93, 95, 96, 97, 136, 142, 155, 156, 336, 338, 343, 344, 380, 392, 399, 403, 404, 409, 432, 448, 449, 450, 451, 452, 471, 478, 481, 564, 598, 600, 603, 778, 779], "backend": [93, 95, 97, 140, 141, 142, 148, 150, 155, 156, 322, 323, 325, 327, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 342, 343, 346, 399, 416, 417, 419, 431, 432, 467, 469, 479, 564, 595, 598, 599, 605, 628, 631, 633, 635, 636, 637, 642, 768, 774, 778, 779, 805, 806, 807, 808, 809, 810], "to_ivi": [93, 155, 156, 343, 714, 727], "input": [93, 96, 97, 155, 156, 157, 158, 159, 160, 251, 252, 256, 264, 266, 270, 271, 288, 289, 290, 291, 302, 303, 306, 307, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 358, 359, 367, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 382, 384, 386, 388, 391, 392, 394, 395, 396, 398, 399, 405, 406, 408, 409, 410, 411, 412, 413, 414, 420, 421, 422, 423, 427, 432, 441, 442, 451, 452, 453, 454, 456, 457, 460, 464, 470, 476, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 572, 573, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 591, 593, 594, 596, 597, 598, 600, 601, 602, 603, 616, 617, 620, 622, 623, 624, 626, 627, 628, 632, 634, 639, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804], "an": [93, 96, 97, 134, 135, 151, 152, 155, 156, 318, 319, 321, 322, 323, 324, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 357, 358, 369, 372, 373, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 405, 406, 407, 408, 415, 420, 421, 423, 432, 454, 458, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 571, 572, 573, 575, 584, 585, 586, 594, 598, 600, 601, 602, 603, 623, 624, 625, 628, 634, 639, 641, 642, 644, 647, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 671, 672, 673, 674, 675, 678, 679, 680, 688, 689, 690, 692, 694, 695, 696, 697, 698, 700, 702, 703, 704, 705, 706, 707, 708, 709, 714, 720, 732, 733, 734, 736, 740, 741, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 778, 779, 801, 802, 805, 806, 807, 809], "If": [93, 96, 97, 136, 140, 141, 142, 150, 155, 156, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 343, 344, 346, 358, 380, 381, 383, 384, 385, 387, 388, 391, 393, 394, 395, 396, 397, 398, 399, 405, 407, 423, 432, 451, 475, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 506, 507, 508, 515, 516, 517, 526, 528, 529, 531, 533, 534, 536, 537, 539, 543, 547, 548, 549, 550, 551, 554, 555, 556, 561, 562, 563, 564, 598, 628, 631, 633, 635, 636, 637, 657, 658, 659, 666, 668, 671, 672, 674, 675, 679, 680, 682, 683, 684, 686, 687, 688, 696, 697, 703, 704, 705, 706, 710, 711, 712, 714, 726, 727, 734, 737, 738, 741, 742, 743, 744, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768], "set": [93, 96, 97, 127, 136, 140, 141, 142, 148, 150, 155, 156, 311, 320, 322, 325, 326, 331, 333, 334, 335, 336, 337, 338, 341, 343, 344, 432, 451, 461, 462, 473, 474, 475, 476, 482, 492, 564, 565, 612, 613, 614, 615, 628, 631, 633, 634, 635, 636, 637, 657, 659, 666, 668, 671, 674, 714, 715, 724, 725, 726, 730, 731, 734, 739, 741, 742, 747, 748, 749, 750, 751, 752, 753, 754, 760, 762, 789, 798, 805, 806, 807, 808, 809, 810], "leaf": [93, 96, 97, 155, 156, 331, 335, 344, 714, 715, 724, 725], "within": [93, 96, 97, 322, 330, 345, 358, 380, 381, 734, 738], "union": [93, 96, 97, 155, 156, 326, 328, 331, 334, 335, 336, 337, 338, 339, 341, 346, 369, 371, 372, 373, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 403, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 431, 432, 448, 449, 450, 451, 452, 454, 457, 458, 459, 460, 465, 471, 473, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 568, 569, 572, 573, 576, 577, 580, 581, 582, 584, 585, 586, 587, 591, 593, 594, 596, 597, 598, 607, 610, 611, 616, 617, 622, 623, 624, 626, 627, 628, 630, 631, 633, 635, 636, 637, 639, 641, 644, 645, 647, 649, 650, 651, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 725, 726, 732, 733, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 766, 767], "mayb": [93, 96, 97, 321, 341, 343], "manner": [93, 96, 97, 150, 155, 156, 326, 327, 337, 344, 357, 358, 714, 726], "travers": [93, 96, 97, 155, 156, 335, 341, 343, 714, 726], "lowest": [93, 96, 97, 155, 156, 331, 358, 714, 726, 734, 736], "leav": [93, 96, 97, 155, 156, 157, 158, 160, 327, 328, 330, 331, 335, 336, 338, 339, 344, 345, 688, 706, 714, 715, 716, 724, 725, 726], "search": [93, 96, 97, 125, 150, 155, 156, 309, 321, 326, 328, 330, 742, 743, 744, 745], "s": [93, 96, 97, 136, 140, 141, 142, 148, 151, 152, 155, 156, 320, 321, 322, 324, 325, 327, 328, 330, 332, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 357, 358, 379, 380, 391, 395, 396, 399, 416, 417, 432, 451, 475, 482, 548, 564, 569, 628, 631, 633, 635, 637, 657, 675, 676, 714, 720, 726, 754, 760, 762, 768, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812], "case": [93, 96, 97, 151, 155, 156, 157, 158, 159, 321, 322, 323, 326, 327, 328, 331, 332, 334, 335, 336, 337, 338, 339, 341, 343, 345, 346, 358, 380, 391, 432, 471, 478, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 503, 505, 506, 507, 508, 515, 516, 517, 526, 528, 529, 531, 533, 534, 543, 547, 548, 549, 550, 551, 554, 555, 556, 561, 562, 563, 564, 598, 610, 611, 657, 666, 688, 700, 702, 714, 717, 723, 754, 756, 757, 758, 760, 761, 762, 789, 800, 801, 802, 805, 809], "to_n": [93, 155, 156], "item": [93, 97, 134, 135, 155, 156, 336, 341, 343, 344, 346, 399, 410, 432, 441, 442, 444, 451, 453, 455, 457, 459, 463, 564, 574, 592, 618, 619, 714, 719, 720, 721, 722, 726, 730, 731, 768, 801, 802], "convers": [94, 95, 96, 97, 152, 155, 156, 340, 342, 346, 357, 358, 768, 774], "arraywithcr": 98, "creation": [99, 155, 156, 157, 158, 159, 283, 326, 336, 337, 341, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398], "data_typ": [100, 101, 284, 285, 326, 336, 399, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431], "arraywithdatatyp": 100, "arraywithdevic": [102, 343], "devic": [103, 151, 155, 156, 160, 235, 264, 265, 287, 306, 307, 322, 325, 326, 331, 333, 336, 343, 344, 358, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 564, 586, 587, 607, 610, 611, 734, 735, 736, 737, 738, 778, 779, 780, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812], "arraywithelementwis": [104, 323, 334], "elementwis": [105, 155, 156, 289, 326, 331, 341, 346, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563], "arraywithgener": [106, 343], "gener": [107, 134, 135, 155, 156, 291, 318, 319, 322, 323, 324, 325, 326, 327, 328, 331, 334, 335, 336, 337, 338, 339, 340, 341, 343, 345, 346, 357, 358, 377, 380, 381, 389, 390, 399, 408, 482, 487, 489, 503, 505, 506, 508, 517, 548, 556, 557, 559, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 634, 688, 696, 703, 734, 735, 736, 738, 739, 746, 747, 748, 751, 752, 754, 756, 768, 805, 809], "arraywithgradi": [108, 343], "gradient": [109, 155, 156, 293, 326, 335, 344, 345, 357, 358, 432, 476, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 710, 711, 712, 713, 768, 805, 806, 807, 808, 809, 810], "arraywithimag": [110, 343], "imag": [111, 295, 321, 324, 326, 341, 342, 344, 346, 357, 644, 645, 646, 647, 648, 650, 651, 768], "arraywithlay": 112, "layer": [113, 150, 297, 326, 327, 341, 342, 345, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 732, 733, 768, 780, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812], "linear_algebra": [114, 115, 298, 299, 326, 343, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681], "arraywithlinearalgebra": 114, "arraywithloss": 116, "loss": [117, 301, 326, 331, 344, 345, 346, 683, 684, 686, 687, 768], "arraywithmanipul": 118, "manipul": [119, 150, 303, 326, 346, 357, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709], "arraywithnorm": 120, "norm": [121, 155, 156, 305, 326, 564, 572, 573, 657, 666, 680, 733, 768, 804, 805, 807], "arraywithrandom": [122, 343], "random": [123, 155, 156, 307, 326, 337, 346, 357, 735, 736, 737, 738, 739, 740, 768], "arraywithsearch": 124, "arraywithset": 126, "arraywithsort": 128, "arraywithstatist": 130, "statist": [131, 315, 318, 319, 326, 336, 755, 756, 757, 758, 759, 760, 761, 762], "arraywithutil": 132, "util": [133, 317, 326, 337, 432, 465, 764, 766, 767], "add_ivy_array_instance_method": 134, "cl": [134, 135, 318, 319], "modul": [134, 135, 136, 140, 141, 152, 155, 156, 157, 158, 159, 318, 319, 321, 324, 330, 331, 332, 334, 338, 341, 342, 344, 346, 357, 358, 564, 605, 734, 735, 737, 738, 768, 775, 776, 777, 778, 779, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 803, 804, 811, 812], "to_ignor": [134, 135, 318, 319, 714, 725], "loop": [134, 135, 318, 319, 332, 358, 710, 711, 712, 713], "over": [134, 135, 136, 140, 150, 152, 155, 156, 318, 319, 321, 327, 328, 332, 338, 343, 358, 657, 666, 677, 679, 680, 732, 733, 734, 738, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 803, 804], "etc": [134, 135, 152, 155, 156, 318, 319, 321, 322, 323, 326, 328, 330, 334, 335, 336, 339, 341, 343, 344, 358, 380, 389, 390, 564, 586, 587, 607, 610, 611, 734, 735, 736, 738, 746, 747, 748, 750, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812], "us": [134, 135, 136, 141, 148, 151, 152, 155, 156, 157, 158, 159, 318, 319, 320, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 343, 345, 346, 357, 358, 369, 371, 372, 373, 374, 375, 376, 379, 399, 414, 432, 441, 442, 467, 471, 474, 475, 476, 477, 479, 481, 482, 487, 489, 494, 503, 505, 508, 517, 520, 541, 542, 544, 549, 556, 562, 564, 586, 589, 590, 604, 610, 611, 612, 613, 618, 619, 628, 630, 631, 635, 636, 644, 650, 652, 653, 655, 656, 657, 660, 661, 666, 682, 683, 688, 696, 697, 699, 703, 707, 710, 711, 712, 713, 714, 715, 717, 723, 724, 725, 727, 732, 733, 741, 742, 743, 744, 746, 747, 748, 754, 755, 763, 764, 766, 768, 789, 797, 800, 801, 802, 803, 804, 805, 807, 808], "_wrap_funct": [134, 135, 318, 319, 331, 333], "we": [134, 135, 136, 141, 142, 148, 149, 150, 151, 152, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 341, 342, 343, 344, 345, 346, 357, 358, 628, 632, 768, 774], "want": [134, 135, 136, 141, 151, 318, 319, 320, 321, 322, 330, 344, 345, 346, 358], "don": [134, 135, 152, 318, 319, 321, 322, 323, 336, 345, 358], "t": [134, 135, 136, 141, 151, 152, 318, 319, 321, 322, 323, 324, 328, 336, 341, 343, 344, 345, 346, 358, 564, 569, 644, 653, 654], "As": [134, 135, 150, 318, 319, 322, 330, 331, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 358, 746, 747, 748, 750], "shown": [134, 135, 155, 156, 318, 319, 322, 328, 339, 341, 343, 358, 380, 391, 482, 494, 503, 505, 508, 549, 562, 657, 660, 688, 696, 697, 746, 747, 748, 751, 752], "appropri": [134, 135, 318, 319, 322, 333, 482, 486, 543, 741, 742], "our": [134, 135, 150, 151, 318, 319, 320, 321, 322, 328, 335, 340, 343, 344, 345, 346, 358, 768], "toi": [134, 135, 318, 319], "arrayexampl": [134, 135], "import": [134, 135, 136, 140, 151, 318, 319, 323, 326, 327, 328, 332, 334, 335, 336, 337, 338, 341, 343, 344, 346, 358, 432, 473, 768, 774], "pass": [134, 135, 136, 140, 155, 156, 157, 158, 159, 318, 319, 323, 327, 328, 329, 330, 331, 332, 334, 335, 338, 339, 343, 358, 399, 409, 432, 441, 476, 482, 492, 564, 571, 598, 628, 642, 710, 711, 712, 778, 779, 801, 802, 805, 809, 811, 812], "hasattr": [134, 135, 318, 319, 343], "relu": [134, 135, 157, 158, 344, 345, 369, 370, 371, 768], "softmax": [134, 135, 157, 158, 369, 644, 655, 656, 768], "backend_handl": [136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 768], "contextmanag": [136, 137], "object": [136, 155, 156, 157, 158, 159, 343, 346, 380, 386, 399, 415, 432, 477, 628, 714, 717, 719, 721, 722, 723, 728, 729, 730, 731, 734, 740, 780, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 801, 802], "__init__": [136, 137, 140, 141, 155, 156, 157, 158, 159, 160, 326, 332, 336, 341, 343, 344, 345, 346, 399, 400, 401, 402, 432, 433, 440, 441, 442, 443, 444, 445, 446, 447, 628, 629, 734, 735, 737, 738, 768, 775, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812], "choose_random_backend": 136, "exclud": [136, 138, 328, 341, 380, 381, 734, 738], "clear_backend_stack": 136, "current_backend": [136, 157, 158, 326, 331], "current": [136, 140, 141, 148, 152, 155, 156, 157, 158, 159, 321, 322, 323, 324, 331, 337, 341, 346, 357, 358, 399, 416, 417, 419, 431, 432, 441, 465, 466, 470, 472, 564, 588, 595, 599, 606, 608, 714, 715, 724, 725, 768], "prioriti": [136, 140, 155, 156, 322, 338], "global_backend": [136, 140], "which": [136, 140, 141, 150, 151, 152, 155, 156, 157, 158, 159, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 357, 358, 369, 374, 377, 378, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 395, 396, 397, 398, 399, 408, 409, 413, 415, 418, 419, 431, 432, 441, 442, 452, 457, 458, 459, 460, 461, 462, 463, 464, 466, 470, 472, 474, 475, 476, 482, 548, 564, 566, 576, 577, 579, 586, 587, 588, 594, 598, 606, 607, 608, 610, 611, 626, 628, 631, 632, 633, 635, 636, 637, 639, 641, 642, 644, 655, 657, 659, 661, 666, 674, 675, 679, 680, 682, 684, 686, 687, 688, 692, 694, 697, 699, 703, 704, 706, 714, 719, 720, 721, 722, 727, 728, 729, 730, 731, 734, 735, 736, 738, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 771, 773, 778, 779, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812], "try": [136, 140, 149, 151, 152, 155, 156, 321, 322, 323, 324, 334, 335, 343, 358, 564, 625, 768], "infer": [136, 140, 325, 332, 336, 337, 341, 346, 377, 378, 380, 381, 382, 384, 387, 388, 392, 394, 398, 482, 519, 564, 591, 616, 688, 700, 702], "when": [136, 140, 150, 151, 155, 156, 157, 158, 159, 321, 322, 323, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 346, 358, 399, 405, 432, 482, 486, 516, 547, 564, 571, 598, 619, 682, 683, 684, 686, 687, 714, 725, 741, 742, 743, 745, 754, 756, 758, 760, 762, 768, 801, 802], "global": [136, 140, 141, 142, 148, 155, 156, 157, 158, 159, 331, 332, 336, 337, 341, 399, 410, 411, 412, 432, 441, 442, 474, 475, 476, 564, 589, 590, 609, 612, 613, 614, 618, 619, 732, 733, 803, 804], "numpi": [136, 140, 141, 142, 150, 151, 155, 156, 322, 323, 330, 332, 336, 337, 338, 339, 341, 343, 346, 564, 623, 754, 755, 768], "np": [136, 140, 334, 336, 337, 338, 339, 343, 344, 346, 768], "py": [136, 140, 141, 322, 326, 327, 331, 332, 336, 337, 339, 341, 343, 345, 346, 734, 735, 737, 738], "noqa": [136, 140, 141, 380, 391, 399, 408, 482, 486, 494, 503, 505, 506, 508, 549, 556, 557, 559, 561, 562, 657, 660, 688, 696, 697, 703, 754, 756], "set_backend": [136, 140, 141, 148, 331, 332, 333, 336, 399, 416, 417, 432, 473, 564, 616, 768], "ha": [136, 140, 141, 150, 151, 152, 155, 156, 322, 327, 328, 331, 332, 333, 336, 337, 341, 343, 345, 346, 357, 358, 380, 391, 432, 451, 482, 483, 543, 547, 657, 665, 673, 674, 675, 678, 688, 696, 705, 746, 747, 748, 750, 754, 757, 759, 760, 761, 762], "jax": [136, 140, 141, 142, 151, 152, 322, 323, 332, 336, 337, 338, 339, 341, 343, 346, 358, 628, 634, 746, 747, 748, 750, 768], "get_backend": [136, 331, 332], "specifi": [136, 141, 155, 156, 325, 330, 331, 336, 337, 338, 339, 341, 344, 345, 346, 380, 381, 383, 387, 389, 390, 393, 395, 396, 397, 399, 405, 407, 432, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 466, 470, 472, 475, 476, 477, 482, 548, 564, 566, 576, 586, 587, 593, 626, 657, 661, 666, 677, 678, 679, 680, 682, 683, 684, 686, 687, 688, 689, 690, 692, 694, 695, 697, 703, 705, 706, 709, 714, 719, 721, 722, 728, 729, 730, 731, 741, 742, 743, 746, 747, 748, 750, 751, 752, 754, 755, 759, 761, 763, 764, 766, 767], "isn": [136, 141, 322, 344, 358], "associ": [136, 141, 322, 331, 333, 358, 482, 486, 543, 657, 668, 671, 681], "retriev": [136, 141, 322, 564, 566], "i": [136, 141, 322, 324, 325, 341, 344, 346, 380, 381, 391, 482, 483, 492, 496, 498, 502, 506, 517, 518, 521, 541, 542, 544, 547, 548, 564, 568, 569, 628, 631, 633, 635, 636, 637, 657, 659, 665, 668, 671, 674, 675, 678, 680, 688, 706, 746, 747, 748, 750, 751, 752, 753, 754, 755, 756, 757, 758, 760, 761, 762], "e": [136, 141, 151, 152, 320, 322, 324, 325, 335, 344, 358, 379, 380, 391, 399, 404, 423, 432, 448, 482, 483, 492, 496, 498, 502, 506, 515, 517, 518, 521, 526, 528, 530, 541, 542, 544, 547, 548, 628, 631, 633, 635, 636, 637, 657, 659, 665, 668, 671, 674, 675, 680, 688, 706, 734, 737, 738, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762], "one": [136, 141, 151, 152, 155, 156, 160, 167, 251, 252, 256, 264, 266, 288, 289, 290, 291, 302, 303, 306, 307, 321, 322, 328, 331, 334, 335, 336, 338, 339, 340, 343, 344, 346, 358, 380, 381, 391, 399, 406, 408, 432, 461, 462, 463, 464, 476, 564, 565, 604, 607, 610, 611, 657, 665, 666, 670, 672, 679, 680, 688, 689, 691, 696, 697, 703, 705, 741, 742, 744, 746, 747, 748, 749, 750, 754, 755, 768], "torch": [136, 141, 148, 322, 326, 331, 332, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 358, 377, 378, 399, 416, 417, 432, 473, 564, 616, 688, 696, 768], "tensorflow": [136, 141, 148, 151, 152, 322, 323, 336, 337, 338, 339, 341, 346, 358, 768], "mxnet": [136, 141, 151, 323, 336, 337, 338, 341, 346, 768], "either": [136, 141, 148, 155, 156, 321, 322, 324, 327, 328, 331, 332, 335, 336, 337, 341, 343, 344, 358, 380, 386, 482, 486, 492, 522, 526, 528, 529, 531, 533, 534, 543, 548, 550, 551, 554, 561, 564, 579, 600, 604, 605, 657, 665, 710, 711, 712, 713, 754, 759, 761, 789, 800, 801, 802], "doesn": [136, 141, 321, 324, 328, 336, 341, 358], "matter": [136, 141, 150, 328], "been": [136, 141, 322, 327, 331, 332, 335, 336, 337, 339, 341, 357, 358, 432, 451, 564, 580, 581, 582, 734, 735], "ivy_np": [136, 141], "ivy_jax": [136, 141], "subsequ": [136, 142, 321, 328, 330, 331, 334, 338, 339, 345], "call": [136, 142, 148, 151, 157, 158, 160, 324, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 358, 432, 476, 564, 609, 614, 625, 628, 632, 714, 715, 720, 724, 725, 789, 800, 801, 802, 805, 809], "ndarrai": [136, 142, 334, 336, 337, 338, 339, 343, 380, 382, 392, 564, 623], "Or": [136, 142, 344], "jaxlib": [136, 142, 321, 336, 337, 339, 343], "xla_extens": [136, 142, 336, 337, 339, 343], "devicearrai": [136, 142, 343], "try_import_ivy_jax": 136, "warn": [136, 143, 144, 145, 146, 147], "try_import_ivy_mxnet": 136, "try_import_ivy_numpi": 136, "try_import_ivy_tf": 136, "try_import_ivy_torch": 136, "unset_backend": [136, 332], "unset": [136, 148, 332, 341, 343], "adjust": [136, 148, 754, 760, 762], "previous": [136, 148, 321, 324, 330, 331, 341, 564, 571], "implement": [136, 148, 322, 323, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 357, 358, 399, 405, 423, 432, 477, 482, 483, 484, 485, 487, 489, 490, 491, 492, 507, 508, 515, 516, 526, 528, 529, 530, 531, 533, 543, 547, 548, 551, 554, 555, 561, 562, 657, 662, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758, 768], "wa": [136, 148, 151, 155, 156, 328, 341, 343, 564, 625, 714, 727, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767], "last": [136, 148, 152, 155, 156, 322, 328, 332, 358, 369, 374, 432, 451, 644, 654, 657, 659, 661, 666, 678, 679, 682, 684, 686, 687, 688, 697, 703, 704, 706, 751, 752, 753, 763, 764, 766, 767, 789, 799], "henc": [136, 148, 746, 747, 748, 750], "here": [136, 148, 321, 322, 323, 326, 328, 335, 339, 341, 342, 343, 344, 345, 346, 357, 358], "tensor": [136, 148, 150, 155, 156, 326, 331, 332, 334, 336, 337, 338, 339, 341, 343, 344, 345, 346, 358, 380, 389, 390, 399, 413, 482, 494, 541, 542, 564, 607, 610, 611, 644, 652, 654, 657, 677, 688, 696, 700, 702, 704, 734, 735, 741, 744, 768, 789, 797, 799], "howev": [136, 148, 151, 321, 323, 327, 330, 331, 332, 334, 335, 336, 337, 338, 339, 343, 344, 345, 346, 358], "befor": [136, 148, 155, 156, 321, 322, 323, 327, 330, 334, 336, 337, 338, 341, 344, 358, 432, 476, 482, 563, 644, 655, 656, 710, 711, 712, 714, 726, 746, 747, 748, 750, 754, 759, 761], "becom": [136, 148, 150, 152, 322, 328, 335, 341, 346, 358, 688, 689, 690], "swap": [136, 148, 688, 707], "python": [136, 148, 149, 150, 151, 321, 322, 324, 341, 343, 344, 358, 380, 381, 432, 471, 481, 482, 548, 768, 774], "op": [136, 148, 326, 341, 358], "eagertensor": [136, 148], "def": [137, 323, 326, 328, 331, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 400, 401, 402, 433, 440, 443, 629, 768, 781, 784, 787], "ml": [149, 151, 152, 320, 340, 341, 342, 344, 345, 346, 357, 768, 774], "explos": [149, 151, 768], "A": [149, 150, 151, 152, 155, 156, 157, 158, 159, 324, 325, 330, 331, 335, 336, 337, 341, 344, 358, 380, 385, 392, 432, 441, 442, 476, 482, 546, 564, 590, 622, 657, 670, 673, 674, 675, 688, 704, 706, 714, 715, 717, 719, 721, 722, 723, 724, 725, 728, 729, 730, 731, 754, 755, 763, 764, 766, 767, 768, 811, 812], "huge": [149, 151, 344, 768], "number": [149, 150, 155, 156, 157, 158, 159, 160, 321, 328, 335, 337, 338, 341, 344, 346, 377, 378, 379, 380, 381, 382, 385, 389, 390, 391, 392, 399, 406, 414, 415, 418, 420, 421, 423, 432, 468, 469, 470, 482, 486, 492, 506, 517, 518, 541, 542, 543, 547, 548, 549, 550, 563, 564, 565, 585, 590, 591, 606, 624, 627, 644, 655, 657, 662, 668, 673, 675, 679, 688, 689, 690, 695, 698, 699, 703, 704, 706, 708, 709, 710, 711, 712, 713, 734, 735, 739, 741, 744, 746, 747, 748, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800], "tool": [149, 152, 322, 342, 346, 357, 358, 768], "have": [149, 150, 151, 152, 155, 156, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 357, 358, 369, 372, 380, 381, 383, 384, 387, 388, 391, 393, 394, 395, 396, 397, 398, 399, 405, 406, 407, 415, 432, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 543, 544, 545, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 573, 580, 581, 582, 584, 628, 634, 642, 644, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 682, 683, 684, 686, 687, 688, 689, 690, 692, 694, 696, 697, 698, 699, 703, 705, 706, 707, 734, 736, 740, 741, 742, 743, 744, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768], "explod": [149, 150, 768], "onto": [149, 150, 432, 461, 462, 714, 720, 726, 768], "scene": [149, 150, 325, 340, 342, 628, 631, 633, 635, 636, 637, 768], "b": [149, 152, 157, 158, 160, 165, 167, 184, 185, 186, 239, 251, 252, 255, 256, 264, 266, 270, 271, 276, 277, 284, 285, 288, 289, 290, 291, 302, 303, 306, 307, 320, 325, 328, 331, 332, 335, 340, 341, 342, 344, 345, 346, 356, 399, 408, 432, 454, 482, 486, 487, 489, 494, 503, 505, 506, 508, 517, 520, 544, 549, 556, 557, 559, 561, 562, 564, 565, 568, 569, 575, 576, 583, 586, 624, 644, 647, 650, 651, 656, 657, 658, 659, 660, 670, 674, 677, 681, 682, 683, 688, 689, 690, 691, 696, 697, 699, 703, 706, 707, 732, 733, 734, 737, 738, 741, 743, 744, 745, 751, 752, 754, 755, 756, 763, 764, 766, 768, 774], "why": [149, 151, 322, 335, 338, 339, 343, 768], "unifi": [149, 151, 155, 156, 334, 341, 358, 432, 461, 462, 463, 464, 476, 768], "should": [149, 151, 155, 156, 157, 158, 159, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 343, 344, 345, 377, 378, 380, 391, 395, 396, 399, 407, 432, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 515, 516, 517, 521, 522, 523, 524, 526, 528, 529, 531, 533, 534, 535, 536, 537, 539, 540, 543, 545, 547, 548, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 571, 598, 607, 628, 631, 633, 635, 636, 637, 644, 656, 657, 658, 659, 660, 661, 664, 665, 668, 670, 671, 672, 674, 675, 677, 678, 679, 680, 688, 700, 702, 734, 740, 741, 742, 743, 746, 747, 748, 750, 754, 755, 756, 757, 759, 760, 761, 762, 768], "them": [149, 150, 151, 152, 330, 332, 334, 335, 341, 343, 344, 345, 358, 768], "c": [149, 151, 152, 160, 264, 306, 307, 320, 325, 328, 331, 335, 340, 341, 342, 344, 358, 564, 568, 569, 575, 624, 628, 630, 631, 633, 635, 636, 637, 644, 650, 688, 706, 741, 744, 754, 755, 760, 762, 768, 774], "standard": [149, 325, 326, 327, 329, 330, 334, 338, 339, 358, 380, 391, 399, 408, 415, 482, 486, 487, 489, 494, 503, 505, 506, 508, 517, 549, 556, 557, 559, 561, 562, 657, 660, 688, 696, 697, 703, 732, 733, 734, 737, 746, 747, 748, 751, 752, 754, 756, 760, 762, 763, 764, 766, 768, 774, 803, 804], "re": [149, 150, 151, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 343, 346, 358, 432, 476, 564, 580, 657, 677, 688, 703, 741, 745, 768], "collabor": [149, 150, 151, 768], "consortium": [149, 151, 768, 774], "data": [149, 151, 155, 156, 157, 158, 159, 325, 326, 327, 331, 333, 335, 337, 338, 339, 343, 380, 381, 382, 383, 384, 385, 386, 387, 388, 391, 392, 393, 394, 395, 396, 397, 398, 403, 404, 405, 407, 408, 409, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 427, 431, 432, 434, 435, 436, 437, 438, 439, 444, 445, 446, 448, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 531, 533, 534, 535, 536, 537, 539, 540, 543, 545, 547, 548, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 568, 569, 600, 601, 603, 620, 628, 634, 642, 644, 653, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 674, 675, 677, 678, 679, 680, 688, 696, 697, 698, 700, 702, 703, 705, 706, 734, 740, 741, 742, 743, 744, 751, 752, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 774, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800], "api": [149, 150, 321, 322, 325, 327, 328, 330, 331, 333, 334, 336, 337, 338, 339, 340, 342, 344, 358, 380, 391, 399, 408, 482, 486, 487, 489, 494, 503, 505, 506, 508, 517, 549, 556, 557, 559, 561, 562, 657, 660, 688, 696, 697, 703, 746, 747, 748, 751, 752, 754, 756, 763, 764, 766, 768, 774], "open": [150, 151, 152, 320, 321, 324, 327, 357, 380, 381, 734, 736, 738, 768], "project": [150, 151, 152, 321, 322, 324, 326, 332, 343, 345, 357, 358, 734, 735, 737, 738], "grown": 150, "consider": [150, 328, 339], "recent": [150, 151, 321, 322], "year": [150, 152, 358, 768], "especi": [150, 321], "deep": [150, 155, 156, 320, 322, 323, 340, 344, 768], "learn": [150, 151, 321, 323, 325, 331, 340, 346, 357, 482, 519, 628, 631, 633, 635, 636, 637, 710, 711, 712, 713, 768, 805, 806, 807, 808, 809, 810], "can": [150, 151, 152, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 357, 358, 380, 382, 392, 399, 408, 432, 474, 475, 476, 657, 664, 688, 700, 702, 734, 736, 768, 774], "seen": [150, 151, 328, 343, 344], "rapidli": 150, "increas": [150, 432, 456, 460, 464, 688, 695, 709, 714, 726], "github": [150, 322, 323, 327, 330], "repo": [150, 151, 152, 321, 322, 329, 341, 343, 344, 345, 346, 357, 768, 774], "term": [150, 322, 335, 644, 654, 789, 799], "time": [150, 151, 152, 321, 322, 323, 330, 331, 335, 336, 339, 341, 344, 346, 358, 628, 631, 635, 644, 654, 688, 708, 710, 711, 712, 713, 741, 742, 743, 746, 747, 748, 789, 800, 801, 802], "These": [150, 151, 152, 322, 327, 328, 330, 331, 335, 336, 338, 339, 341, 342, 344, 345, 346, 358, 657, 662, 768, 774], "written": [150, 321, 326, 327, 334, 338, 339, 341, 343, 346, 358], "mani": [150, 151, 152, 155, 156, 321, 322, 323, 327, 328, 331, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 358, 688, 704], "differ": [150, 151, 152, 155, 156, 157, 158, 159, 321, 322, 325, 326, 327, 328, 330, 331, 334, 335, 337, 338, 339, 341, 342, 343, 344, 345, 346, 358, 399, 415, 432, 453, 454, 457, 458, 482, 486, 543, 560, 644, 653, 688, 706, 754, 759, 761, 768], "while": [150, 151, 155, 156, 157, 158, 159, 321, 322, 328, 332, 338, 345, 346, 358, 482, 536, 537, 539, 746, 747, 754, 757], "wonder": [150, 152, 343], "thing": [150, 151, 152, 321, 322, 323, 332, 343, 344], "research": [150, 357], "develop": [150, 151, 152, 320, 321, 322, 323, 357, 358, 768], "consid": [150, 151, 155, 156, 326, 331, 342, 343, 344, 482, 536, 537, 539, 746, 747, 748, 750], "speed": 150, "evolv": 150, "sharabl": 150, "code": [150, 151, 152, 155, 156, 157, 158, 159, 321, 322, 323, 324, 325, 327, 328, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 356, 358, 369, 371, 372, 373, 374, 375, 376, 432, 454, 477, 482, 503, 505, 557, 559, 644, 650, 651, 746, 747, 748, 751, 752, 754, 755, 768, 774], "significantli": 150, "hinder": [150, 339], "librari": [150, 151, 152, 341, 346, 356, 358, 432, 477, 482, 516, 536, 537, 539, 657, 662, 746, 747, 748, 750, 754, 756, 757, 758, 768], "outdat": 150, "month": 150, "rigor": 150, "maintain": [150, 322, 358, 751, 752, 753], "against": [150, 155, 156, 330, 358, 399, 406, 657, 665, 666, 668, 671, 741, 742], "newest": 150, "version": [150, 151, 152, 321, 327, 341, 343, 657, 662, 768], "For": [150, 151, 152, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 357, 358, 380, 381, 391, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 506, 507, 508, 515, 516, 517, 526, 528, 529, 531, 533, 534, 543, 547, 548, 549, 551, 554, 555, 556, 561, 562, 563, 628, 634, 642, 657, 675, 678, 688, 689, 690, 706, 746, 747, 748, 750, 754, 756, 758, 761, 778, 779], "softwar": [150, 151, 321, 322], "pipelin": [150, 334, 346], "where": [150, 151, 152, 155, 156, 157, 158, 320, 321, 322, 323, 324, 327, 331, 332, 334, 335, 336, 337, 338, 341, 344, 345, 346, 358, 380, 387, 388, 391, 482, 492, 515, 530, 543, 547, 564, 594, 598, 607, 657, 662, 668, 671, 672, 675, 676, 678, 679, 688, 689, 690, 695, 696, 698, 706, 709, 714, 715, 725, 734, 735, 741, 744, 754, 760, 762, 763, 764, 766, 767, 768], "rapid": [150, 151, 321], "prototyp": 150, "vital": [150, 346], "signific": [150, 151, 358], "bottleneck": 150, "new": [150, 151, 152, 155, 156, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 333, 335, 336, 338, 340, 343, 346, 357, 380, 383, 386, 387, 388, 393, 394, 397, 398, 399, 427, 482, 493, 530, 546, 564, 580, 581, 582, 585, 586, 587, 610, 611, 612, 613, 618, 619, 628, 631, 633, 635, 636, 637, 688, 696, 700, 702, 706, 714, 719, 730, 731, 732, 733, 768, 778, 779, 789, 799, 803, 804, 805, 806, 807, 808, 809, 810], "futur": [150, 152, 321, 322, 343, 358, 657, 662], "avail": [150, 155, 156, 321, 322, 327, 337, 358, 432, 451, 467, 468, 469, 479, 564, 581], "specif": [150, 155, 156, 323, 331, 334, 335, 336, 337, 338, 339, 341, 342, 343, 345, 346, 357, 358, 399, 423, 432, 474, 477, 482, 536, 537, 539, 564, 580, 581, 582, 605, 657, 662, 677, 688, 706, 710, 711, 712, 713, 734, 735, 754, 756, 757, 758, 768, 771, 773, 774, 801, 802], "quickli": [150, 152, 321, 322, 344, 345], "obsolet": [150, 152], "user": [150, 151, 321, 322, 324, 325, 330, 332, 335, 338, 340, 358, 789, 800, 801, 802], "constantli": 150, "invent": 150, "wheel": 150, "desir": [150, 155, 156, 399, 405, 408, 432, 477, 564, 594, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800], "provid": [150, 155, 156, 321, 322, 327, 328, 331, 334, 335, 336, 337, 338, 339, 341, 345, 357, 358, 377, 378, 380, 391, 399, 410, 411, 412, 419, 423, 431, 432, 451, 564, 579, 607, 611, 628, 631, 633, 635, 636, 637, 657, 679, 688, 697, 706, 741, 742, 754, 760, 762, 763, 764, 766, 767, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 805, 806, 807, 808, 809, 810], "simultan": [150, 152], "modern": [150, 151], "simpl": [150, 321, 322, 326, 327, 328, 330, 331, 334, 335, 336, 337, 338, 341, 343, 345, 346, 358, 564, 583], "scalabl": [150, 341], "must": [150, 152, 155, 156, 157, 158, 159, 321, 322, 323, 326, 327, 328, 331, 334, 335, 336, 337, 339, 341, 345, 346, 369, 372, 380, 381, 383, 384, 385, 387, 388, 391, 393, 394, 395, 396, 397, 398, 399, 405, 406, 407, 432, 461, 462, 463, 464, 476, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 573, 584, 611, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 674, 675, 677, 678, 679, 680, 682, 683, 684, 686, 687, 688, 689, 690, 692, 694, 696, 697, 698, 699, 703, 705, 706, 707, 734, 736, 739, 741, 742, 743, 744, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 805, 809], "determin": [150, 155, 156, 327, 331, 335, 336, 337, 399, 408, 409, 414, 419, 420, 421, 431, 432, 467, 468, 469, 479, 482, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 496, 498, 499, 501, 502, 503, 505, 507, 508, 509, 515, 516, 521, 522, 523, 526, 528, 529, 531, 533, 534, 540, 543, 547, 548, 551, 554, 555, 556, 561, 562, 564, 565, 568, 569, 593, 595, 599, 600, 601, 602, 603, 620, 627, 628, 634, 644, 655, 657, 658, 659, 660, 661, 664, 665, 668, 670, 671, 673, 674, 678, 679, 680, 710, 711, 712, 713, 746, 747, 748, 750, 763, 764, 766, 767], "exactli": [150, 152, 328, 335, 337, 768, 774], "common": [150, 155, 156, 322, 323, 328, 331, 333, 335, 337, 358], "ground": [150, 330], "li": 150, "between": [150, 155, 156, 157, 158, 159, 328, 330, 331, 334, 335, 339, 340, 342, 343, 344, 346, 357, 380, 381, 399, 415, 482, 492, 547, 682, 683, 684, 686, 687, 688, 696, 706, 714, 720, 734, 736, 746, 747, 748, 750, 768, 805, 807], "find": [150, 155, 156, 321, 322, 341, 344, 746, 747, 748, 750, 768], "exist": [150, 151, 155, 156, 157, 158, 321, 323, 324, 327, 328, 329, 330, 331, 332, 333, 338, 341, 358, 564, 579, 805, 809], "essenti": [150, 151, 323, 328, 331, 337], "order": [150, 155, 156, 157, 158, 159, 321, 322, 324, 327, 328, 332, 334, 335, 336, 337, 339, 343, 344, 346, 358, 482, 492, 628, 631, 633, 635, 636, 637, 657, 662, 666, 675, 676, 680, 688, 697, 710, 711, 712, 741, 744, 746, 747, 748, 750, 751, 752, 753, 811, 812], "design": [150, 151, 325, 338, 341, 343, 358], "univers": 150, "abstract": [150, 335, 345, 358, 432, 447, 805, 809], "In": [150, 152, 321, 322, 326, 327, 328, 331, 332, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 357, 358, 432, 471, 477, 478, 481, 482, 486, 543, 548, 564, 566, 598, 688, 700, 702, 734, 738, 768], "languag": [150, 152, 341], "first": [150, 151, 321, 322, 324, 328, 331, 334, 335, 339, 341, 343, 344, 346, 377, 378, 380, 389, 390, 399, 422, 427, 432, 451, 463, 482, 486, 494, 496, 498, 499, 501, 502, 503, 505, 510, 518, 520, 524, 525, 534, 535, 537, 539, 540, 543, 545, 547, 560, 564, 568, 628, 632, 657, 659, 661, 662, 665, 670, 672, 675, 677, 679, 688, 692, 694, 703, 706, 707, 710, 711, 712, 713, 714, 715, 724, 725, 734, 740, 741, 742, 743, 746, 747, 748, 789, 800, 801, 802, 805, 809], "see": [150, 320, 321, 322, 323, 329, 331, 335, 337, 339, 343, 344, 357, 358, 380, 381, 386, 389, 390, 399, 407, 423, 482, 486, 494, 496, 498, 499, 501, 502, 503, 505, 509, 516, 524, 534, 537, 539, 540, 543, 545, 547, 548, 560, 657, 668, 671, 674, 679, 680, 741, 743, 746, 747, 748, 750, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768], "clear": [150, 151, 152, 322, 323, 328, 330, 336, 337, 341, 343, 432, 450], "front": [150, 340, 341, 344, 768, 774], "runner": 150, "look": [150, 321, 322, 324, 326, 328, 331, 332, 335, 336, 337, 339, 341, 343, 345, 346, 768], "littl": [150, 343], "deeper": [150, 322, 325, 340, 432, 456, 460, 464, 714, 725, 726], "follow": [150, 151, 155, 156, 321, 322, 323, 324, 326, 327, 328, 330, 332, 334, 335, 336, 337, 338, 340, 341, 343, 344, 345, 346, 358, 399, 418, 432, 476, 482, 548, 564, 596, 597, 598, 618, 619, 628, 631, 633, 635, 636, 637, 644, 655, 656, 657, 672, 680, 714, 720, 726, 746, 747, 748, 750, 768, 789, 799, 805, 809], "core": [150, 321, 323, 337, 341, 346, 432, 468, 768], "principl": 150, "oper": [150, 155, 156, 157, 158, 160, 321, 323, 327, 328, 331, 334, 335, 337, 338, 344, 345, 380, 389, 390, 399, 423, 482, 486, 502, 503, 505, 520, 544, 548, 557, 559, 564, 570, 580, 581, 582, 620, 628, 631, 633, 635, 636, 637, 644, 645, 646, 647, 648, 649, 650, 651, 653], "expos": [150, 341, 345, 564, 574], "almost": [150, 322, 335, 342, 344], "ident": [150, 152, 155, 156, 331, 333, 335, 343, 344, 358, 432, 466, 714, 727, 768], "uniqu": [150, 331, 335, 358, 432, 441, 442, 710, 711, 712, 713, 714, 720, 746, 747, 748, 749, 750], "syntax": [150, 151], "There": [150, 321, 322, 328, 331, 334, 335, 336, 341, 344, 358], "onli": [150, 155, 156, 320, 321, 322, 326, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 356, 358, 432, 472, 482, 536, 537, 539, 657, 665, 672, 688, 697, 714, 715, 716, 724, 725, 741, 742, 743, 754, 757, 768, 805, 806, 807, 808, 809, 810], "wai": [150, 151, 321, 332, 338, 343, 344, 345, 346, 358], "unsurprisingli": [150, 328], "fundament": [150, 335, 341], "consist": [150, 155, 156, 334, 338, 432, 464, 657, 662, 754, 755, 801, 802], "each": [150, 151, 152, 155, 156, 157, 158, 159, 160, 322, 323, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 346, 357, 358, 369, 372, 373, 375, 380, 391, 399, 406, 432, 441, 442, 453, 454, 455, 456, 457, 458, 459, 463, 476, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 628, 631, 633, 635, 636, 637, 644, 645, 646, 647, 648, 649, 650, 651, 652, 657, 658, 659, 660, 662, 665, 668, 669, 671, 674, 675, 688, 695, 699, 703, 704, 706, 708, 709, 714, 720, 727, 734, 735, 741, 744, 746, 747, 748, 754, 755, 768, 774, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812], "veri": [150, 151, 321, 322, 326, 328, 330, 331, 335, 337, 338, 339, 342, 344, 345, 346, 358, 768], "similar": [150, 326, 335, 336, 337, 344, 358, 482, 548, 644, 655, 789, 800], "convent": [150, 357, 657, 665, 754, 755], "those": [150, 155, 156, 321, 322, 323, 335, 341, 346, 380, 381, 628, 642, 657, 672, 675, 688, 689, 690], "introduc": [150, 335, 344, 688, 703, 746, 747], "2006": 150, "therefor": [150, 322, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 341, 343, 345, 358, 399, 408, 482, 486, 487, 489, 506, 517, 556, 557, 559, 561, 564, 586, 644, 647, 656, 688, 703, 732, 733, 754, 756, 763, 764, 766], "present": [150, 155, 156, 322, 329, 335, 336, 337, 338, 339, 341], "itself": [150, 321, 322, 335, 338, 339, 345, 357, 358, 564, 566, 714, 726], "cut": 150, "cloth": 150, "adher": [150, 151, 327, 329, 341, 346], "semant": [150, 341, 346, 482, 548], "up": [150, 151, 152, 320, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 357, 358], "hopefulli": [150, 151, 152, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 357], "paint": [150, 341], "pictur": [150, 341], "how": [150, 152, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 346, 357, 358, 768, 774, 789, 800, 801, 802], "pleas": [150, 151, 152, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 357, 768], "discuss": [150, 151, 152, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 357, 358, 768], "faq": [150, 151, 152, 341, 343, 344, 345, 346, 357], "reach": [150, 151, 152, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 357, 432, 456, 460, 464, 714, 726], "discord": [150, 151, 152, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 357, 768], "you": [150, 151, 152, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 344, 345, 346, 357, 358, 768, 774], "question": [150, 151, 152, 321, 322, 328, 330, 341, 343, 344, 345, 346, 357, 358, 768], "central": 151, "goal": [151, 323], "being": [151, 152, 155, 156, 321, 322, 328, 330, 333, 334, 335, 336, 337, 338, 339, 341, 344, 357, 358, 380, 381, 564, 609, 614, 746, 749, 768], "would": [151, 321, 322, 324, 325, 327, 328, 330, 332, 333, 334, 335, 338, 339, 340, 341, 343, 345, 346, 358, 369, 374, 432, 477, 768], "entir": [151, 152, 155, 156, 322, 328, 329, 330, 334, 335, 338, 343, 344, 345, 346, 358, 432, 476, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 789, 798], "forgiven": 151, "rais": [151, 155, 156, 322, 338, 341, 343, 399, 407, 482, 515, 547, 564, 570, 589, 598, 612, 619, 625, 657, 665, 667, 679, 688, 705, 706, 741, 744, 754, 756, 758, 763, 764, 766, 767, 801, 802, 805, 809], "eyebrow": 151, "somehow": 151, "pytorch": [151, 152, 323, 331, 336, 337, 338, 339, 341, 343, 346, 358, 628, 631, 633, 635, 636, 637, 768, 805, 806, 807, 808, 809, 810], "other": [151, 155, 156, 157, 158, 160, 321, 322, 326, 327, 328, 330, 331, 334, 335, 338, 341, 343, 345, 346, 356, 357, 358, 377, 378, 380, 381, 482, 516, 564, 565, 566, 628, 632, 734, 738, 746, 749, 754, 760, 762, 768], "strong": [151, 358], "industri": 151, "back": [151, 334, 340, 341, 343, 358, 768, 774, 801, 802, 805, 809], "momentum": 151, "won": [151, 152, 322, 346], "ad": [151, 318, 319, 321, 322, 323, 326, 327, 328, 330, 331, 333, 334, 335, 336, 338, 339, 341, 345, 358, 564, 618, 619, 657, 662, 688, 696, 811, 812], "just": [151, 152, 321, 322, 327, 328, 330, 331, 338, 341, 343, 344, 358, 754, 755, 789, 798], "make": [151, 152, 321, 322, 323, 326, 327, 328, 329, 330, 331, 334, 335, 336, 337, 338, 339, 341, 343, 344, 346, 432], "problem": [151, 322, 334, 343], "even": [151, 152, 321, 322, 327, 331, 336, 337, 339, 343, 344, 345, 346, 358, 482, 547, 549], "wors": 151, "rather": [151, 155, 156, 326, 327, 330, 335, 346, 358, 380, 381, 432, 476, 564, 600, 601, 603, 628, 634], "funni": 151, "comic": 151, "strip": 151, "easi": [151, 321, 322, 331, 335], "feasibl": 151, "space": [151, 380, 381, 389, 390, 564, 585], "unlik": [151, 328, 335, 432], "charger": 151, "charact": 151, "encod": [151, 344, 564, 585], "instant": [151, 768], "messag": [151, 322, 341, 343, 814, 815], "much": [151, 322, 326, 334, 335, 338, 341, 343, 344], "doe": [151, 155, 156, 322, 324, 325, 326, 327, 328, 330, 331, 332, 336, 338, 339, 341, 343, 344, 358, 482, 503, 505, 564, 598, 688, 704], "mandat": [151, 330, 338], "adopt": [151, 322, 334], "continu": [151, 152, 329, 330, 358], "own": [151, 152, 321, 327, 341, 358], "signatur": [151, 326, 327, 328, 335, 336, 337, 338, 339, 399, 408, 482, 487, 489, 503, 505, 506, 508, 517, 556, 557, 559, 688, 696, 703, 746, 747, 748, 751, 752, 754, 756], "replac": [151, 155, 156, 322, 324, 328, 330, 333, 335, 336, 337, 341, 343, 346, 358, 564, 610, 611, 688, 689, 690, 734, 735], "your": [151, 152, 320, 321, 323, 324, 326, 327, 344, 345, 358, 768], "10": [151, 153, 154, 155, 156, 157, 158, 159, 160, 209, 260, 264, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 324, 328, 335, 341, 343, 344, 380, 387, 390, 432, 482, 494, 495, 508, 520, 529, 556, 564, 576, 586, 609, 614, 628, 635, 644, 650, 657, 660, 661, 670, 677, 688, 697, 699, 704, 732, 733, 734, 735, 736, 741, 744, 746, 747, 754, 755, 756, 805, 807], "100": [151, 152, 160, 264, 306, 307, 344, 345, 346, 358, 482, 556, 768], "despit": [151, 335, 337], "distinct": [151, 327, 335, 338, 340, 746, 747, 748, 750, 768], "still": [151, 155, 156, 327, 330, 336, 343, 345, 358, 768], "believ": [151, 322], "share": [151, 155, 156, 328, 330, 331, 332, 335, 341, 399, 427], "bring": [151, 341, 342], "benefit": [151, 152, 321, 322, 334, 335, 338, 343, 344, 358], "unrel": [151, 322], "what": [151, 152, 322, 325, 327, 328, 333, 335, 339, 340, 341, 343, 344, 345, 346, 357, 358, 768], "again": [151, 152, 322, 326, 328, 335, 338, 344, 346, 358], "contrari": 151, "bumpi": 151, "road": 151, "allud": [151, 344], "most": [151, 155, 156, 321, 322, 326, 330, 331, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 358, 657, 662], "technolog": 151, "sector": [151, 482, 485, 490, 493], "full": [151, 152, 157, 158, 322, 327, 336, 339, 341, 358, 380, 399, 415, 482, 520, 644, 650, 657, 672, 674, 675, 732, 733], "success": 151, "reason": [151, 322, 326, 328, 331, 334, 335, 336, 338, 341, 343, 482, 548], "build": [151, 320, 321, 331, 340, 342, 345, 346, 358, 746, 747, 748, 750, 768, 789, 800, 801, 802], "custom": [151, 345], "comput": [151, 152, 155, 156, 321, 331, 335, 341, 344, 358, 432, 476, 482, 486, 494, 499, 501, 503, 505, 510, 511, 514, 519, 520, 524, 525, 535, 536, 537, 539, 540, 543, 544, 545, 564, 572, 573, 576, 577, 628, 630, 631, 632, 633, 635, 636, 637, 639, 641, 644, 645, 646, 647, 648, 649, 650, 651, 653, 655, 657, 658, 659, 662, 663, 664, 665, 666, 672, 673, 674, 675, 679, 680, 682, 683, 684, 686, 687, 714, 720, 746, 747, 748, 750, 754, 755, 756, 757, 758, 759, 760, 761, 762], "thank": [151, 344], "interoper": 151, "compon": [151, 341], "bio": [151, 321], "hardwar": [151, 321], "initi": [151, 155, 156, 157, 158, 159, 322, 332, 336, 337, 432, 644, 654, 782, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 805, 809], "pcie": 151, "interfac": [151, 346, 358], "motherboard": 151, "raid": 151, "storag": [151, 344], "virtual": [151, 322, 324], "bluetooth": 151, "wireless": 151, "exchang": 151, "btx": 151, "factor": [151, 432, 441, 474, 475, 476, 628, 630, 631, 635, 636, 644, 645, 646, 647, 648, 649, 650, 651, 657, 658, 789, 790, 791, 792, 793, 794, 795, 796, 805, 806, 807, 808], "sata": 151, "connect": [151, 321, 345, 346, 789, 799, 800], "host": [151, 358], "bu": 151, "adapt": [151, 628, 636, 805, 808], "html": [151, 324, 327, 399, 408, 482, 487, 489, 503, 505, 506, 508, 517, 556, 557, 559, 688, 696, 703, 746, 747, 748, 751, 752, 754, 756], "enabl": [151, 155, 156, 157, 158, 159, 321, 322, 330, 331, 334, 335, 338, 340, 341, 342, 344, 346, 358], "anyon": [151, 320, 358], "websit": 151, "tcp": 151, "ip": 151, "node": [151, 155, 156, 335, 714, 715, 724, 725], "commun": [151, 320, 322, 323, 358, 768, 774], "network": [151, 331, 335, 341, 345, 357, 644, 653, 768, 775, 789, 801, 802], "smtp": 151, "possibl": [151, 320, 321, 322, 323, 327, 328, 330, 335, 336, 338, 341, 344, 357, 358, 564, 604, 622, 754, 756, 758], "send": 151, "gmail": 151, "outlook": 151, "pop": 151, "email": 151, "ieee": [151, 379, 399, 415, 482, 486, 516, 543, 548, 556], "754": [151, 379, 399, 415, 482, 486, 516, 543, 548, 556], "allow": [151, 341, 358, 380, 389, 390, 564, 604, 801, 802], "calcul": [151, 155, 156, 157, 158, 159, 327, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 507, 508, 509, 515, 516, 526, 528, 529, 530, 531, 533, 534, 543, 547, 551, 554, 555, 556, 560, 561, 562, 682, 683, 684, 686, 687, 754, 756, 757, 758, 759, 760, 761, 762], "live": [151, 152], "depend": [151, 321, 322, 327, 333, 335, 336, 341, 358, 399, 405, 482, 483, 484, 485, 487, 489, 490, 491, 492, 507, 508, 515, 516, 526, 528, 529, 530, 531, 533, 547, 551, 554, 555, 561, 562, 657, 662, 672, 674, 675, 741, 745, 751, 752, 753], "did": [151, 323, 346], "aris": [151, 358], "until": [151, 322, 358, 768], "substanti": [151, 322, 330, 334], "innov": 151, "growth": 151, "usag": [151, 341, 432, 476], "relev": [151, 321, 323, 328, 335, 336, 344, 805, 806, 807, 808, 809, 810], "area": [151, 338, 356, 482, 485, 490, 493, 768], "necess": 151, "parti": [151, 358], "could": [151, 152, 321, 322, 328, 330, 335, 336, 338, 341, 343, 344, 345, 746, 747, 748, 750], "easili": [151, 322, 344, 345, 346, 358, 768], "engag": [151, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "regard": [151, 335, 432], "effect": [151, 327, 334, 335, 339, 358, 380, 391, 628, 637, 754, 760, 762], "2015": 151, "sinc": [151, 321, 322, 358], "alongsid": 151, "machin": [151, 321, 331, 357, 399, 415, 418, 482, 519, 657, 668, 671], "given": [151, 152, 155, 156, 321, 322, 323, 324, 326, 327, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 341, 343, 345, 346, 357, 380, 381, 383, 389, 390, 432, 465, 471, 473, 474, 475, 476, 478, 481, 564, 576, 577, 587, 610, 611, 626, 628, 630, 631, 633, 635, 636, 637, 644, 645, 646, 647, 648, 649, 650, 651, 657, 681, 682, 683, 684, 686, 687, 688, 689, 690, 696, 697, 699, 703, 704, 708, 714, 721, 722, 734, 736, 737, 738, 740, 751, 753, 778, 779], "frame": [151, 357], "matur": [151, 358], "state": [151, 327, 339, 340, 341, 342, 344, 357, 482, 543, 644, 654, 768, 775, 776, 777, 778, 779, 780, 782, 783, 785, 786, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812], "than": [151, 155, 156, 322, 326, 328, 330, 335, 338, 341, 344, 345, 346, 358, 380, 381, 399, 415, 432, 476, 482, 484, 485, 487, 489, 492, 496, 498, 502, 506, 517, 518, 526, 528, 529, 531, 533, 541, 547, 548, 550, 556, 563, 564, 600, 601, 603, 628, 634, 657, 659, 665, 668, 671, 680, 688, 689, 690, 697, 705, 734, 738, 746, 747, 748, 750, 754, 759, 760, 761, 762], "preced": [151, 345], "mention": [151, 321, 322, 328, 331, 338, 339], "aros": 151, "70": [151, 657, 670, 754, 755], "80": [151, 657, 670, 754, 755], "90": [151, 160, 264, 306, 307, 482, 503, 505, 549, 657, 670, 754, 755], "effort": [151, 320, 358], "stage": [151, 320, 322, 324, 325, 768], "complet": [151, 155, 156, 322, 323, 334, 335, 343, 344, 657, 672], "natur": [151, 328, 334, 335, 357, 482, 515, 526, 528, 530, 657, 673], "like": [151, 321, 322, 324, 325, 326, 327, 328, 330, 337, 338, 339, 340, 341, 343, 344, 345, 346, 357, 358, 628, 634, 734, 738, 768], "certainli": 151, "mission": [151, 768], "creat": [151, 155, 156, 320, 321, 322, 324, 336, 337, 338, 341, 342, 345, 356, 357, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 397, 398, 432, 441, 442, 564, 586, 587, 607, 610, 611, 622, 628, 641, 734, 735, 736, 738, 768, 774, 778, 779, 780, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812], "At": [151, 323], "process": [151, 152, 320, 321, 322, 324, 331, 335, 341, 346, 432, 441, 442, 471, 481], "ourselv": 151, "lead": [151, 152, 155, 156, 157, 158, 159, 358, 657, 672, 675], "quansight": 151, "compani": 151, "made": [151, 322, 323, 335, 338, 341, 343], "organ": [151, 326, 331, 334, 335], "panda": 151, "scipi": 151, "conda": [151, 321, 324], "dask": [151, 746, 747, 748, 750], "apach": 151, "onnx": 151, "scikit": 151, "jupyt": 151, "aw": 151, "cupi": 151, "net": [151, 152, 341, 346], "sympi": 151, "rai": [151, 482, 492], "modin": 151, "spyder": 151, "includ": [151, 155, 156, 322, 323, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 357, 358, 380, 381, 382, 392, 564, 593, 627, 657, 680, 714, 715, 734, 738, 741, 743, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 771, 773, 789, 799, 800, 803, 804], "member": [151, 322], "googl": [151, 768], "octoml": 151, "einop": [151, 155, 156, 564, 580, 581, 582], "further": [151, 152, 322, 324, 328, 334, 340, 344, 345, 768], "sponsor": 151, "lg": 151, "electron": 151, "microsoft": 151, "d": [151, 152, 160, 264, 306, 307, 320, 321, 325, 335, 344, 564, 569, 575, 644, 645, 646, 647, 648, 649, 650, 651, 657, 661, 670, 768, 774], "shaw": 151, "intel": 151, "togeth": [151, 155, 156, 334, 335, 345, 346, 358, 811, 812], "major": [151, 336, 337, 358, 741, 744], "involv": [151, 320, 324, 325, 336, 346, 399, 423, 482, 486, 543, 768, 774], "anoth": [151, 155, 156, 321, 322, 331, 335, 336, 343, 346, 380, 386, 399, 406, 408], "promis": 151, "pursuit": 151, "unif": [151, 320, 343, 768, 774], "clearli": [151, 323, 328], "lot": [151, 152, 333, 343, 358], "thought": [151, 321, 322, 339], "care": [151, 322, 346], "attent": [151, 322, 334, 335, 644, 655, 656, 789, 800], "gone": [151, 340], "simplifi": [151, 341, 342, 343, 345], "compat": [151, 339, 358, 399, 407, 482, 486, 492, 494, 496, 498, 499, 501, 502, 503, 505, 509, 510, 518, 520, 524, 525, 534, 535, 537, 539, 540, 543, 545, 547, 548, 560, 657, 668, 671, 674, 677, 679, 680, 688, 700, 702, 741, 743, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768], "excit": [151, 320, 325, 768], "complianc": 151, "hope": [151, 358], "due": [151, 321, 335, 338, 482, 543], "suit": [151, 321, 322, 325, 329, 330, 344, 357], "some": [151, 152, 155, 156, 321, 322, 323, 326, 327, 328, 331, 334, 335, 336, 337, 338, 339, 342, 343, 344, 345, 357, 358, 482, 516, 628, 630, 631, 633, 635, 636, 637, 642, 644, 652, 768, 789, 797], "motiv": [151, 343], "great": [151, 152, 330, 341, 343], "convinc": 151, "celebr": 151, "encourag": [151, 357, 358, 768, 774], "foundat": 151, "point": [152, 322, 327, 328, 334, 338, 339, 341, 343, 344, 357, 379, 380, 381, 383, 385, 387, 393, 397, 399, 405, 415, 420, 423, 482, 484, 485, 486, 487, 489, 490, 491, 492, 493, 503, 505, 506, 507, 508, 509, 515, 516, 517, 526, 528, 529, 531, 533, 534, 543, 547, 548, 549, 551, 554, 555, 556, 561, 562, 563, 657, 658, 660, 662, 663, 664, 668, 671, 672, 674, 675, 680, 746, 747, 748, 750, 754, 756, 757, 758, 759, 760, 761, 762], "mai": [152, 321, 322, 335, 343, 345, 380, 381, 386, 432, 477, 482, 510, 520, 525, 536, 537, 539, 564, 579, 746, 747, 748, 750, 751, 752, 753, 754, 756, 757, 758], "ask": [152, 341, 343, 358, 768], "perfectli": 152, "happi": [152, 321, 358], "abund": 152, "better": [152, 322, 325, 340, 343, 344, 345], "ll": [152, 320, 322, 328, 335, 338, 344], "give": [152, 321, 322, 325, 327, 328, 332, 339, 343, 688, 700, 702], "two": [152, 157, 158, 160, 327, 328, 330, 334, 335, 340, 344, 346, 380, 381, 385, 391, 395, 396, 399, 422, 427, 482, 502, 549, 564, 568, 657, 658, 660, 661, 662, 663, 664, 665, 666, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 688, 707, 746, 747, 748, 749, 750, 768], "streamlin": 152, "workflow": [152, 322, 344, 356, 768], "save": [152, 155, 156, 358, 564, 615, 801, 802], "week": [152, 322, 323, 768], "let": [152, 327, 328, 335, 336, 337, 341, 343, 344, 345, 346, 754, 757, 760, 761, 762, 768], "sai": [152, 321, 333, 343], "deepmind": 152, "releas": [152, 321, 323, 768], "awesom": 152, "paper": 152, "love": 152, "choic": [152, 321, 338, 344, 754, 760, 762], "perceiverio": 152, "happen": [152, 321, 322, 344], "slew": 152, "rush": 152, "f": [152, 324, 325, 335, 341, 344, 346, 482, 519, 564, 595, 599], "g": [152, 325, 335, 358, 399, 404, 423, 432, 448, 734, 737, 738, 746, 747, 748, 750, 754, 756, 758, 759, 761], "inevit": 152, "deviat": [152, 732, 733, 734, 737, 754, 760, 803, 804], "origin": [152, 155, 156, 157, 158, 159, 332, 333, 336, 341, 343, 482, 492, 657, 666, 688, 700, 702, 703], "often": [152, 331, 358], "erron": 152, "train": [152, 331, 335, 337, 344, 345, 346, 356, 357, 358, 628, 630, 631, 635, 768], "poor": 152, "converg": 152, "perform": [152, 155, 156, 326, 328, 330, 331, 332, 334, 335, 337, 338, 339, 341, 344, 358, 369, 374, 380, 389, 390, 432, 564, 576, 580, 581, 582, 596, 597, 598, 628, 631, 633, 635, 636, 637, 644, 652, 654, 657, 675, 710, 711, 712, 713, 714, 721, 722, 763, 764, 766, 767], "issu": [152, 320, 323, 341, 343, 345, 358], "publish": [152, 358], "manag": [152, 320, 338, 358, 432], "get": [152, 155, 156, 320, 321, 323, 325, 331, 336, 337, 338, 341, 342, 343, 344, 345, 399, 413, 414, 415, 418, 432, 441, 442, 451, 452, 465, 466, 471, 475, 478, 481, 564, 567, 588, 589, 590, 609, 768, 774, 789, 798], "work": [152, 321, 322, 323, 325, 330, 335, 336, 337, 340, 341, 342, 343, 345, 346, 768, 774], "repositori": [152, 321, 322, 324, 329], "pull": [152, 320, 321, 324, 326, 358], "request": [152, 320, 326, 432, 468], "confus": [152, 338], "do": [152, 155, 156, 321, 322, 323, 326, 327, 328, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 343, 344, 345, 346, 358, 482, 548, 564, 598, 628, 634, 642, 714, 715, 724, 725, 726], "expect": [152, 358, 564, 567, 768], "codebas": [152, 320, 325, 326, 338, 340, 432, 474, 475, 768], "total": [152, 155, 156, 157, 158, 159, 320, 322, 328, 330, 337, 344, 345, 358, 432, 478, 741, 744, 754, 760, 762], "hour": 152, "spent": 152, "spin": 152, "off": [152, 340, 657, 661, 678], "test": [152, 321, 323, 325, 328, 358, 399, 420, 421, 482, 521, 522, 523, 763, 764, 766, 767], "error": [152, 155, 156, 321, 330, 334, 337, 339, 343, 358, 369, 370, 432, 482, 511, 514, 754, 756, 758, 801, 802, 805, 809], "address": [152, 322, 323, 334, 341], "sake": 152, "singl": [152, 155, 156, 322, 326, 328, 330, 331, 333, 335, 338, 339, 341, 344, 345, 346, 358, 432, 441, 442, 461, 462, 463, 464, 564, 624, 627, 734, 737, 738, 746, 747], "multipl": [152, 155, 156, 160, 167, 251, 252, 256, 264, 266, 288, 289, 290, 291, 302, 303, 306, 307, 322, 328, 331, 335, 358, 482, 543, 564, 565, 604, 657, 664, 688, 689, 690, 691, 703, 704, 732, 733, 741, 742, 743, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 789, 799], "line": [152, 321, 328, 334, 342, 343, 344, 345, 356, 768, 774], "directli": [152, 322, 326, 327, 331, 334, 335, 336, 337, 338, 339, 341, 343, 345, 346, 357, 358, 714, 726], "graph": [152, 331, 335, 342, 358, 628, 631, 633, 635, 636, 637, 746, 747, 748, 750, 801, 802], "guarante": [152, 334, 358, 746, 747], "turn": [152, 328, 335], "step": [152, 155, 156, 160, 164, 209, 250, 260, 292, 293, 321, 322, 324, 328, 332, 334, 335, 336, 337, 341, 344, 345, 346, 357, 380, 381, 389, 390, 432, 628, 630, 631, 633, 635, 636, 637, 710, 711, 712, 713, 768, 805, 806, 807, 808, 809, 810], "take": [152, 320, 321, 322, 327, 328, 330, 335, 336, 337, 341, 343, 345, 346, 358, 482, 503, 505, 768, 774], "few": [152, 322, 323, 331, 335, 336, 337, 338, 342, 343, 344, 345, 356, 768, 774], "second": [152, 321, 328, 338, 343, 399, 422, 427, 432, 463, 482, 486, 494, 496, 498, 499, 501, 502, 503, 505, 510, 518, 520, 524, 525, 534, 535, 537, 539, 540, 543, 545, 547, 560, 564, 568, 609, 614, 628, 630, 631, 635, 657, 659, 661, 662, 665, 670, 672, 675, 677, 679, 688, 706, 707, 710, 712, 746, 747, 748, 805, 806, 807], "automat": [152, 321, 322, 331, 335, 339, 340, 341, 342, 345, 346, 768], "everyon": [152, 320, 322, 358], "regardless": [152, 155, 156, 320, 343, 346, 377, 378], "wouldn": 152, "nice": [152, 330], "write": [152, 155, 156, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 338, 341, 343, 346, 369, 372, 432, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 515, 516, 517, 521, 522, 523, 524, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 543, 544, 545, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 564, 573, 577, 584, 586, 682, 683, 684, 686, 687, 688, 689, 690, 696, 697, 698, 699, 703, 705, 706, 707, 732, 733, 734, 736, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767], "onc": [152, 321, 322, 335, 336, 337, 341, 344, 358, 432, 476, 657, 664, 675, 734, 735], "know": [152, 746, 747, 748, 750], "among": [152, 155, 156, 330], "frantic": 152, "port": 152, "lucid": 152, "honk": 152, "improv": [152, 322, 331, 341], "understand": [152, 321, 322, 323, 324, 325, 327, 328, 329, 339, 340], "pattern": [152, 155, 156, 327, 336, 564, 580, 581, 582], "hasn": 152, "now": [152, 155, 156, 321, 324, 326, 333, 335, 336, 339, 343, 344, 346, 357, 358, 789, 800, 801, 802], "spend": 152, "torchvis": 152, "probabl": [152, 644, 652, 734, 735, 789, 797], "sonnet": 152, "about": [152, 321, 322, 329, 340, 341, 345, 346, 358, 399, 415, 418], "next": [152, 321, 322, 323, 324, 327, 328, 332, 333, 343, 344, 399, 415, 768, 801, 802, 805, 806, 807, 808, 809, 810], "everyth": [152, 322, 323, 342, 358], "zero": [152, 155, 156, 157, 158, 328, 334, 335, 336, 337, 339, 341, 344, 345, 369, 371, 372, 380, 383, 385, 391, 395, 396, 398, 399, 405, 482, 486, 487, 489, 496, 498, 508, 516, 517, 536, 537, 539, 541, 542, 543, 544, 547, 548, 549, 556, 557, 559, 561, 562, 564, 576, 607, 610, 611, 628, 630, 631, 635, 636, 644, 652, 657, 660, 665, 668, 671, 679, 680, 688, 696, 697, 699, 703, 709, 732, 733, 734, 736, 741, 742, 743, 744, 746, 747, 748, 750, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 780, 789, 790, 791, 792, 793, 794, 795, 796, 797, 799, 805, 806, 807, 808], "need": [152, 321, 322, 323, 324, 326, 327, 328, 329, 331, 334, 335, 338, 341, 343, 344, 357, 358, 564, 572, 573, 688, 689, 690, 696], "said": 152, "high": [152, 155, 156, 160, 235, 264, 265, 306, 307, 323, 344, 734, 736, 738], "level": [152, 320, 323, 331, 340, 341, 344, 345, 346, 358], "optim": [152, 338, 342, 344, 346, 357, 432, 628, 631, 633, 635, 636, 637, 710, 711, 712, 713, 768, 806, 807, 808, 810], "trainer": [152, 356, 358, 768], "statu": 152, "quo": 152, "kera": 152, "dopamin": 152, "ignit": 152, "catalyst": 152, "lightn": 152, "fastai": 152, "haiku": [152, 346], "flax": [152, 346, 358], "trax": [152, 346], "objax": [152, 346], "idea": [152, 357], "fulli": [152, 334, 335, 339, 341, 342, 343, 344, 345, 346, 358, 789, 799, 800], "offer": [152, 345], "containerwithactiv": [153, 157, 158], "dict_in": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "queue": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 344, 432, 441, 442, 564, 609, 614], "queue_load_s": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "container_combine_method": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "list_join": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "queue_timeout": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 564], "print_limit": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "key_length_limit": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "print_ind": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "print_line_spac": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "ivyh": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "default_key_color": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "green": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 321, 322, 814, 815], "keyword_color_dict": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "rebuild_child_contain": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "types_to_iteratively_nest": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "alphabetical_kei": [153, 154, 155, 156, 157, 158, 159, 160, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "containerbas": [153, 154, 155, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 335], "__getitem__": [155, 156, 335], "queri": [155, 156, 335, 336, 343, 432, 465, 475, 644, 655, 656, 789, 800], "slice": [155, 156, 564, 586, 587, 714, 723], "chain": [155, 156, 334, 335, 345, 346, 358, 710, 711, 712, 714, 727, 811, 812], "element": [155, 156, 327, 341, 346, 369, 370, 371, 372, 373, 374, 375, 376, 380, 381, 387, 388, 395, 396, 432, 455, 459, 463, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 568, 569, 572, 573, 576, 577, 584, 594, 623, 624, 644, 652, 657, 659, 662, 665, 672, 675, 688, 689, 690, 697, 699, 703, 704, 705, 734, 735, 741, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 789, 797], "represent": [155, 156, 157, 158, 159, 357, 379, 399, 403, 404, 415, 418, 432, 448, 449, 482, 483, 486, 494, 499, 501, 503, 505, 540, 543, 564, 566, 617, 622], "dictionari": [155, 156, 157, 158, 159, 344, 358, 432, 475], "around": [155, 156, 157, 158, 159, 322, 331, 334, 339, 343, 358], "sequenc": [155, 156, 157, 158, 159, 328, 336, 357, 432, 441, 442, 564, 569, 604, 688, 704, 706, 734, 736, 754, 756, 789, 798, 803, 804, 811, 812], "multiprocess": [155, 156, 157, 158, 159, 344, 358, 432, 441, 564], "asynchron": [155, 156, 157, 158, 159], "wait": [155, 156, 157, 158, 159, 322], "size": [155, 156, 157, 158, 159, 343, 344, 380, 389, 390, 432, 474, 475, 476, 564, 610, 616, 644, 656, 657, 661, 666, 670, 672, 675, 679, 688, 696, 703, 704, 705, 734, 735, 737, 738, 741, 742, 744, 763, 764, 766, 767, 789, 790, 791], "dimens": [155, 156, 157, 158, 159, 328, 341, 344, 369, 374, 380, 395, 396, 432, 463, 564, 580, 581, 582, 585, 591, 607, 626, 644, 645, 646, 647, 648, 649, 650, 651, 654, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 671, 672, 674, 675, 676, 678, 679, 680, 682, 684, 686, 687, 688, 692, 694, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 710, 711, 712, 713, 734, 740, 741, 742, 743, 744, 746, 747, 748, 750, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 789, 790, 791, 792, 793, 794, 795, 796, 799, 800], "combin": [155, 156, 157, 158, 159, 322, 328, 330, 331, 334, 335, 346, 657, 659], "arriv": [155, 156, 157, 158, 159], "timeout": [155, 156, 157, 158, 159, 432, 441, 442, 564, 609, 614], "limit": [155, 156, 157, 158, 159, 322, 328, 330, 341, 344, 346, 358, 399, 415, 418, 564, 572, 573, 688, 689, 690], "maximum": [155, 156, 157, 158, 159, 328, 341, 344, 346, 432, 456, 460, 464, 476, 482, 564, 572, 573, 585, 628, 635, 688, 689, 690, 714, 726, 741, 742, 754, 756, 758, 768], "length": [155, 156, 157, 158, 159, 344, 380, 381, 391, 657, 675, 676, 688, 700, 702], "whitespac": [155, 156, 157, 158, 159], "indent": [155, 156, 157, 158, 159, 344], "extra": [155, 156, 157, 158, 159, 328, 333, 334, 341, 628, 632], "newlin": [155, 156, 157, 158, 159, 327], "handl": [155, 156, 157, 158, 159, 325, 330, 331, 333, 335, 336, 337, 338, 339, 345, 358, 377, 378, 432, 448, 449, 450, 451, 452, 466, 470, 471, 478, 481, 628, 631, 633, 635, 636, 637, 805, 806, 807, 808, 809, 810], "result": [155, 156, 157, 158, 159, 326, 327, 328, 330, 334, 335, 336, 338, 339, 344, 358, 369, 372, 380, 381, 399, 423, 432, 441, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 543, 544, 545, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 573, 577, 584, 586, 610, 611, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 661, 666, 675, 680, 682, 683, 684, 686, 687, 688, 689, 690, 696, 697, 698, 699, 703, 705, 706, 707, 714, 727, 732, 733, 734, 736, 741, 742, 743, 746, 747, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768], "color": [155, 156, 157, 158, 159, 814, 815], "termin": [155, 156, 157, 158, 159, 321, 322, 324, 335, 341, 344], "map": [155, 156, 157, 158, 159, 330, 331, 335, 339, 344, 357, 358, 432, 441, 714, 721, 722, 726, 727, 789, 800], "termcolor": [155, 156, 157, 158, 159], "rebuild": [155, 156, 157, 158, 159], "found": [155, 156, 157, 158, 159, 321, 322, 327, 334, 335, 432, 466], "constructor": [155, 156, 157, 158, 159, 336, 337, 343, 564, 567, 811, 812], "param": [155, 156, 157, 158, 159, 341, 346, 564, 566, 586, 587], "kept": [155, 156, 157, 158, 159, 322, 338, 710, 711, 712], "structur": [155, 156, 157, 158, 159, 324, 326, 331, 334, 335, 344, 345, 564, 574, 714, 727], "alphabet": [155, 156, 157, 158, 159], "preserv": [155, 156, 157, 158, 159, 346, 358, 628, 639, 688, 697], "__setitem__": [155, 156, 334, 335, 343], "val": [155, 156, 338, 343, 564, 596, 597, 598, 612, 613], "after": [155, 156, 328, 335, 336, 340, 399, 427, 482, 556, 628, 631, 632, 633, 635, 636, 637, 732, 733, 805, 806, 807, 808, 809, 810], "updat": [155, 156, 321, 322, 323, 324, 325, 328, 329, 333, 334, 335, 336, 339, 341, 343, 344, 346, 358, 432, 441, 564, 598, 610, 611, 628, 630, 631, 633, 635, 636, 637, 644, 654, 710, 711, 712, 714, 721, 722, 730, 731, 778, 779, 805, 806, 807, 808, 809, 810], "all_fals": [155, 156], "assert_is_bool": [155, 156], "key_chain": [155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 511, 513, 551, 553, 689, 691, 714, 727], "to_appli": [155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 511, 513, 551, 553, 689, 691, 714, 727], "prune_unappli": [155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 288, 289, 290, 291, 292, 293, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 511, 513, 551, 553, 689, 691, 714, 727], "map_sequ": [155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 176, 177, 179, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 203, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 220, 224, 225, 226, 227, 228, 230, 231, 232, 234, 235, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 288, 289, 290, 291, 292, 293, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 511, 513, 551, 553, 689, 691], "entri": [155, 156, 380, 389, 390, 688, 704, 714, 727], "boolean": [155, 156, 335, 380, 387, 399, 405, 419, 431, 432, 467, 479, 482, 494, 495, 499, 501, 503, 505, 535, 536, 537, 539, 540, 564, 565, 568, 569, 593, 594, 595, 599, 600, 601, 602, 603, 620, 627, 628, 634, 710, 711, 712, 714, 724, 754, 758], "evalu": [155, 156, 335, 482, 515, 516, 526, 528, 529, 530, 531, 533, 544, 550, 557, 559, 714, 715, 724, 725, 763, 764, 766, 767], "assert": [155, 156, 343, 344, 564, 570], "skip": [155, 156, 324, 330, 714, 727], "prune": [155, 156, 714, 727, 728, 729], "all_key_chain": [155, 156], "include_empti": [155, 156], "all_tru": [155, 156, 335, 344], "arrays_as_list": [155, 156], "intermedi": [155, 156], "as_arrai": [155, 156, 564, 591, 616], "as_bool": [155, 156], "as_on": [155, 156], "ones": [155, 156, 157, 158, 330, 341, 343, 344, 380, 385, 394, 482, 506, 564, 607, 768], "sub": [155, 156, 322, 323, 325, 330, 335, 343, 344, 345, 432, 457, 458, 461, 462, 463, 464, 657, 661, 688, 704, 710, 711, 712, 713, 768], "fill": [155, 156, 380, 383, 387, 388, 393, 394, 397, 398, 734, 736], "as_random_uniform": [155, 156], "low": [155, 156, 160, 235, 264, 265, 306, 307, 341, 734, 736, 738], "uniform": [155, 156, 345, 734, 735, 736, 738, 780, 782, 783, 786, 787], "lower": [155, 156, 322, 328, 341, 358, 380, 385, 395, 482, 541, 657, 658, 734, 738], "boundari": [155, 156, 734, 738], "output": [155, 156, 321, 325, 326, 327, 328, 330, 331, 334, 335, 337, 338, 339, 341, 343, 345, 346, 358, 369, 372, 380, 381, 383, 384, 385, 387, 388, 391, 393, 394, 397, 398, 432, 441, 442, 476, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 515, 516, 517, 521, 522, 523, 524, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 543, 544, 545, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 564, 571, 573, 577, 584, 586, 628, 632, 644, 646, 648, 650, 652, 654, 655, 656, 657, 678, 682, 683, 684, 686, 687, 688, 689, 690, 696, 697, 698, 699, 703, 705, 706, 707, 708, 714, 727, 732, 733, 734, 736, 737, 738, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 789, 790, 791, 792, 793, 794, 795, 797, 798, 799, 800], "interv": [155, 156, 341, 346, 380, 381, 389, 390, 657, 679, 688, 689, 690, 706, 734, 736, 738, 763, 764, 766, 767], "upper": [155, 156, 380, 385, 396, 657, 658, 672, 734, 738], "as_vari": [155, 156], "as_zero": [155, 156], "assert_contains_sub_contain": [155, 156], "sub_cont": [155, 156], "partial": [155, 156, 322, 801, 802], "except": [155, 156, 327, 334, 338, 343, 358, 399, 407, 564, 570, 579, 598, 625, 657, 671, 688, 692, 694, 706, 741, 744, 763, 764, 766, 767], "diff": [155, 156, 335, 344], "screen": [155, 156, 344], "assert_contains_sub_structur": [155, 156], "check_shap": [155, 156], "static": [155, 156, 160, 251, 252, 255, 256, 264, 266, 270, 271, 284, 285, 288, 289, 290, 291, 292, 293, 300, 301, 302, 303, 306, 307, 312, 313, 318, 319, 323, 327, 328, 331, 358, 377, 378, 689, 691], "assert_ident": [155, 156], "check_typ": [155, 156], "same_arrai": [155, 156, 344], "arrays_equ": [155, 156, 157, 158, 564], "datatyp": [155, 156, 380, 382, 392, 399, 409, 420, 421, 422], "exact": [155, 156, 322, 341, 746, 747], "assert_identical_structur": [155, 156], "at_key_chain": [155, 156], "ignore_key_error": [155, 156], "ignore_non": [155, 156], "at_kei": [155, 156], "ignor": [155, 156, 328, 358, 380, 391, 714, 725, 805, 809], "substr": [155, 156], "access": [155, 156, 322, 324, 336], "clip_min": [155, 156], "clip_max": [155, 156], "minimum": [155, 156, 341, 346, 432, 482, 483, 564, 589, 590, 612, 613, 618, 619, 688, 689, 690, 741, 743, 754, 756, 758, 768], "config": [155, 156, 344, 714, 727], "right": [155, 156, 320, 321, 322, 325, 328, 344, 482, 496, 498, 502, 657, 675], "duplic": [155, 156, 327, 332, 333, 343, 345], "compar": [155, 156, 330, 344, 564, 565, 568, 569, 746, 747, 748, 750, 751, 752, 753], "configur": [155, 156, 321, 322, 324, 336, 432, 475, 714, 727], "container_rightmost": [155, 156], "common_key_chain": [155, 156, 335], "across": [155, 156, 323, 328, 330, 331, 335, 336, 339, 432, 441, 442, 453, 454, 456, 457, 458, 459, 460, 464, 474, 475, 564, 568, 569, 714, 720, 741, 743], "properti": [155, 156, 328, 330, 331, 335, 343, 344, 345, 432, 444, 801, 802, 805, 806, 807, 808, 810], "contains_sub_contain": [155, 156], "match": [155, 156, 335, 399, 405, 482, 548, 564, 604], "contains_sub_structur": [155, 156], "copi": [155, 156, 324, 327, 332, 336, 341, 343, 344, 357, 358, 380, 382, 386, 399, 405, 432, 477, 564, 575, 623, 624, 688, 700, 702, 714, 716, 751, 753], "create_if_abs": [155, 156], "inplac": [155, 156, 160, 164, 203, 209, 210, 230, 250, 259, 260, 261, 263, 292, 293, 325, 328, 333, 334, 339, 343, 345, 564, 570, 595, 598, 599, 620, 628, 631, 633, 635, 636, 637, 778, 779, 805, 806, 807, 808, 809, 810], "correspond": [155, 156, 157, 158, 160, 322, 327, 328, 329, 331, 334, 335, 336, 339, 399, 406, 482, 492, 547, 657, 659, 662, 674, 688, 692, 694, 703, 734, 735, 741, 742, 743, 746, 747, 748, 750, 754, 759, 760, 761, 762], "alreadi": [155, 156, 321, 322, 332, 335, 339, 343, 358, 432, 482, 506, 517, 543, 549, 563, 657, 670, 768], "noth": [155, 156, 322], "cutoff_at_depth": [155, 156], "depth_cutoff": [155, 156], "summari": [155, 156, 322, 399, 410, 411, 412, 424, 425, 426, 432, 445, 446, 564, 574, 578, 592, 628, 638, 643], "cutoff_at_height": [155, 156], "height_cutoff": [155, 156], "deep_copi": [155, 156, 344], "intern": [155, 156, 327, 334, 335, 337, 338, 432, 628, 642, 714, 715, 724, 725, 780, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 811, 812], "dev": [155, 156, 157, 159, 160, 172, 321, 331, 337, 341, 343, 345, 432, 441, 466], "belong": [155, 156, 345], "dev_clon": [155, 156, 432], "clone": [155, 156, 322, 324, 432, 453, 454, 455, 456], "dev_dist": [155, 156, 432], "distribut": [155, 156, 323, 337, 358, 432, 453, 457, 458, 459, 460, 644, 652, 682, 683, 684, 686, 687, 734, 735, 736, 737, 738, 789, 797, 801, 802], "along": [155, 156, 326, 338, 380, 389, 390, 432, 457, 458, 459, 460, 461, 462, 463, 464, 476, 564, 576, 577, 586, 626, 657, 666, 678, 679, 680, 682, 684, 686, 687, 688, 692, 694, 697, 699, 703, 704, 706, 708, 710, 711, 712, 713, 734, 740, 741, 742, 743, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767], "split": [155, 156, 320, 322, 340, 341, 358, 432, 441, 457, 458, 459, 460, 474, 475, 476, 564, 604, 688, 768], "dev_str": [155, 156], "mode": [155, 156, 321, 328, 335, 358, 377, 378, 432, 461, 462, 463, 464, 476, 482, 486, 543, 657, 672], "diff_kei": [155, 156], "detect_key_diff": [155, 156], "detect_value_diff": [155, 156], "detect_shape_diff": [155, 156], "thei": [155, 156, 323, 325, 326, 328, 331, 333, 335, 336, 337, 338, 343, 344, 345, 346, 358, 399, 422, 710, 711, 712, 734, 735, 768, 811, 812], "treat": [155, 156, 342, 346, 377, 378], "detect": [155, 156, 339, 344, 345, 714, 715, 725], "without": [155, 156, 322, 326, 331, 334, 335, 337, 339, 341, 343, 344, 345, 357, 358, 564, 609, 614, 688, 700, 702, 714, 716, 746, 747, 748, 750], "flag": [155, 156, 322, 338, 343, 432, 451, 628, 634], "container0": [155, 156], "einops_rearrang": [155, 156, 564], "axes_length": [155, 156, 564, 580, 581, 582], "rearrang": [155, 156, 564, 580, 582], "addit": [155, 156, 321, 322, 326, 327, 330, 335, 336, 343, 344, 346, 432, 477, 482, 486, 564, 580, 581, 582, 732, 733, 789, 799], "einops_reduc": [155, 156, 564], "reduct": [155, 156, 336, 343, 564, 581, 610, 611, 763, 764, 766, 767, 768], "reduc": [155, 156, 343, 432, 476, 564, 581, 657, 672, 741, 742, 743, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767], "One": [155, 156, 336, 341, 343, 344, 564, 581, 688, 700, 702, 734, 736], "callabl": [155, 156, 335, 341, 359, 360, 361, 362, 363, 364, 365, 366, 367, 377, 378, 399, 416, 417, 432, 476, 564, 566, 571, 579, 581, 710, 711, 712, 713, 714, 720, 724, 725, 726], "einops_repeat": [155, 156, 564], "find_sub_contain": [155, 156], "sub_cont_to_find": [155, 156], "exsit": [155, 156], "find_sub_structur": [155, 156], "sub_struc_to_find": [155, 156], "flatten_key_chain": [155, 156, 344, 801, 802], "__": [155, 156, 328, 344], "above_height": [155, 156, 344], "below_depth": [155, 156, 344], "format_key_chain": [155, 156], "format_fn": [155, 156], "format": [155, 156, 324, 327, 336, 337, 341, 343, 344, 399, 413, 432, 452, 754, 755, 768], "string": [155, 156, 332, 336, 337, 341, 344, 399, 403, 404, 413, 419, 431, 432, 448, 449, 450, 451, 465, 471, 477, 478, 481, 564, 578], "from_disk_as_hdf5": [155, 156, 344], "h5_obj_or_filepath": [155, 156], "slice_obj": [155, 156], "load": [155, 156, 358], "disk": [155, 156, 344], "h5py": [155, 156], "file": [155, 156, 321, 322, 324, 326, 327, 331, 332, 334, 335, 341, 344, 564, 615, 801, 802], "hdf5": [155, 156, 344, 801, 802], "filepath": [155, 156, 322], "h5": [155, 156], "from_disk_as_json": [155, 156, 344], "json_filepath": [155, 156], "json": [155, 156, 344], "were": [155, 156, 322, 326, 330, 335], "abl": [155, 156, 321, 322, 331, 336, 338, 343, 346], "dure": [155, 156, 331, 335, 336, 337, 338, 358, 377, 378, 432, 477, 564, 625, 628, 630, 631, 635, 657, 665, 710, 711, 712, 713, 754, 760, 762, 801, 802, 805, 806, 807, 809], "from_disk_as_pickl": [155, 156, 344], "pickle_filepath": [155, 156], "pickl": [155, 156, 335, 344], "from_flat_list": [155, 156], "flat_list": [155, 156], "hierarchi": [155, 156, 344], "flat": [155, 156, 564, 610, 688, 699], "popul": [155, 156, 336, 337, 341, 734, 735, 754, 760, 762], "from_numpi": [155, 156, 344], "gather": [155, 156, 564, 587], "indic": [155, 156, 324, 342, 346, 369, 374, 482, 550, 564, 586, 587, 594, 607, 610, 611, 644, 645, 646, 647, 648, 649, 650, 651, 657, 680, 688, 703, 714, 715, 717, 719, 721, 722, 723, 725, 728, 729, 730, 731, 732, 733, 734, 735, 741, 742, 743, 744, 746, 747, 749, 751, 752, 753, 768, 771, 773, 789, 790, 791, 792, 793, 794, 795, 796, 801, 802], "accord": [155, 156, 321, 324, 331, 336, 399, 408, 415, 482, 486, 502, 543, 564, 586, 610, 611, 657, 679, 688, 695, 709, 754, 760, 762], "index": [155, 156, 324, 331, 335, 343, 379, 380, 385, 391, 432, 473, 564, 566, 586, 587, 688, 706, 714, 717, 718, 721, 722, 723, 728, 730, 741, 742, 743, 744, 746, 747, 748, 751, 752, 771, 773], "gather_nd": [155, 156, 564, 768], "h5_file_s": [155, 156], "content": [155, 156, 323, 324, 338, 341, 344], "batch": [155, 156, 331, 335, 344, 432, 474, 475, 564, 585, 644, 653, 657, 680, 710, 711, 712, 713, 732, 733, 803, 804], "handle_inplac": [155, 156], "prime": [155, 156], "overwritten": [155, 156, 332, 334], "has_kei": [155, 156], "query_kei": [155, 156], "somewher": [155, 156], "has_key_chain": [155, 156], "has_nan": [155, 156, 564], "include_inf": [155, 156, 564, 593, 627], "leafwis": [155, 156], "nan": [155, 156, 326, 327, 379, 399, 405, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 506, 507, 508, 515, 516, 517, 521, 523, 526, 528, 529, 531, 533, 534, 543, 547, 548, 549, 551, 554, 555, 556, 561, 562, 563, 564, 593, 627, 644, 656, 746, 747, 748, 750, 754, 756, 757, 758, 760, 761, 762, 763, 764, 766, 767], "well": [155, 156, 330, 338, 345, 346, 357, 564, 593, 657, 674], "inf": [155, 156, 379, 564, 593, 627, 657, 680], "wise": [155, 156, 341, 346, 369, 370, 371, 372, 373, 374, 375, 376, 482, 483, 484, 486, 487, 489, 491, 492, 494, 495, 496, 498, 499, 501, 502, 503, 505, 509, 510, 511, 514, 518, 519, 520, 524, 525, 534, 535, 536, 537, 539, 540, 541, 542, 543, 545, 547, 548, 560, 564, 584, 688, 689, 690], "identical_array_shap": [155, 156], "exclus": [155, 156, 331, 335, 346, 380, 381, 564, 576, 600, 601, 603, 628, 634, 734, 736], "trace": [155, 156, 157, 158, 341, 358, 564, 600, 601, 603, 657], "identical_config": [155, 156], "identical_structur": [155, 156], "if_exist": [155, 156], "inplace_upd": [155, 156, 338, 564, 778, 779], "key_chains_contain": [155, 156], "sub_str": [155, 156], "join": [155, 156, 688, 692, 694, 706, 768], "list_stack": [155, 156, 344], "dim": [155, 156, 336, 564, 607, 789, 800], "func": [155, 156, 335, 377, 378, 432, 476, 564, 571, 628, 632, 714, 727], "map_cont": [155, 156], "include_self": [155, 156], "possibi": [155, 156], "place": [155, 156, 322, 325, 326, 327, 328, 330, 331, 335, 337, 339, 346, 380, 381, 382, 383, 384, 385, 387, 388, 392, 393, 394, 397, 398, 399, 408, 432, 477, 482, 486, 487, 489, 494, 503, 505, 506, 508, 517, 549, 556, 557, 559, 561, 562, 564, 586, 596, 597, 598, 644, 647, 656, 657, 660, 688, 696, 697, 703, 732, 733, 746, 747, 748, 751, 752, 754, 756, 763, 764, 766, 805, 806, 807, 808, 809, 810], "matrix_norm": [155, 156, 657], "ord": [155, 156, 657, 666, 680], "matrix": [155, 156, 380, 391, 395, 396, 564, 565, 572, 644, 653, 657, 658, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 671, 672, 674, 675, 676, 678, 681, 789, 799], "p": [155, 156, 160, 187, 290, 291, 321, 322, 380, 391, 564, 572, 573, 644, 652, 657, 666, 680, 789, 797], "integ": [155, 156, 335, 336, 343, 380, 381, 387, 399, 418, 421, 423, 482, 483, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 517, 518, 540, 547, 548, 549, 563, 657, 667, 679, 680, 688, 704, 734, 736, 739, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767], "flatten": [155, 156, 564, 585, 657, 670, 680, 688, 699, 703, 741, 742, 743, 746, 747, 748, 750], "left": [155, 156, 321, 322, 328, 336, 482, 496, 498, 657, 662, 666, 675, 741, 742, 768], "broadcast": [155, 156, 326, 327, 328, 335, 336, 369, 372, 399, 406, 407, 432, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 515, 516, 517, 518, 520, 521, 522, 523, 524, 525, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 545, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 564, 573, 584, 657, 665, 666, 668, 671, 674, 679, 680, 682, 683, 684, 686, 687, 688, 689, 690, 696, 697, 698, 699, 703, 705, 706, 707, 734, 736, 741, 742, 743, 751, 753, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767], "correctli": [155, 156, 321, 330, 335, 336, 339, 345, 358, 657, 666, 741, 742], "max_depth": [155, 156, 432, 436, 439, 446, 456, 460, 464, 564, 592, 714, 726], "multi_map": [155, 156, 335], "map_nest": [155, 156, 160, 175, 178, 180, 181, 182, 183, 188, 195, 202, 204, 205, 212, 213, 218, 219, 221, 222, 223, 229, 233, 236, 249, 288, 289, 298, 299, 302, 303], "leftmost": [155, 156, 714, 727], "multi_map_in_static_method": [155, 156, 335], "fn_name": [155, 156], "num_arrai": [155, 156], "overwrite_at_key_chain": [155, 156], "overwrit": [155, 156, 338, 341, 432, 476], "target_dict": [155, 156], "return_dict": [155, 156], "prune_empti": [155, 156], "keep_non": [155, 156], "empti": [155, 156, 157, 158, 334, 336, 337, 380, 381, 754, 760, 761, 763, 764, 766, 767], "prune_key_chain": [155, 156], "key1": [155, 156, 345], "key2": [155, 156], "key3": [155, 156], "prune_key_from_key_chain": [155, 156], "absolut": [155, 156, 320, 482, 483, 657, 673], "certain": [155, 156, 321, 358, 380, 381, 389, 390], "decid": [155, 156, 321, 714, 725], "remov": [155, 156, 322, 323, 324, 327, 330, 331, 336, 338, 346, 657, 661, 665, 678, 688, 705, 710, 711, 712], "prune_kei": [155, 156], "prune_keys_from_key_chain": [155, 156], "remove_key_length_limit": [155, 156], "remove_print_limit": [155, 156], "reshape_lik": [155, 156], "leading_shap": [155, 156], "return_cont": [155, 156], "restructur": [155, 156], "keep_orig": [155, 156], "transpos": [155, 156, 343, 346, 432, 463, 644, 646, 648, 650, 657, 669, 671, 768, 789, 791, 793, 795], "old": [155, 156, 321, 338], "keep": [155, 156, 321, 322, 329, 335, 342, 344, 346, 564, 626], "start": [155, 156, 320, 321, 322, 323, 324, 325, 327, 328, 336, 340, 341, 343, 344, 345, 357, 358, 380, 381, 389, 390, 432, 447], "restructure_key_chain": [155, 156], "keychain_map": [155, 156], "set_at_key_chain": [155, 156], "set_at_kei": [155, 156], "set_framework": [155, 156, 341, 343, 344, 346], "set_ivy_backend": [155, 156], "ivy_backend": [155, 156], "attribut": [155, 156, 327, 335, 336, 342, 343, 344, 345, 399, 415, 416, 417, 418, 432, 472], "show": [155, 156, 321, 322, 328, 338, 357, 358, 768], "show_sub_contain": [155, 156], "sub_cont_or_keychain": [155, 156], "shuffl": [155, 156, 734, 768], "seed_valu": [155, 156, 734, 739], "align": [155, 156, 321, 341, 343, 768, 774], "seed": [155, 156, 157, 158, 734, 768], "shuffle_h5_fil": [155, 156], "dataset": [155, 156, 344, 356, 768], "size_ordered_arrai": [155, 156], "keychain": [155, 156], "smallest": [155, 156, 399, 415, 418, 482, 506], "largest": [155, 156, 357, 399, 415, 418, 657, 675], "slice_kei": [155, 156], "key_slic": [155, 156], "all_depth": [155, 156], "slice_via_kei": [155, 156], "sort_by_kei": [155, 156], "num_or_size_split": [155, 156, 341, 688, 704], "with_remaind": [155, 156, 688, 704], "constitu": [155, 156, 346], "dimension": [155, 156, 380, 381, 385, 391, 657, 659, 660, 665, 668, 670, 671, 679, 680, 688, 704, 741, 742, 743, 744, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767], "evenli": [155, 156, 380, 381, 389, 390, 688, 704], "store": [155, 156, 327, 332, 334, 335, 341, 343, 344, 345, 564, 585, 628, 642, 657, 678, 688, 704, 801, 802], "stop_gradi": [155, 156, 157, 158, 160, 164, 203, 209, 210, 230, 250, 259, 260, 261, 263, 292, 293, 345, 432, 476, 628, 631, 633, 635, 636, 637, 710, 711, 712, 713, 768, 805, 806, 807, 808, 809, 810], "preserve_typ": [155, 156, 628, 639], "stop": [155, 156, 341, 358, 380, 381, 389, 390, 432, 447, 476, 628, 631, 633, 635, 636, 637, 639, 710, 711, 712, 713, 805, 806, 807, 808, 809, 810], "alwai": [155, 156, 322, 323, 326, 327, 331, 332, 334, 335, 338, 339, 341, 343, 358, 399, 405, 482, 486, 543, 564, 598, 628, 634, 639], "structural_diff": [155, 156], "to_devic": [155, 156, 432, 451], "move": [155, 156, 322, 326, 432, 477], "cuda": [155, 156, 341, 344, 358, 380, 389, 390, 432, 441, 448, 473, 564, 586, 587, 607, 610, 611, 734, 735, 736, 738, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812], "cpu": [155, 156, 322, 337, 358, 380, 389, 390, 432, 451, 452, 454, 468, 471, 473, 477, 478, 480, 481, 564, 586, 587, 607, 610, 611, 734, 735, 736, 737, 738, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 809, 811, 812], "target": [155, 156, 325, 340, 344, 345, 346, 432, 450, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 768], "to_dict": [155, 156], "to_disk_as_hdf5": [155, 156, 344], "starting_index": [155, 156], "max_batch_s": [155, 156], "read": [155, 156, 324, 768], "r": [155, 156, 321, 564, 569, 626, 657, 672, 681], "w": [155, 156, 160, 250, 259, 260, 261, 263, 292, 293, 341, 344, 345, 564, 569, 628, 630, 631, 633, 635, 636, 637, 644, 645, 646, 647, 648, 649, 650, 651], "later": [155, 156, 564, 571], "append": [155, 156, 324, 330, 341, 344, 482, 496, 498, 657, 661, 665], "to_disk_as_json": [155, 156, 344], "to_disk_as_pickl": [155, 156, 344], "to_flat_list": [155, 156], "to_iter": [155, 156, 335], "leaf_keys_onli": [155, 156], "to_iterator_kei": [155, 156], "to_iterator_valu": [155, 156], "to_json": [155, 156], "to_list": [155, 156, 564, 768], "to_multi_dev": [155, 156], "multidevcontain": [155, 156, 157], "distributedarrai": [155, 156], "to_numpi": [155, 156, 344, 564, 768], "update_backend": [155, 156], "to_raw": [155, 156], "raw": [155, 156, 327], "trim_kei": [155, 156], "max_length": [155, 156], "try_kc": [155, 156], "tri": [155, 156], "arbitrari": [155, 156, 330, 331, 335, 338, 339, 345, 358, 380, 391, 399, 406, 423, 432, 461, 462, 464], "concatten": [155, 156, 432, 461, 462, 463, 464, 476], "unstack": [155, 156, 341, 344, 564, 768], "dim_siz": [155, 156, 432], "update_config": [155, 156], "vector_norm": [155, 156, 657], "global_norm": [155, 156, 160, 187, 290, 291], "vector": [155, 156, 357, 380, 391, 564, 573, 644, 653, 657, 659, 662, 665, 670, 675, 676, 679, 680, 681, 789, 799], "with_default_key_color": [155, 156], "with_entries_as_list": [155, 156], "with_ivy_backend": [155, 156], "with_key_length_limit": [155, 156, 344], "with_print_ind": [155, 156, 344], "with_print_limit": [155, 156, 344], "with_print_line_spac": [155, 156], "containerwithcr": [157, 158, 282], "containerwithdatatyp": [157, 158, 284], "containerwithdevic": [157, 158, 286], "containerwithelementwis": [157, 158, 288, 335], "containerwithgener": [157, 158, 290], "containerwithgradi": [157, 158, 292], "containerwithimag": [157, 158, 294], "containerwithlay": [157, 158, 296], "containerwithlinearalgebra": [157, 158, 298], "containerwithloss": [157, 158, 300], "containerwithmanipul": [157, 158, 302, 323], "containerwithnorm": [157, 158, 304], "containerwithrandom": [157, 158, 306], "containerwithsearch": [157, 158, 308], "containerwithset": [157, 158, 310], "containerwithsort": [157, 158, 312], "containerwithstatist": [157, 158, 314], "containerwithutil": [157, 158, 316], "__add__": [157, 158, 160, 327, 328, 334, 335, 339, 343], "special": [157, 158, 160, 323, 326, 327, 328, 334, 339, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 503, 505, 506, 507, 508, 515, 516, 517, 526, 528, 529, 531, 533, 534, 543, 547, 548, 549, 550, 551, 554, 555, 556, 561, 562, 563, 754, 756, 757, 758, 760, 761, 762], "11": [157, 158, 160, 165, 251, 264, 288, 289, 306, 307, 328, 335, 482, 486, 494, 549, 564, 576, 586, 657, 661, 670, 682, 687, 688, 697, 699, 734, 736, 741, 745, 746, 747, 754, 755], "__radd__": [157, 158, 160, 327, 328], "revers": [157, 158, 160, 323, 327, 328, 346, 358, 564, 579, 688, 697], "adam_step": [157, 158, 628], "arang": [157, 158, 336, 380, 389, 390, 754, 755, 768], "arg_info": [157, 158, 564], "arg_nam": [157, 158, 564], "argmax": [157, 158, 741, 768], "argmin": [157, 158, 741, 768], "array_equ": [157, 158, 564], "as_ivy_dev": [157, 158, 343, 432], "as_ivy_dtyp": [157, 158, 399], "as_native_dev": [157, 158, 432], "as_native_dtyp": [157, 158, 399], "asarrai": [157, 158, 338, 380, 644, 645, 746, 748], "assert_supports_inplac": [157, 158, 564], "astyp": [157, 158, 336, 338, 399], "broadcast_arrai": [157, 158, 399], "broadcast_to": [157, 158, 336, 399], "cache_fn": [157, 158, 331, 564], "choleski": [157, 158, 657], "clear_mem_on_dev": [157, 158, 432], "clip_matrix_norm": [157, 158, 564], "closest_valid_dtyp": [157, 158, 399], "container_typ": [157, 158, 564], "conv1d": [157, 158, 644, 789], "conv1d_transpos": [157, 158, 644], "conv2d": [157, 158, 644, 768, 789], "conv2d_transpos": [157, 158, 644], "conv3d": [157, 158, 644, 789], "conv3d_transpos": [157, 158, 644], "copy_arrai": [157, 158, 564], "cross": [157, 158, 657, 682, 683, 684, 686, 687, 768], "cumprod": [157, 158, 346, 564], "cumsum": [157, 158, 564, 768], "current_backend_str": [157, 158, 564], "default_devic": [157, 158, 337, 341, 432, 470, 473, 480], "default_dtyp": [157, 158, 331, 336, 399], "default_float_dtyp": [157, 158, 336, 399], "default_int_dtyp": [157, 158, 336, 399], "depthwise_conv2d": [157, 158, 644, 768], "det": [157, 158, 657], "dev_clone_arrai": [157, 158, 432], "dev_clone_it": [157, 158, 432], "dev_clone_nest": [157, 158, 432], "dev_dist_arrai": [157, 158, 432], "dev_dist_it": [157, 158, 432], "dev_dist_nest": [157, 158, 432], "dev_unifi": [157, 158, 432], "dev_unify_arrai": [157, 158, 432], "dev_unify_it": [157, 158, 432], "dev_unify_nest": [157, 158, 432], "dev_util": [157, 158, 337, 432], "diagon": [157, 158, 380, 385, 395, 396, 657, 678], "dropout": [157, 158, 344, 644, 789, 800], "dtype_bit": [157, 158, 399], "eigh": [157, 158, 657], "eigvalsh": [157, 158, 657], "empty_lik": [157, 158, 380], "execute_with_gradi": [157, 158, 335, 344, 345, 346, 358, 628, 768], "ey": [157, 158, 346, 380, 644, 647, 651], "finfo": [157, 158, 399], "floormod": [157, 158, 564, 768], "fourier_encod": [157, 158, 564], "from_dlpack": [157, 158, 380], "full_lik": [157, 158, 380], "function_supported_dtyp": [157, 158, 399], "function_unsupported_dtyp": [157, 158, 399], "gelu": [157, 158, 369, 775], "get_all_arrays_in_memori": [157, 158, 564], "get_all_ivy_arrays_on_dev": [157, 158, 337, 432], "get_min_bas": [157, 158, 564], "get_min_denomin": [157, 158, 564], "get_num_dim": [157, 158, 564, 768], "get_referrers_recurs": [157, 158, 564], "gpu_is_avail": [157, 158, 432], "handle_nest": [157, 158, 331, 335, 359], "handle_out_argu": [157, 158, 333, 336, 337, 338, 339, 359], "iinfo": [157, 158, 399], "indices_wher": [157, 158, 564, 768], "infer_devic": [157, 158, 336, 337, 339, 359], "infer_dtyp": [157, 158, 336, 337, 339, 359], "inplace_arrays_support": [157, 158, 564], "inplace_decr": [157, 158, 564], "inplace_incr": [157, 158, 564], "inplace_variables_support": [157, 158, 564], "inputs_to_native_arrai": [157, 158, 334, 359], "inv": [157, 158, 343, 657, 768], "invalid_dtyp": [157, 158, 399], "is_float_dtyp": [157, 158, 399], "is_int_dtyp": [157, 158, 399, 564, 624], "is_ivy_contain": [157, 158, 564], "leaky_relu": [157, 158, 369, 768], "linear": [157, 158, 327, 341, 344, 345, 346, 369, 370, 371, 372, 564, 585, 644, 652, 674, 768, 789, 790, 791, 792, 793, 794, 795, 796], "linspac": [157, 158, 341, 380, 381, 768], "logspac": [157, 158, 341, 380], "lstm_updat": [157, 158, 341, 644], "match_kwarg": [157, 158, 564], "matrix_pow": [157, 158, 657], "matrix_rank": [157, 158, 657], "matrix_transpos": [157, 158, 343, 657], "meshgrid": [157, 158, 380], "multi_head_attent": [157, 158, 335, 338, 644], "multinomi": [157, 158, 734], "nonzero": [157, 158, 482, 486, 543, 741], "num_arrays_in_memori": [157, 158, 564], "num_cpu_cor": [157, 158, 337, 432], "num_gpu": [157, 158, 330, 337, 432], "num_ivy_arrays_on_dev": [157, 158, 432], "one_hot": [157, 158, 346, 564, 768], "ones_lik": [157, 158, 346, 380, 768], "outer": [157, 158, 657, 710, 711, 712, 713], "outputs_to_ivy_arrai": [157, 158, 334, 336, 337, 339, 359], "percent_used_mem_on_dev": [157, 158, 432], "pinv": [157, 158, 657, 768], "print_all_arrays_in_memori": [157, 158, 564], "print_all_ivy_arrays_on_dev": [157, 158, 432], "promote_typ": [157, 158, 399], "qr": [157, 158, 657], "randint": [157, 158, 160, 264, 306, 307, 734, 768], "random_norm": [157, 158, 644, 647, 650, 651, 657, 675, 734, 746, 747], "result_typ": [157, 158, 336, 399], "scaled_dot_product_attent": [157, 158, 644], "scatter_flat": [157, 158, 564], "scatter_nd": [157, 158, 343, 564, 768], "set_default_devic": [157, 158, 337, 432, 480], "set_default_dtyp": [157, 158, 331, 336, 399], "set_default_float_dtyp": [157, 158, 336, 399], "set_default_int_dtyp": [157, 158, 336, 399], "set_min_bas": [157, 158, 564], "set_min_denomin": [157, 158, 564], "set_queue_timeout": [157, 158, 564], "set_split_factor": [157, 158, 432], "set_tmp_dir": [157, 158, 564], "set_with_grad": [157, 158, 628], "shape_to_tupl": [157, 158, 336, 564], "sigmoid": [157, 158, 341, 344, 345, 369, 768], "slogdet": [157, 158, 657], "softplu": [157, 158, 369, 768], "solv": [157, 158, 342, 357, 657], "split_factor": [157, 158, 432, 441], "split_func_cal": [157, 158, 432], "stable_divid": [157, 158, 331, 564], "stable_pow": [157, 158, 564], "static_ab": [157, 158], "static_aco": [157, 158], "static_acosh": [157, 158], "static_adam_step": [157, 158], "static_al": [157, 158], "static_ani": [157, 158], "static_arang": [157, 158], "static_arg_info": [157, 158], "static_arg_nam": [157, 158], "static_argmax": [157, 158], "static_argmin": [157, 158], "static_arrai": [157, 158], "static_array_equ": [157, 158], "static_arrays_equ": [157, 158], "static_as_ivy_dev": [157, 158], "static_as_ivy_dtyp": [157, 158], "static_as_native_dev": [157, 158], "static_as_native_dtyp": [157, 158], "static_asarrai": [157, 158], "static_asin": [157, 158], "static_asinh": [157, 158], "static_assert_supports_inplac": [157, 158], "static_astyp": [157, 158], "static_atan": [157, 158], "static_atan2": [157, 158], "static_atanh": [157, 158], "static_bitwise_and": [157, 158], "static_bitwise_invert": [157, 158], "static_bitwise_left_shift": [157, 158], "static_bitwise_or": [157, 158], "static_bitwise_right_shift": [157, 158], "static_bitwise_xor": [157, 158], "static_broadcast_arrai": [157, 158], "static_broadcast_to": [157, 158], "static_cache_fn": [157, 158], "static_ceil": [157, 158], "static_choleski": [157, 158], "static_clear_mem_on_dev": [157, 158], "static_clip_matrix_norm": [157, 158], "static_clip_vector_norm": [157, 158], "static_closest_valid_dtyp": [157, 158], "static_concat": [157, 158], "static_constant_pad": [157, 158], "static_container_typ": [157, 158], "static_conv1d": [157, 158], "static_conv1d_transpos": [157, 158], "static_conv2d": [157, 158], "static_conv2d_transpos": [157, 158], "static_conv3d": [157, 158], "static_conv3d_transpos": [157, 158], "static_copy_arrai": [157, 158], "static_co": [157, 158], "static_cosh": [157, 158], "static_cross": [157, 158], "static_cumprod": [157, 158], "static_cumsum": [157, 158], "static_current_backend": [157, 158], "static_current_backend_str": [157, 158], "static_default": [157, 158], "static_default_devic": [157, 158], "static_default_dtyp": [157, 158], "static_default_float_dtyp": [157, 158], "static_default_int_dtyp": [157, 158], "static_depthwise_conv2d": [157, 158], "static_det": [157, 158], "static_dev": [157, 158], "static_dev_clon": [157, 158], "static_dev_clone_arrai": [157, 158], "static_dev_clone_it": [157, 158], "static_dev_clone_nest": [157, 158], "static_dev_dist": [157, 158], "static_dev_dist_arrai": [157, 158], "static_dev_dist_it": [157, 158], "static_dev_dist_nest": [157, 158], "static_dev_unifi": [157, 158], "static_dev_unify_arrai": [157, 158], "static_dev_unify_it": [157, 158], "static_dev_unify_nest": [157, 158], "static_dev_util": [157, 158], "static_diagon": [157, 158], "static_dropout": [157, 158], "static_dtyp": [157, 158], "static_dtype_bit": [157, 158], "static_eigh": [157, 158], "static_eigvalsh": [157, 158], "static_einops_rearrang": [157, 158], "static_einops_reduc": [157, 158], "static_einops_repeat": [157, 158], "static_einsum": [157, 158], "static_empti": [157, 158], "static_empty_lik": [157, 158], "static_equ": [157, 158], "static_erf": [157, 158], "static_execute_with_gradi": [157, 158], "static_exist": [157, 158], "static_exp": [157, 158], "static_expand_dim": [157, 158], "static_expm1": [157, 158], "static_ey": [157, 158], "static_finfo": [157, 158], "static_flip": [157, 158], "static_floor": [157, 158], "static_floor_divid": [157, 158], "static_floormod": [157, 158], "static_fourier_encod": [157, 158], "static_from_dlpack": [157, 158], "static_ful": [157, 158], "static_full_lik": [157, 158], "static_function_supported_dtyp": [157, 158], "static_function_unsupported_dtyp": [157, 158], "static_gath": [157, 158], "static_gather_nd": [157, 158], "static_gelu": [157, 158], "static_get_all_arrays_in_memori": [157, 158], "static_get_all_ivy_arrays_on_dev": [157, 158], "static_get_min_bas": [157, 158], "static_get_min_denomin": [157, 158], "static_get_num_dim": [157, 158], "static_get_referrers_recurs": [157, 158], "static_gpu_is_avail": [157, 158], "static_great": [157, 158], "static_greater_equ": [157, 158], "static_handle_nest": [157, 158], "static_handle_out_argu": [157, 158], "static_has_nan": [157, 158], "static_iinfo": [157, 158], "static_indices_wher": [157, 158], "static_infer_devic": [157, 158], "static_infer_dtyp": [157, 158], "static_inplace_arrays_support": [157, 158], "static_inplace_decr": [157, 158], "static_inplace_incr": [157, 158], "static_inplace_upd": [157, 158], "static_inplace_variables_support": [157, 158], "static_inputs_to_native_arrai": [157, 158], "static_inv": [157, 158], "static_invalid_dtyp": [157, 158], "static_is_arrai": [157, 158], "static_is_float_dtyp": [157, 158], "static_is_int_dtyp": [157, 158], "static_is_ivy_arrai": [157, 158], "static_is_ivy_contain": [157, 158], "static_is_native_arrai": [157, 158], "static_is_vari": [157, 158], "static_isfinit": [157, 158], "static_isinf": [157, 158], "static_isnan": [157, 158], "static_layer_norm": [157, 158], "static_leaky_relu": [157, 158], "static_less": [157, 158], "static_less_equ": [157, 158], "static_linear": [157, 158], "static_linspac": [157, 158], "static_log": [157, 158], "static_log10": [157, 158], "static_log1p": [157, 158], "static_log2": [157, 158], "static_logaddexp": [157, 158], "static_logical_and": [157, 158], "static_logical_not": [157, 158], "static_logical_or": [157, 158], "static_logical_xor": [157, 158], "static_logspac": [157, 158], "static_lstm_upd": [157, 158], "static_match_kwarg": [157, 158], "static_matmul": [157, 158], "static_matrix_norm": [157, 158], "static_matrix_pow": [157, 158], "static_matrix_rank": [157, 158], "static_matrix_transpos": [157, 158], "static_max": [157, 158], "static_maximum": [157, 158], "static_mean": [157, 158], "static_meshgrid": [157, 158], "static_min": [157, 158], "static_minimum": [157, 158], "static_multi_head_attent": [157, 158], "static_multinomi": [157, 158], "static_multiprocess": [157, 158], "static_native_arrai": [157, 158], "static_neg": [157, 158], "static_nonzero": [157, 158], "static_not_equ": [157, 158], "static_num_arrays_in_memori": [157, 158], "static_num_cpu_cor": [157, 158], "static_num_gpu": [157, 158], "static_num_ivy_arrays_on_dev": [157, 158], "static_one_hot": [157, 158], "static_on": [157, 158], "static_ones_lik": [157, 158], "static_out": [157, 158], "static_outputs_to_ivy_arrai": [157, 158], "static_percent_used_mem_on_dev": [157, 158], "static_permute_dim": [157, 158], "static_pinv": [157, 158], "static_posit": [157, 158], "static_pow": [157, 158], "static_print_all_arrays_in_memori": [157, 158], "static_print_all_ivy_arrays_on_dev": [157, 158], "static_prod": [157, 158], "static_promote_typ": [157, 158], "static_qr": [157, 158], "static_queue_timeout": [157, 158], "static_random_norm": [157, 158], "static_relu": [157, 158], "static_remaind": [157, 158], "static_repeat": [157, 158], "static_reshap": [157, 158], "static_result_typ": [157, 158], "static_round": [157, 158], "static_scaled_dot_product_attent": [157, 158], "static_scatter_flat": [157, 158], "static_scatter_nd": [157, 158], "static_se": [157, 158], "static_set_default_devic": [157, 158], "static_set_default_dtyp": [157, 158], "static_set_default_float_dtyp": [157, 158], "static_set_default_int_dtyp": [157, 158], "static_set_min_bas": [157, 158], "static_set_min_denomin": [157, 158], "static_set_queue_timeout": [157, 158], "static_set_split_factor": [157, 158], "static_set_tmp_dir": [157, 158], "static_set_with_grad": [157, 158], "static_shap": [157, 158], "static_shape_to_tupl": [157, 158], "static_shuffl": [157, 158], "static_sigmoid": [157, 158], "static_sign": [157, 158], "static_sin": [157, 158], "static_sinh": [157, 158], "static_slogdet": [157, 158], "static_softmax": [157, 158], "static_softplu": [157, 158], "static_solv": [157, 158], "static_split": [157, 158], "static_split_factor": [157, 158], "static_split_func_cal": [157, 158], "static_sqrt": [157, 158], "static_squar": [157, 158], "static_squeez": [157, 158], "static_stable_divid": [157, 158], "static_stable_pow": [157, 158], "static_stack": [157, 158], "static_std": [157, 158], "static_stop_gradi": [157, 158], "static_sum": [157, 158], "static_supports_inplac": [157, 158], "static_svd": [157, 158], "static_svdv": [157, 158], "static_swapax": [157, 158], "static_tensordot": [157, 158], "static_til": [157, 158], "static_tmp_dir": [157, 158], "static_to_devic": [157, 158], "static_to_list": [157, 158], "static_to_native_arrays_and_back": [157, 158], "static_to_numpi": [157, 158], "static_to_scalar": [157, 158], "static_total_mem_on_dev": [157, 158], "static_tpu_is_avail": [157, 158], "static_trac": [157, 158], "static_tril": [157, 158], "static_triu": [157, 158], "static_trunc": [157, 158], "static_try_else_non": [157, 158], "static_type_promote_arrai": [157, 158], "static_unique_al": [157, 158], "static_unique_count": [157, 158], "static_unique_invers": [157, 158], "static_unique_valu": [157, 158], "static_unset_default_devic": [157, 158], "static_unset_default_dtyp": [157, 158], "static_unset_default_float_dtyp": [157, 158], "static_unset_default_int_dtyp": [157, 158], "static_unset_with_grad": [157, 158], "static_unstack": [157, 158], "static_used_mem_on_dev": [157, 158], "static_valid_dtyp": [157, 158], "static_value_is_nan": [157, 158], "static_var": [157, 158], "static_vari": [157, 158], "static_variable_data": [157, 158], "static_vecdot": [157, 158], "static_vector_norm": [157, 158], "static_vector_to_skew_symmetric_matrix": [157, 158], "static_wher": [157, 158], "static_with_grad": [157, 158], "static_zero_pad": [157, 158], "static_zero": [157, 158], "static_zeros_lik": [157, 158], "supports_inplac": [157, 158, 564], "svd": [157, 158, 657, 768], "svdval": [157, 158, 657], "tensordot": [157, 158, 657], "tmp_dir": [157, 158, 564], "to_native_arrays_and_back": [157, 158, 333, 339, 359], "to_scalar": [157, 158, 564], "total_mem_on_dev": [157, 158, 337, 432], "tpu_is_avail": [157, 158, 432], "tril": [157, 158, 380], "triu": [157, 158, 380], "try_else_non": [157, 158, 564], "type_promote_arrai": [157, 158, 399], "unique_al": [157, 158, 746], "unique_count": [157, 158, 746], "unique_invers": [157, 158, 746], "unique_valu": [157, 158, 746], "unset_default_devic": [157, 158, 432], "unset_default_dtyp": [157, 158, 399], "unset_default_float_dtyp": [157, 158, 399], "unset_default_int_dtyp": [157, 158, 399], "unset_with_grad": [157, 158, 628], "used_mem_on_dev": [157, 158, 432], "valid_dtyp": [157, 158, 399], "value_is_nan": [157, 158, 564], "variable_data": [157, 158, 628], "vecdot": [157, 158, 657], "vector_to_skew_symmetric_matrix": [157, 158, 657, 768], "with_grad": [157, 158, 628, 638], "zeros_lik": [157, 158, 380, 688, 689, 690, 768], "at_dev": [157, 159, 160, 432, 445, 446], "container_method": [160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 511, 513, 551, 553, 689, 691], "adam_upd": [160, 292, 293, 345, 628], "dcdw": [160, 164, 203, 209, 210, 250, 259, 260, 261, 292, 293, 628, 630, 631, 633, 635, 636], "lr": [160, 164, 203, 209, 210, 230, 250, 259, 260, 261, 263, 292, 293, 344, 345, 628, 631, 633, 635, 636, 637, 805, 806, 807, 808, 809, 810], "mw_tm1": [160, 164, 209, 250, 260, 292, 293, 628, 631, 635], "vw_tm1": [160, 164, 209, 250, 260, 292, 293, 628, 631, 635], "beta1": [160, 164, 209, 250, 260, 292, 293, 345, 628, 630, 631, 635, 805, 806, 807], "beta2": [160, 164, 209, 250, 260, 292, 293, 345, 628, 630, 631, 635, 805, 806, 807], "999": [160, 164, 209, 250, 260, 271, 277, 288, 289, 292, 293, 345, 482, 562, 628, 630, 631, 635, 805, 806, 807], "static_all_equ": [160, 167, 290, 291], "int32": [160, 184, 255, 284, 285, 336, 399, 408, 416, 564, 623, 688, 696, 754, 759, 761], "int64": [160, 184, 255, 284, 285, 336, 399, 408, 416, 482, 502, 741, 742, 743, 754, 759, 761], "clip_vector_norm": [160, 290, 291, 564], "max_norm": [160, 187, 290, 291, 564, 572, 573], "gradient_descent_upd": [160, 292, 293, 628, 710, 711, 712, 713, 768], "lamb_upd": [160, 292, 293, 628], "max_trust_ratio": [160, 209, 260, 292, 293, 628, 635, 805, 807], "decay_lambda": [160, 209, 210, 260, 261, 292, 293, 628, 635, 636, 805, 807, 808], "lars_upd": [160, 292, 293, 628], "optimizer_upd": [160, 292, 293, 628], "effective_grad": [160, 230, 263, 292, 293, 628, 637], "random_uniform": [160, 306, 307, 337, 345, 734, 768], "static_adam_upd": [160, 292, 293], "static_add": [160, 288, 289, 327, 328, 335], "static_argsort": [160, 312, 313], "static_binary_cross_entropi": [160, 300, 301], "static_can_cast": [160, 284, 285], "from_": [160, 255, 284, 285, 399, 408], "static_clip": [160, 302, 303, 689], "static_rol": [160, 256, 302, 303, 328, 335, 689, 691], "static_cross_entropi": [160, 300, 301], "static_divid": [160, 288, 289, 335], "static_gradient_descent_upd": [160, 292, 293], "static_lamb_upd": [160, 292, 293], "static_lars_upd": [160, 292, 293], "static_multipli": [160, 288, 289, 335], "static_optimizer_upd": [160, 292, 293], "static_randint": [160, 306, 307], "20": [160, 264, 306, 307, 343, 482, 503, 505, 515, 549, 556, 657, 661, 670, 677, 734, 736, 741, 744, 745, 754, 755], "15": [160, 264, 306, 307, 321, 328, 482, 494, 549, 644, 647, 657, 661, 670, 677, 688, 703, 732, 733, 734, 736, 741, 744, 746, 747, 754, 755], "16": [160, 264, 270, 276, 288, 289, 306, 307, 322, 328, 344, 482, 561, 644, 650, 657, 661, 670, 741, 745, 754, 755], "12": [160, 264, 306, 307, 321, 328, 335, 482, 494, 503, 505, 508, 549, 564, 576, 590, 657, 661, 670, 677, 688, 697, 699, 703, 732, 733, 734, 736, 741, 745, 746, 747, 754, 755], "40": [160, 264, 306, 307, 482, 508, 556, 657, 670, 754, 755], "gpu": [160, 264, 306, 307, 322, 337, 343, 358, 432, 451, 454, 467, 469, 473, 475, 480], "87": [160, 264, 306, 307], "62": [160, 264, 306, 307], "52": [160, 264, 306, 307, 657, 670, 746, 747, 754, 755], "95": [160, 264, 306, 307], "37": [160, 264, 306, 307, 482, 561, 732, 733], "42": [160, 264, 306, 307, 346, 369, 375, 657, 670, 734, 739, 754, 755], "14": [160, 264, 306, 307, 324, 328, 335, 482, 503, 505, 644, 656, 657, 661, 670, 746, 747, 754, 755], "13": [160, 264, 306, 307, 328, 335, 482, 494, 503, 505, 508, 556, 564, 576, 644, 656, 657, 661, 670, 732, 733, 741, 745, 746, 747, 754, 755], "static_random_uniform": [160, 306, 307], "static_sort": [160, 312, 313], "static_sparse_cross_entropi": [160, 300, 301], "static_subtract": [160, 288, 289, 335], "static_tan": [160, 288, 289, 328, 335], "143": [160, 270, 276, 288, 289, 328, 482, 561], "38": [160, 270, 276, 288, 289, 328, 482, 561], "static_tanh": [160, 288, 289], "995": [160, 271, 277, 288, 289, 482, 562], "9999": [160, 271, 277, 288, 289, 482, 562], "add_ivy_container_instance_method": 318, "containerexampl": [318, 319], "strongli": [320, 321, 768, 774], "welcom": [320, 321, 322, 768, 774], "skill": 320, "vetern": 320, "beginn": 320, "aspect": [320, 344, 768], "guid": [320, 321, 322, 330, 768], "through": [320, 322, 323, 325, 328, 331, 332, 335, 340, 341, 343, 344, 345, 346, 357, 482, 492], "journei": [320, 768, 774], "inclusvi": 320, "big": [320, 358], "team": [320, 321, 322], "board": 320, "contributor": [320, 321, 322, 340, 768], "section": [320, 322, 323, 325, 326, 327, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 344, 345, 746, 747, 748, 750], "below": [320, 321, 323, 324, 325, 326, 328, 331, 335, 336, 337, 338, 341, 342, 343, 344, 345, 346, 357, 380, 391, 395, 396, 482, 494, 503, 505, 508, 549, 562, 657, 660, 661, 678, 688, 696, 697, 746, 747, 748, 751, 752, 768], "best": [320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 564, 604], "go": [320, 321, 322, 323, 325, 326, 328, 335, 340, 344, 358, 714, 725], "finish": [320, 321, 325, 768], "dive": [320, 322, 323, 340, 343, 344, 358, 768], "environ": [320, 322, 324, 357], "basic": [320, 323, 324], "fork": [320, 321, 564, 605], "doc": [320, 323, 327, 339, 341, 344, 345, 768], "document": [320, 322, 342, 344, 346], "local": [320, 321, 324, 331], "task": [320, 322, 357, 710, 711, 712, 713, 768], "help": [320, 321, 328, 332, 334, 335, 343, 344, 345, 356, 564, 566, 754, 761, 768], "video": [320, 322, 327, 328, 339], "realli": [321, 335, 358], "contribut": [321, 322, 323, 341, 774], "toward": [321, 341, 688, 703, 768, 774], "page": [321, 322, 342, 346, 356, 768, 774], "explain": [321, 322, 323, 326, 327, 328, 330, 331, 332, 334, 335, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 768, 774], "main": [321, 324, 333, 335, 380, 385, 395, 396, 657, 661, 678], "prefer": [321, 335], "git": [321, 322], "submodul": [321, 322, 323, 324, 329, 330, 331, 337, 340, 341, 345, 768, 803, 804, 811, 812], "com": 321, "unifyai": [321, 324], "http": [321, 327, 399, 408, 482, 487, 489, 503, 505, 506, 508, 517, 556, 557, 559, 628, 630, 631, 688, 696, 703, 746, 747, 748, 751, 752, 754, 756], "gh": 321, "your_fold": 321, "id": [321, 334, 335, 432, 451, 801, 802], "cours": [321, 322, 328, 344, 358], "whatev": [321, 358], "integr": [321, 330, 399, 405], "familiar": [321, 323], "sure": [321, 323, 329], "elig": 321, "free": [321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 357, 768], "student": 321, "licenc": 321, "peopl": [321, 322, 325], "seem": [321, 345, 358], "miss": [321, 328, 330, 334, 335, 805, 809], "explicit": [321, 324, 335, 336, 338, 341, 358], "remind": 321, "channel": [321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 564, 585, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799], "pace": 321, "suggest": [321, 322, 326], "latest": [321, 323, 324, 327, 358, 399, 408, 482, 487, 489, 503, 505, 506, 508, 517, 556, 557, 559, 688, 696, 703, 746, 747, 748, 751, 752, 754, 756, 789, 798], "packag": [321, 324, 358], "ensur": [321, 322, 330, 334, 336, 339, 564, 598], "pypi": [321, 323, 358], "person": [321, 322], "experi": [321, 342, 344, 358], "avoid": [321, 322, 330, 332, 333, 335, 343, 432, 482, 516], "pip": [321, 357, 768], "instal": [321, 324, 357, 768], "abil": [321, 342, 358], "perhap": [321, 343, 344, 345, 358], "track": [321, 322, 432, 714, 726, 801, 802], "run": [321, 324, 329, 330, 332, 339, 341, 342, 343, 344, 345, 346, 357, 358, 432, 441, 628, 630, 631, 635, 710, 711, 712, 713, 789, 800, 801, 802], "command": [321, 324, 768], "ivy_dev": [321, 322, 324], "name": [321, 322, 324, 327, 330, 341, 343, 344, 346, 377, 378, 564, 566, 657, 662, 672, 675, 746, 747, 748], "setup": 321, "click": [321, 322, 327, 768], "icon": [321, 322], "side": [321, 322], "choos": [321, 322, 346, 432, 477, 482, 536, 537, 539, 741, 745, 746, 747, 748, 750, 754, 756, 757, 758], "panel": 321, "select": [321, 322, 330, 341, 343, 346, 358], "drop": [321, 358], "down": [321, 343], "path": [321, 324], "manual": [321, 322, 330, 345, 714, 715, 724, 725], "builtin": [321, 324, 343, 345], "requir": [321, 324, 326, 327, 328, 330, 333, 334, 336, 337, 339, 343, 358, 377, 378, 482, 556, 657, 662, 688, 706, 778, 779], "cmd": [321, 324], "directori": [321, 322, 324, 564, 615], "folder": [321, 322, 324, 326, 329, 330, 331], "abov": [321, 322, 324, 327, 328, 331, 332, 334, 335, 338, 339, 343, 344, 345, 346, 380, 391, 395, 396, 399, 408, 482, 486, 487, 489, 494, 503, 505, 506, 508, 517, 543, 549, 556, 557, 559, 561, 562, 564, 586, 644, 647, 656, 657, 660, 661, 662, 678, 688, 696, 697, 703, 732, 733, 734, 736, 746, 747, 748, 751, 752, 754, 756, 759, 760, 761, 763, 764, 766], "m": [321, 322, 324, 325, 341, 380, 391, 395, 396, 564, 569, 657, 658, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 674, 675, 676, 678, 734, 737, 738], "python3": [321, 324], "script": [321, 322, 324, 328, 341, 358], "bat": [321, 322, 324], "OR": [321, 322, 324, 482, 499, 501, 537, 539, 763, 767], "bin": [321, 322, 324], "mac": [321, 322, 324], "linux": [321, 322, 324], "virtualenv": 321, "os": 321, "note": [321, 322, 326, 327, 328, 335, 482, 548, 657, 662, 675, 688, 706, 746, 748, 754, 757], "tick": [321, 322], "To": [321, 328, 331, 335, 344, 345, 346, 768], "ivy_test": [321, 322], "test_array_api": [321, 322, 329, 330], "cd": [321, 322, 324], "txt": 321, "visual": [321, 358], "jetbrain": 321, "remot": 321, "mitig": 321, "potenti": [321, 340, 482, 516], "conflict": [321, 322, 344], "yet": [321, 323, 335], "particular": [321, 322, 326, 338, 482, 483], "system": [321, 358, 657, 674], "instruct": [321, 323], "desktop": 321, "wsl": 321, "powershel": 321, "admin": 321, "visit": 321, "link": 321, "profession": 321, "execut": [321, 324, 335, 338, 341, 343, 346, 358, 564, 625], "deploy": 321, "top": [321, 322, 330, 344, 345, 768], "press": [321, 344, 768], "ok": 321, "caus": [321, 322, 328, 330, 335, 338, 358], "earlier": [321, 322], "might": [321, 322, 326, 330, 333, 341, 343, 344, 564, 579], "necessari": [321, 328, 332, 335, 338], "virtualis": 321, "detail": [321, 322, 323, 326, 329, 330, 331, 332, 333, 335, 339, 344, 345, 380, 386, 746, 747, 748, 750], "sudo": 321, "apt": 321, "ca": 321, "certif": 321, "curl": 321, "gnupg": 321, "lsb": 321, "mkdir": 321, "keyr": 321, "fssl": 321, "download": [321, 330], "gpg": 321, "dearmor": 321, "o": [321, 341, 564, 569], "echo": 321, "deb": 321, "arch": 321, "dpkg": 321, "architectur": [321, 346, 358], "lsb_releas": 321, "cs": 321, "tee": 321, "null": 321, "ce": 321, "cli": 321, "containerd": 321, "io": 321, "compos": [321, 335, 358], "plugin": 321, "systemctl": 321, "permiss": 321, "relat": [321, 322, 357, 432], "post": [321, 346, 732, 733, 768, 774], "It": [321, 322, 324, 325, 326, 327, 328, 332, 334, 335, 338, 341, 343, 344, 345, 369, 372, 432, 477, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 494, 495, 496, 498, 499, 501, 502, 503, 505, 506, 507, 508, 515, 516, 517, 521, 522, 523, 524, 526, 528, 529, 530, 531, 533, 534, 535, 536, 537, 539, 540, 543, 544, 545, 547, 548, 549, 550, 551, 554, 555, 556, 557, 559, 560, 561, 562, 564, 573, 584, 682, 683, 684, 686, 687, 688, 689, 690, 696, 697, 698, 699, 703, 705, 706, 707, 734, 736, 741, 742, 751, 752, 753, 763, 764, 766, 767], "headach": 321, "arm": 321, "m1": 321, "instead": [321, 322, 323, 327, 328, 330, 331, 335, 338, 339, 341, 343, 344, 358], "featur": [321, 326, 339, 344, 768], "vm": 321, "azur": 321, "cloud": [321, 357], "defin": [321, 323, 326, 327, 336, 339, 343, 345, 358, 482, 543, 548, 564, 607, 657, 659, 662, 674, 734, 736, 754, 756, 757, 758], "dockerfil": [321, 324], "longer": [321, 336, 338], "worri": 321, "platform": 321, "agnost": [321, 334, 339, 341, 343, 346, 358, 768], "usual": 321, "studio": 321, "favourit": 321, "extens": [321, 322, 327, 380, 391, 399, 408, 482, 486, 487, 489, 494, 503, 505, 506, 508, 517, 549, 556, 557, 559, 561, 562, 657, 660, 688, 696, 697, 703, 746, 747, 748, 751, 752, 754, 756, 763, 764, 766], "theme": 321, "too": [321, 322, 358, 482, 486, 543], "done": [321, 322, 328, 330, 344], "unsupport": [321, 336, 399, 416, 417], "slow": 321, "ipad": 321, "long": [321, 322, 328, 644, 654], "browser": 321, "cool": [321, 326], "requisit": 321, "head": [321, 335, 644, 655, 768, 789, 800], "pane": [321, 322], "readi": [321, 323], "begin": [321, 714, 715, 725], "outlin": [321, 322, 323, 325, 327, 330, 331, 335, 338, 343], "dropdown": 321, "tab": [321, 344, 768], "master": [321, 322, 335], "vs": 321, "view": [321, 322, 380, 386, 644, 647, 651], "built": [321, 342, 380, 381, 432, 789, 800, 801, 802], "bottom": 321, "box": 321, "patient": 321, "upto": 321, "minut": 321, "launch": 321, "That": [321, 322, 343, 344, 345, 482, 548], "refer": [321, 322, 330, 331, 336, 339, 358, 380, 385, 482, 516, 530, 628, 630, 631, 657, 679, 681, 754, 760, 762, 763, 764, 766, 767, 789, 799], "approach": [321, 322, 330, 331, 335, 343, 344, 358], "colour": 321, "applic": [321, 336, 337, 345, 644, 655, 656, 714, 720, 726], "good": [321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 341, 345], "chanc": 321, "vscode": 321, "explor": [321, 342, 346, 357], "troubleshoot": 321, "sometim": [321, 322], "ever": [321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "64": [321, 344, 345, 482, 556, 557, 559, 644, 650, 651, 657, 670, 754, 755, 768, 789, 800], "bit": [321, 328, 331, 335, 343, 399, 414, 415, 418, 482, 495, 496, 498, 502, 754, 759, 761], "usr": 321, "more": [321, 322, 323, 325, 326, 328, 330, 331, 332, 333, 334, 335, 338, 339, 340, 341, 342, 343, 344, 345, 346, 357, 358, 380, 381, 399, 406, 482, 516, 657, 665, 688, 697, 746, 747, 748, 750, 768], "nutshel": [321, 339], "hook": 321, "lint": 321, "fix": [321, 322], "fail": [321, 323, 329, 330, 341, 343], "attempt": [321, 358], "succe": 321, "problemat": 321, "proce": [321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "modifi": [321, 322, 327, 331, 336, 337, 341], "properli": [321, 325], "enter": [321, 322, 334, 336, 337, 339, 432], "unsur": [321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339], "feel": [321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 768], "server": [322, 768], "context": [322, 328, 335, 336, 337, 432, 564, 605, 644, 655, 789, 800], "suitabl": [322, 326, 335], "quick": [322, 325, 345], "tendenc": 322, "land": 322, "end": [322, 335, 338, 340, 357, 358, 380, 381, 482, 492, 768, 774], "world": 322, "come": [322, 323, 345, 356, 768, 774], "fly": 322, "hard": [322, 343], "receiv": [322, 330, 336, 337, 432, 441, 442, 564, 567, 604, 789, 799], "respons": [322, 324], "internship": 322, "comment": 322, "trigger": 322, "unansw": 322, "label": [322, 341, 342, 346, 682, 683, 684, 686, 687], "respond": 322, "someon": [322, 358], "els": [322, 323, 326, 331, 332, 338, 341, 343, 345, 346, 358, 564, 570, 579, 583, 714, 724], "strive": [322, 358], "repli": 322, "newli": [322, 338, 377, 378, 399, 405, 564, 571], "bug": [322, 330], "serv": [322, 330, 331, 334, 335, 339, 340, 768], "suspect": 322, "behaviour": [322, 327, 330, 334, 335, 338, 339, 343], "observ": 322, "confid": 322, "wrong": 322, "someth": [322, 326, 344, 345, 358], "bet": 322, "act": [322, 328, 358], "placehold": [322, 334, 339, 714, 726], "mark": [322, 330], "ii": [322, 754, 755], "iii": 322, "titl": [322, 768], "issue_numb": 322, "delet": [322, 324], "No": [322, 341], "progress": [322, 335, 342, 346], "pr": 322, "soon": [322, 335, 356, 358, 768, 774], "solut": [322, 330, 335, 657, 674], "review": [322, 326], "merg": 322, "everi": [322, 323, 324, 328, 329, 330, 331, 332, 333, 335, 338, 339, 341, 343, 345, 380, 387, 388, 564, 565], "dai": 322, "close": [322, 327, 482, 516, 549, 657, 675], "likewis": [322, 327, 331, 335, 336, 339, 344], "freed": 322, "purpos": [322, 324, 328, 330, 331, 333, 334, 335, 339, 340, 343, 482, 516, 768], "remain": [322, 328, 358, 482, 486, 543, 548, 688, 700, 702, 714, 720], "short": [322, 345, 644, 654], "basi": [322, 329, 344], "situat": [322, 346], "alloc": [322, 358, 380, 395, 396, 399, 405, 432], "upon": [322, 328, 330, 338, 358], "period": 322, "prevent": [322, 338, 343, 628, 630, 631, 635, 754, 761, 805, 806, 807], "unabl": 322, "obvious": 322, "never": [322, 335], "reflect": [322, 334], "qualiti": 322, "hypothet": 322, "frustrat": 322, "delai": 322, "busi": 322, "fine": [322, 343, 346], "becaus": [322, 327, 330, 331, 332, 334, 336, 337, 338, 339, 341, 345, 346, 358], "inact": 322, "me": 322, "unfairli": 322, "definit": [322, 331, 336, 343, 657, 658, 659], "investig": 322, "Then": [322, 324, 343, 358], "practic": [322, 330], "separ": [322, 330, 334, 341, 343, 344], "branch": [322, 335, 358, 377, 378, 482, 492], "role": [322, 342], "date": 322, "upstream": [322, 329], "complic": [322, 341], "root": [322, 324, 344, 482, 556, 734, 735, 737, 738], "merge_with_upstream": 322, "sh": 322, "name_of_your_branch": 322, "resolv": [322, 754, 759, 761], "push": [322, 329], "both": [322, 327, 328, 331, 335, 337, 338, 339, 341, 343, 344, 345, 346, 357, 358, 399, 408, 422, 482, 486, 487, 489, 506, 517, 547, 556, 557, 559, 561, 564, 586, 644, 647, 656, 657, 659, 665, 679, 688, 703, 732, 733, 754, 756, 763, 764, 766], "abort": 322, "tediou": 322, "resolut": 322, "stash": 322, "reinstat": 322, "fetch": 322, "uncommit": 322, "unstag": 322, "untrack": 322, "comprehens": 322, "explan": [322, 327, 335, 339, 343], "atlassian": 322, "tutori": 322, "quit": [322, 323, 327, 331, 333, 334], "logic": [322, 333, 334, 336, 337, 343, 432, 468, 482, 535, 536, 537, 539, 763, 764, 766, 767, 768], "blame": 322, "revis": 322, "author": [322, 768], "eg": 322, "past": 322, "l": [322, 325, 657, 658, 662, 665, 678], "grep": 322, "v": [322, 341, 344, 345, 346, 644, 656, 768, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 803, 804, 805, 809, 811, 812], "commit_id": 322, "handi": 322, "histori": 322, "toggl": 322, "vertic": 322, "highlight": [322, 328], "previou": [322, 330, 339, 346, 358, 628, 631, 635], "inform": [322, 399, 415, 418, 564, 566, 628, 639], "whenev": [322, 343, 344], "tag": 322, "think": [322, 328], "interact": [322, 768], "gain": [322, 340, 345, 780], "yourself": [322, 323, 357], "simpler": [322, 343], "cannot": [322, 332, 336, 346], "least": [322, 328, 331, 334, 657, 665], "final": [322, 327, 328, 331, 334, 336, 338, 341, 343, 344, 380, 389, 390, 564, 585, 789, 800], "tickbox": 322, "corner": 322, "span": 322, "intent": [322, 338], "larg": [322, 344, 482, 486, 543], "discourag": 322, "philosophi": 322, "increment": [322, 564, 597], "frequent": [322, 323], "valuabl": 322, "infrequ": 322, "earli": [322, 768], "wast": 322, "spot": [322, 331], "mistak": 322, "propos": 322, "mountain": 322, "advoc": [322, 358], "individu": [322, 323, 331], "per": [322, 344, 432, 644, 645, 646, 647, 648, 649, 650, 651, 789, 790, 791, 792, 793, 794, 795, 796], "style": [322, 741, 744], "ve": [322, 340, 343, 734, 735, 768], "actual": [322, 325, 331, 338, 340, 343, 345, 358], "aim": [322, 340], "part": [322, 326, 329, 330, 331, 341, 342, 346, 357, 358, 380, 395, 396, 628, 631, 633, 635, 636, 637, 801, 802], "subsect": 322, "session": [322, 768], "block": [322, 331, 340, 342, 346, 358, 432, 768], "smaller": [322, 341, 346, 688, 689, 690, 703, 754, 759, 761], "edit": 322, "beauti": 322, "particularli": [322, 344, 358], "concern": [322, 325, 328, 335, 338, 340], "effici": [322, 330, 331, 335, 338, 339, 341, 344, 358], "difficult": [322, 330, 358, 746, 747, 748, 750], "undo": 322, "stress": 322, "frequenc": [322, 564, 585], "pycharm": 322, "pytest": [322, 330], "button": 322, "declar": 322, "insid": [322, 324, 326, 336], "exec": 322, "rm": 322, "rf": 322, "cp": 322, "ivy_contain": 322, "bash": [322, 324], "test_ivi": [322, 330], "test_funct": 322, "test_cor": 322, "test_imag": 322, "test_random_crop": 322, "header": 322, "q": [322, 358, 644, 656, 657, 662, 672], "array_api_test": 322, "test_creation_funct": 322, "test_arang": 322, "window": [322, 324, 644, 645, 646, 647, 648, 649, 650, 651, 789, 790, 791, 792, 793, 794, 795, 796], "variou": [322, 327, 333, 339, 357], "wherebi": [323, 335, 714, 726], "broad": 323, "todo": [323, 330], "commit": [323, 330], "NOT": [323, 482, 536], "resourc": 323, "hypothesi": 323, "cover": [323, 327, 328, 331, 333, 340], "lambda": [323, 341, 344, 805, 808, 810], "direct": [323, 345, 346, 357, 751, 753], "bind": [323, 335], "aforement": 323, "categori": [323, 326, 334, 335, 336, 340, 768], "parent": [323, 343], "hint": [323, 326, 327, 331, 334, 338, 339, 380, 391, 399, 408, 482, 486, 487, 489, 494, 503, 505, 506, 508, 517, 549, 556, 557, 559, 561, 562, 564, 586, 644, 647, 656, 657, 660, 688, 696, 697, 703, 732, 733, 746, 747, 748, 751, 752, 754, 756, 763, 764, 766], "its": [323, 324, 327, 399, 406, 432, 476, 657, 665, 688, 696, 700, 702, 703, 707], "thorough": [323, 327, 330, 339], "transpil": [323, 340, 342, 768, 774], "builder": [324, 356, 358, 768], "maco": 324, "ubuntu": 324, "uid": 324, "make_docs_without_dock": 324, "rel": [324, 628, 631, 633, 635, 636, 637, 657, 661, 668, 671, 678, 688, 697, 703, 751, 752, 753, 768], "synchron": 324, "rest": [324, 342, 346], "remove_doc": 324, "_": [324, 327, 335, 338, 343, 344, 399, 408, 482, 487, 489, 503, 505, 506, 508, 517, 556, 557, 559, 628, 630, 631, 657, 681, 688, 696, 703, 746, 747, 748, 751, 752, 754, 756], "privat": [324, 805, 809], "fulfil": [324, 340, 768], "autogenerated_sourc": 324, "png": [324, 344], "_imag": 324, "lastli": 324, "rst": 324, "partial_sourc": 324, "conf": 324, "create_rst_fil": 324, "filter": [324, 644, 645, 646, 647, 648, 649, 650, 651, 789, 790, 791, 792, 793, 794, 795, 796], "repres": [324, 343, 380, 391, 399, 414, 482, 485, 486, 490, 493, 508, 543, 555, 562, 644, 653, 657, 673, 674], "overal": [324, 327, 335, 336, 337, 346], "markup": 324, "extract": [324, 326], "get_functions_and_class": 324, "doctr": 324, "readm": [324, 358], "module_nam": 324, "copy_readme_to_rst": 324, "tabl": 324, "toc": 324, "tree": 324, "append_toctree_to_rst": 324, "create_index_rst": 324, "\u03c0": [324, 482, 484, 487, 489, 491, 492], "namespac": [324, 326, 336, 341, 346], "who": [325, 340, 358], "mainli": [325, 342, 344], "under": [325, 327, 328, 329, 330, 331, 335, 340, 341, 344, 346], "hood": [325, 328, 330, 331, 335, 340, 341, 344, 346], "weed": [325, 340], "behind": [325, 340, 342, 628, 631, 633, 635, 636, 637], "navig": 325, "tour": 325, "primari": [325, 330, 332, 338, 358], "composit": [325, 330, 332, 334, 335, 338, 341, 345, 346, 358], "nestabl": [325, 327, 328, 330, 338, 399, 408, 482, 486, 487, 489, 506, 517, 556, 557, 559, 561, 564, 586, 644, 647, 656, 688, 703, 732, 733, 754, 756, 763, 764, 766], "dynam": [325, 336, 337, 338, 341, 377, 378], "runtim": [325, 330, 432], "h": [325, 335, 644, 647, 648, 649, 650, 651], "j": [325, 564, 568, 569, 657, 678, 754, 755], "k": [325, 341, 380, 385, 395, 396, 564, 568, 644, 656, 657, 665, 672, 674, 675, 676, 678, 734, 737, 738, 741, 744], "borrow": 325, "n": [325, 380, 391, 395, 396, 564, 569, 644, 652, 657, 661, 665, 667, 668, 669, 670, 671, 672, 675, 676, 678, 679, 680, 681, 688, 695, 696, 698, 706, 709, 734, 737, 738, 741, 744, 754, 757, 760, 761, 762, 763, 764, 766, 767], "taken": [326, 346, 657, 661], "constant": [326, 331, 345, 346, 358, 432, 441, 442, 688, 695, 714, 720, 732, 733, 780, 781, 785, 788, 801, 802, 803, 804], "compil": [326, 335, 340, 342, 358, 768, 801, 802, 805, 806, 807, 808, 809, 810], "meta": [326, 334, 711, 712, 713], "overlap": 326, "sever": [326, 358, 657, 664], "judgement": 326, "locat": [326, 330, 332, 337, 734, 735], "some_namespac": 326, "some_backend": 326, "another_backend": 326, "break": [326, 339, 343, 358, 768], "anyth": [326, 768], "refactor": 326, "ongo": 326, "subfold": [326, 330], "via": [326, 335, 336, 337, 338, 341, 343, 344, 357, 714, 715, 724, 725], "file_nam": 326, "my_func": [326, 328], "int": [326, 328, 331, 335, 336, 337, 338, 339, 346, 369, 374, 377, 378, 380, 383, 385, 387, 388, 389, 390, 393, 395, 396, 397, 399, 407, 412, 414, 415, 418, 421, 432, 454, 457, 458, 459, 460, 468, 469, 470, 476, 477, 482, 494, 495, 496, 498, 499, 501, 502, 503, 505, 564, 566, 576, 577, 580, 581, 582, 585, 586, 591, 607, 610, 611, 616, 617, 626, 628, 630, 631, 635, 644, 645, 647, 649, 650, 651, 657, 659, 661, 677, 678, 679, 680, 682, 684, 686, 687, 688, 692, 694, 695, 696, 697, 698, 699, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 726, 732, 733, 734, 735, 736, 737, 738, 739, 741, 742, 743, 751, 752, 753, 754, 756, 757, 758, 760, 761, 762, 763, 764, 766, 767], "nativedtyp": [326, 336, 337, 339, 380, 381, 382, 383, 384, 385, 387, 388, 392, 393, 394, 397, 398, 399, 404, 405, 411, 412, 413, 422, 754, 761], "nativedevic": [326, 336, 337, 339, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 397, 398, 432, 449, 450, 451, 465, 471, 473, 475, 477, 478, 481, 564, 607, 734, 735, 736, 737, 738], "my": 326, "numer": [326, 345, 380, 391, 399, 405, 482, 483, 486, 506, 509, 516, 517, 518, 521, 522, 523, 524, 536, 537, 539, 543, 544, 545, 547, 548, 550, 557, 559, 560, 563, 564, 589, 590, 612, 613, 618, 619, 657, 659, 665, 670, 675, 677, 678, 679, 734, 740, 741, 742, 743, 754, 756, 759, 761, 780], "cooler": 326, "produc": [326, 432, 441, 442, 644, 656], "something_cool": 326, "category_nam": [327, 331, 336, 337, 339], "contrast": [327, 339], "backend_nam": [327, 331, 332, 333, 336, 337, 339], "account": 327, "instanti": 327, "firstli": [327, 328, 331, 334, 336, 338, 344], "templat": [327, 768], "spec": [327, 328], "api_specif": [327, 399, 408, 482, 487, 489, 503, 505, 506, 508, 517, 556, 557, 559, 688, 696, 703, 746, 747, 748, 751, 752, 754, 756], "array_api": 327, "preview": 327, "render": 327, "incorrectli": 327, "onlin": [327, 768], "approxim": [327, 369, 370, 482, 484, 485, 487, 489, 490, 491, 492, 507, 508, 515, 516, 526, 528, 529, 530, 531, 533, 547, 551, 554, 555, 561, 562, 657, 668, 671], "tangent": [327, 369, 376, 482, 491, 492, 493, 561, 562], "domain": [327, 482, 484, 485, 487, 489, 490, 491, 492, 507, 508, 515, 516, 526, 528, 529, 531, 533, 551, 554, 555, 556, 561, 562], "infin": [327, 379, 399, 405, 482, 483, 485, 486, 490, 491, 492, 506, 507, 508, 515, 516, 517, 518, 521, 522, 526, 528, 529, 531, 533, 534, 543, 547, 548, 549, 551, 554, 555, 556, 561, 562, 563, 657, 680, 754, 756, 758, 763, 764, 766, 767], "codomain": [327, 482, 484, 485, 487, 489, 490, 491, 492, 507, 508, 515, 516, 526, 528, 529, 531, 533, 551, 554, 555, 556, 561, 562], "x_i": [327, 482, 483, 484, 485, 487, 489, 490, 491, 495, 506, 507, 508, 515, 516, 517, 521, 522, 523, 526, 528, 529, 531, 533, 536, 544, 549, 550, 551, 554, 555, 556, 557, 559, 561, 562, 563, 746, 747, 748, 750, 754, 756, 757, 758, 760, 761, 762], "assum": [327, 332, 336, 343, 344, 358, 380, 391, 399, 408, 482, 486, 487, 489, 494, 503, 505, 506, 507, 508, 517, 549, 551, 554, 556, 557, 559, 561, 562, 564, 586, 644, 647, 656, 657, 660, 688, 696, 697, 703, 732, 733, 746, 747, 748, 751, 752, 754, 756, 763, 764, 766], "express": [327, 341, 346, 482, 484, 487, 489, 491, 492, 507, 551, 554, 561], "radian": [327, 482, 484, 487, 489, 491, 492, 507, 551, 554, 561], "float": [327, 331, 335, 336, 338, 339, 343, 345, 369, 371, 379, 380, 381, 383, 385, 387, 388, 389, 390, 393, 397, 399, 405, 411, 415, 420, 423, 432, 465, 471, 475, 478, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 503, 505, 506, 507, 508, 509, 510, 515, 516, 517, 518, 519, 520, 524, 525, 526, 528, 529, 531, 533, 534, 543, 544, 545, 546, 547, 548, 549, 551, 554, 555, 556, 560, 561, 562, 563, 564, 572, 573, 585, 589, 590, 612, 613, 618, 619, 628, 630, 631, 633, 635, 636, 637, 644, 647, 651, 656, 657, 658, 660, 662, 663, 664, 668, 671, 672, 674, 675, 680, 682, 683, 684, 686, 687, 710, 711, 712, 713, 732, 733, 734, 737, 738, 746, 747, 748, 750, 754, 756, 757, 758, 759, 760, 761, 762], "operand": [327, 482, 484, 485, 486, 487, 489, 490, 491, 492, 503, 505, 506, 507, 508, 515, 516, 517, 526, 528, 529, 531, 533, 534, 543, 547, 548, 549, 551, 554, 555, 556, 561, 562, 563, 754, 755, 756, 758, 761], "whose": [327, 380, 395, 396, 482, 485, 490, 493, 507, 508, 547, 551, 554, 555, 561, 562, 564, 571, 657, 658, 660, 661, 662, 663, 664, 668, 669, 670, 671, 672, 674, 675, 676, 678, 688, 697, 703, 746, 747, 748, 754, 755], "ref": [327, 482, 502, 524, 543, 545, 548, 560, 688, 706], "promot": [327, 331, 336, 399, 405, 408, 422, 423, 427, 482, 484, 485, 486, 487, 489, 490, 491, 493, 494, 496, 498, 499, 501, 502, 503, 505, 507, 508, 509, 515, 516, 526, 528, 529, 531, 533, 534, 540, 543, 547, 548, 551, 554, 555, 556, 561, 562, 657, 658, 659, 664, 665, 668, 670, 671, 674, 679, 680, 688, 706, 754, 757], "But": [327, 335, 346], "needless": 327, "info": [327, 768], "subset": [327, 330, 339, 341], "extend": [327, 330, 332, 339], "renam": 327, "conform": [327, 380, 391, 399, 408, 482, 486, 487, 489, 494, 503, 505, 506, 508, 516, 517, 549, 556, 557, 559, 561, 562, 657, 660, 688, 696, 697, 703, 746, 747, 748, 751, 752, 754, 756, 763, 764, 766], "org": [327, 399, 408, 482, 487, 489, 503, 505, 506, 508, 517, 556, 557, 559, 628, 630, 631, 688, 696, 703, 746, 747, 748, 751, 752, 754, 756], "elementwise_funct": [327, 482, 487, 489, 503, 505, 506, 508, 517, 556, 557, 559, 688, 703, 746, 747, 748, 751, 752, 754, 756], "descript": [327, 335, 380, 391, 399, 408, 482, 486, 487, 489, 494, 503, 505, 506, 508, 517, 549, 556, 557, 559, 561, 562, 564, 586, 644, 647, 656, 657, 660, 680, 688, 696, 697, 703, 732, 733, 746, 747, 748, 751, 752, 754, 756, 763, 764, 766], "simplic": [327, 345, 357, 380, 391, 399, 408, 482, 486, 487, 489, 494, 503, 505, 506, 508, 517, 549, 556, 557, 559, 561, 562, 564, 586, 644, 647, 656, 657, 660, 688, 696, 697, 703, 732, 733, 746, 747, 748, 751, 752, 754, 756], "judgment": 327, "beyond": [327, 688, 703], "text": 327, "func_nam": [327, 328, 331], "pure": [327, 343, 346, 358], "themselv": [327, 331, 335, 336, 337, 345, 714, 715], "operator_nam": 327, "succinct": 327, "contstructor": 327, "though": [327, 331, 336, 344, 358], "forward": [327, 346, 357, 358, 801, 802, 805, 809], "_forward": [327, 341, 344, 345, 768], "former": 327, "trainabl": [327, 342, 344, 345, 628, 634, 778, 779, 801, 802, 811], "explicitli": [327, 331, 332, 334, 335, 338, 341, 358, 657, 662, 789, 798, 800, 801, 802], "latter": [327, 332], "implicit": [327, 335, 341], "docst": 327, "eight": 328, "static_": 328, "op_nam": 328, "__r": 328, "four": [328, 331, 336, 339, 344], "__sub__": [328, 334, 335, 339, 343], "__mul__": [328, 334, 335, 339, 343], "__truediv__": [328, 334, 335], "respect": [328, 334, 335, 336, 339, 380, 391, 482, 483, 486, 492, 494, 496, 498, 499, 501, 502, 503, 505, 509, 510, 518, 519, 520, 524, 525, 534, 535, 537, 539, 540, 543, 545, 548, 560, 628, 630, 631, 632, 633, 635, 636, 637, 657, 672, 710, 711, 712, 713], "recap": [328, 335, 345], "independ": [328, 329, 333, 335, 341, 346, 657, 659, 674, 734, 735], "combinatorili": 328, "variat": [328, 330], "grid": [328, 330, 357, 380, 391], "vari": [328, 330, 335, 343, 746, 747, 748, 750], "simplest": 328, "small": [328, 331, 341, 345, 358, 482, 543, 657, 668, 671, 732, 733, 803, 804], "unus": [328, 338, 377, 378], "18": [328, 335, 482, 503, 505, 657, 661, 670, 754, 755], "excess": [328, 332, 343], "showcas": [328, 357], "demonstr": [328, 343], "replic": [328, 336], "meant": 328, "imaginari": 328, "some_flag": 328, "another_flag": 328, "54": [328, 482, 507, 508, 556, 644, 656, 657, 670, 734, 737, 754, 755], "jointli": 328, "three": [328, 335, 340, 380, 391, 768], "x0": [328, 564, 568], "procedur": 328, "sens": [328, 335, 343], "5574077": 328, "1850398": 328, "5463025": 328, "8422884": 328, "91601413": 328, "9647598": 328, "3738229": 328, "1597457": 328, "0963247": 328, "9955841": 328, "3278579": 328, "multi": [328, 335, 340, 358, 644, 655, 657, 659, 768, 774, 789, 800], "seper": [328, 564, 585], "pars": [328, 358], "satisfi": [328, 657, 681], "far": [328, 337, 342, 343, 714, 715, 725], "asid": [328, 357], "irrelev": [328, 336], "increasingli": 328, "complex": [328, 344, 345, 346, 358, 657, 662, 675], "rule": [328, 330, 331, 334, 335, 336, 399, 405, 408, 423, 482, 493, 502, 509, 543, 548, 657, 658, 659, 670, 674], "count": [328, 344, 432, 470, 657, 679, 688, 697, 746, 747, 748, 763, 764, 766, 767], "14254655": 328, "1578213": 328, "380515": 328, "17": [328, 335, 369, 371, 657, 661, 734, 737], "trivial": 328, "By": [328, 331, 335, 338, 345, 346, 564, 576, 577, 657, 679, 688, 699, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767], "non": [328, 335, 336, 341, 377, 378, 399, 405, 419, 482, 536, 537, 539, 644, 647, 657, 660, 668, 675, 677, 679, 680, 741, 742, 743, 744, 754, 756, 757, 758, 759, 762, 763, 764, 766, 767, 801, 802, 805, 809], "dictat": [328, 334, 338, 339], "exlud": 328, "unit": [329, 330, 358, 369, 370, 371, 372, 432], "thoroughli": [329, 330], "ci": [329, 330, 358], "failur": 329, "On": [330, 342, 346], "fixtur": 330, "consum": [330, 335, 339, 432], "300": [330, 482, 549], "hit": [330, 341], "permit": [330, 334, 339], "action": 330, "eleg": 330, "intellig": 330, "sampl": [330, 644, 652, 734, 735, 737, 738, 754, 760, 762, 789, 797], "rang": [330, 344, 345, 346, 380, 381, 389, 390, 746, 747, 754, 759, 761, 768], "cach": [330, 331, 432, 450, 564, 571], "unexplor": 330, "known": 330, "repeatedli": [330, 335, 714, 723], "upload": 330, "artifact": 330, "parametr": 330, "strategi": 330, "statement": [330, 358], "plai": [330, 346], "helper": [330, 344], "verifi": [330, 336, 337, 343, 768, 774], "truth": [330, 482, 510, 519, 520, 524, 525, 545], "opt": [330, 332, 338, 343], "defer": [330, 331, 334, 335, 336, 337, 338], "suffic": [330, 333], "catch": [330, 564, 579], "systemat": 330, "safeguard": 330, "inabl": 330, "fact": [330, 344], "categor": [331, 337], "mutual": [331, 335], "constitut": [331, 341, 754, 760, 762], "venn": 331, "diagram": 331, "light": [331, 358], "wherea": [331, 334, 336, 337, 339, 346], "hand": [331, 358], "log_pr": [331, 335, 338], "array_arg": 331, "typic": 331, "whatsoev": [331, 335], "commonli": [331, 754, 760, 762], "outsid": [331, 337, 341, 343, 346, 688, 689, 690, 706], "denomin": [331, 358, 564, 584, 590, 613, 618, 619, 732, 733, 803, 804], "divis": [331, 482, 502, 509, 518, 548, 564, 584, 590, 613, 618, 619, 628, 630, 631, 635, 805, 806, 807], "piec": [331, 333, 334, 341], "deal": [331, 358], "concurr": [331, 335], "weight": [331, 335, 345, 346, 628, 630, 631, 633, 635, 636, 637, 644, 653, 654, 656, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 801, 802, 805, 807, 808], "modif": 331, "decor": [331, 333, 335, 336, 337, 338], "group": [331, 335], "briefli": [331, 344], "cast": [331, 336, 399, 405, 408, 688, 692, 694, 754, 759, 761, 768], "get_all_arrays_on_dev": 331, "nested_map": [331, 714], "index_nest": [331, 714], "implicit_backend": 332, "unless": [332, 337, 338, 358, 482, 543, 564, 607], "__dict__": [332, 341, 343], "ivy_original_dict": [332, 341], "unmodifi": [332, 336], "moment": [332, 358, 628, 630, 631, 635, 805, 806, 807], "fallback": 332, "freedom": [332, 754, 760, 762], "recommend": [332, 482, 536, 537, 539, 548, 754, 757], "achiev": [333, 344, 346], "wrapper": [333, 334, 335, 336, 338, 339, 343], "topic": [333, 343], "tf": [334, 336, 337, 338, 339, 341, 346, 358, 768], "_data": [334, 343], "organiz": [334, 335], "inherit": [334, 335, 343], "bear": [334, 335, 336], "mind": [334, 335], "necessarili": [334, 335], "although": [334, 335], "underpin": [334, 335, 341], "programmat": [334, 335], "backup": [334, 335], "accident": [334, 335], "readabl": [334, 335, 339, 343, 344], "absent": [334, 335], "perk": [334, 335], "auto": [334, 335, 344], "throw": [334, 343], "imposs": 334, "coupl": [334, 335, 343, 345], "anywai": 334, "secondli": [334, 336], "easier": 334, "five": [335, 344], "decis": [335, 341, 343], "displai": [335, 344], "arbitrarili": [335, 344], "__repr__": 335, "control": [335, 336, 338, 343, 344, 357], "__getattr__": 335, "underli": [335, 482, 494, 499, 501, 503, 505, 540], "__setattr__": 335, "__contains__": 335, "__getstate__": 335, "__setstate__": 335, "unpickl": 335, "expand": [335, 564, 585, 688, 696], "children": 335, "shallowest": 335, "deepest": 335, "67": [335, 482, 503, 505, 508], "22": [335, 482, 503, 505, 657, 661, 670, 741, 745, 754, 755], "25": [335, 482, 556, 557, 559, 657, 661, 664, 682, 684, 686, 732, 733, 754, 755], "retain_grad": [335, 628, 632], "dy": [335, 628, 632], "dx": [335, 628, 632], "technic": [335, 338, 339, 358], "autograd": [335, 358], "grad": [335, 344, 345, 346, 768, 805, 809], "redund": 335, "num_head": [335, 644, 655, 789, 800], "mask": [335, 644, 655, 656], "to_q_fn": [335, 644, 655], "to_kv_fn": [335, 644, 655], "to_out_fn": [335, 338, 644, 655], "to_q_v": [335, 644, 655], "to_kv_v": [335, 644, 655], "to_out_v": [335, 644, 655], "measur": [335, 644, 655, 789, 800], "dot": [335, 644, 655, 656, 657, 677, 679, 789, 800], "product": [335, 482, 543, 564, 576, 644, 655, 656, 657, 659, 665, 670, 677, 679, 754, 755, 759, 789, 800], "implicitli": 335, "intuit": [335, 344, 345], "debug": [335, 344], "chronolog": 335, "had": [335, 338], "sequenti": [335, 345], "flow": [335, 357], "implic": 335, "slightli": [335, 341, 345], "eager": [335, 358], "int8": [336, 399, 416], "int16": [336, 399, 408, 416, 754, 759, 761], "uint8": [336, 399, 408, 416], "uint16": [336, 399, 417, 754, 759, 761], "uint32": [336, 399, 417, 754, 759, 761], "uint64": [336, 399, 417, 754, 759, 761], "bfloat16": [336, 399, 416], "float16": [336, 399, 417], "all_dtyp": 336, "all_numeric_dtyp": 336, "all_int_dtyp": 336, "all_float_dtyp": 336, "fall": [336, 340, 768, 801, 802, 805, 809], "valid": [336, 341, 399, 409, 644, 645, 646, 647, 648, 649, 650, 651, 688, 706, 763, 764, 766, 767, 789, 790, 791, 792, 793, 794, 795, 796], "invalid": [336, 657, 679, 763, 764, 766, 767], "thirdli": 336, "native_float32": 336, "importantli": [336, 343, 346, 357], "varieti": [336, 337], "conveni": [336, 337, 339, 342, 344, 345], "arguabl": [336, 337], "compound": 336, "overflow": [336, 482, 486, 754, 761], "arr": [336, 337, 732, 733], "scalar": [336, 341, 346, 358, 380, 388, 564, 607, 624, 627, 657, 680], "settabl": [336, 337], "jnp": [336, 337, 338, 339, 346, 768], "jaxarrai": [336, 337, 338, 339], "mx": [336, 337, 338, 768], "nd": [336, 337, 338, 341, 346, 768], "deleg": 336, "fill_valu": [336, 380, 387, 388, 482, 520], "as_n": [336, 399, 410, 411, 412, 413, 432, 451, 452, 473], "idx": [337, 343, 564, 566], "tpu": [337, 432, 454, 479], "aliv": [337, 432, 466, 470, 472, 564, 588, 606, 608], "amount": [337, 432, 478, 682, 683, 684, 686, 687], "memori": [337, 338, 356, 358, 432, 450, 471, 476, 478, 481, 644, 654, 768], "dual": 337, "thrown": [337, 358, 564, 598], "rare": [337, 358], "program": 338, "strictli": 338, "ration": 338, "speak": 338, "subtli": 338, "ensure_in_backend": [338, 564, 598], "x_nativ": 338, "val_n": 338, "is_ivy_arrai": [338, 343, 564], "is_vari": [338, 628], "assign": [338, 343], "elif": 338, "irrespect": [338, 343, 399, 405], "inclus": [338, 380, 381, 734, 736], "omit": [338, 339, 746, 747, 748, 750], "unspecifi": [338, 482, 547, 548, 657, 662, 688, 706], "predominantli": [338, 357], "math": [338, 346, 768], "presenc": 338, "altern": [338, 344], "_wrap_fn": 338, "maxim": [338, 341], "inner": [338, 343, 657, 662, 665, 710, 711, 712, 713], "third": [338, 358, 657, 675, 746, 747], "addition": [338, 339], "leverag": 338, "equival": [338, 344, 346, 380, 381, 482, 502, 536, 537, 539, 548, 657, 668, 671, 674, 680], "input_arrai": 338, "adress": 339, "revisit": [339, 346], "dedic": [339, 343, 345, 628, 642, 778, 779], "__div__": 339, "dicat": 339, "futher": 339, "absenc": 339, "pep": 339, "484": 339, "annot": 339, "brittl": 339, "intend": [339, 754, 761], "freeli": 339, "inde": [339, 358], "flexibl": 339, "original_typ": 339, "cumbersom": 339, "sound": 340, "higher": [340, 341, 346, 358, 628, 631, 633, 635, 636, 637], "overview": [340, 357], "handler": [340, 342, 346, 768], "fledg": [341, 342], "syntact": [341, 346], "clip_by_valu": [341, 346], "clamp": [341, 346], "behavior": [341, 358, 482, 547, 548, 746, 747, 748, 750], "fit": [341, 688, 699], "construct": [341, 342, 345, 346, 688, 708, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799, 800, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812], "num": [341, 380, 389, 390], "power_seq": 341, "okai": 341, "bound": 341, "resid": [341, 345], "edg": [341, 346, 688, 689, 690, 695, 709, 768], "larger": [341, 346, 399, 415, 688, 689, 690, 703, 754, 760, 762], "ml_framework": [341, 346, 380, 381], "current_framework": [341, 346], "furthermor": 341, "concaten": [341, 344, 432, 461, 564, 585, 688, 692, 694, 768], "framework_handl": 341, "face": 341, "verbos": [341, 768, 815], "cprint": [341, 814], "framework_stack": 341, "_determine_framework_from_arg": 341, "valueerror": [341, 688, 705], "get_framework": 341, "neither": [341, 482, 486, 543], "illustr": [341, 357], "un": [341, 399, 419], "nn": [341, 346, 380, 391, 768], "init_h": [341, 644, 654], "init_c": [341, 644, 654], "kernel": [341, 358, 644, 654], "recurrent_kernel": [341, 644, 654], "bia": [341, 345, 644, 653, 654, 789, 790, 791, 792, 793, 794, 795, 796, 799], "recurrent_bia": [341, 644, 654], "x_shape": 341, "batch_shap": [341, 343, 346, 564, 607, 644, 654, 655, 656, 657, 681, 734, 735, 789, 798], "timestep": [341, 644, 654, 789, 798], "input_channel": [341, 345, 789, 790, 791, 792, 793, 794, 795, 798, 799], "x_flat": 341, "wi": 341, "wi_x": 341, "wii_x": 341, "wif_x": 341, "wig_x": 341, "wio_x": 341, "recurr": [341, 644, 654], "wh": 341, "lstm": [341, 644, 654, 789], "ht": 341, "ct": 341, "hts_list": 341, "unrol": [341, 344, 644, 654], "wii_xt": 341, "wif_xt": 341, "wig_xt": 341, "wio_xt": 341, "zip": 341, "htm1": 341, "ctm1": 341, "wh_htm1": 341, "whi_htm1": 341, "whf_htm1": 341, "whg_htm1": 341, "who_htm1": 341, "ft": 341, "gt": 341, "ot": 341, "offici": 341, "reliabl": 341, "sacrific": 341, "hear": 341, "virtu": 341, "pure_ivi": 341, "reduce_mean": [341, 344, 345, 346, 768], "reduce_sum": [341, 768], "reduce_var": 341, "compile_graph": [341, 346], "pure_torch": 341, "cat": [341, 346], "backbon": [341, 344], "_layer": 341, "super": [341, 344, 345, 346], "clean": [341, 342, 344], "random_unifrom": 341, "unclean": 341, "wx": 341, "temp": 341, "torchscript": 341, "fn": [341, 343, 359, 360, 361, 362, 363, 364, 365, 366, 367, 399, 416, 417, 432, 441, 442, 564, 566, 625, 714, 715, 720, 721, 722, 724, 725, 726, 771, 773], "example_input": [341, 377, 378], "static_argnum": [341, 377, 378], "static_argnam": [341, 377, 378], "jit": [341, 358], "frontend": 342, "primit": [342, 358], "describ": [342, 346, 754, 755, 759, 760, 761], "hierarch": [342, 344, 345], "straight": [343, 768], "arraywithlinalg": 343, "arraywithlog": 343, "arraywithmath": 343, "arraywithmeta": 343, "arraywithreduct": 343, "is_native_arrai": [343, 564], "_shape": 343, "_size": 343, "functool": 343, "mul": 343, "len": [343, 346, 380, 391], "_dtype": 343, "_devic": 343, "_dev_str": 343, "_pre_repr": 343, "_post_repr": 343, "ndim": [343, 657, 672, 675], "mt": 343, "answer": [343, 358], "consol": 343, "typeerror": 343, "immut": 343, "behav": 343, "claim": 343, "truli": 343, "_native_wrapp": 343, "attributeerror": 343, "genuin": 343, "some_method": 343, "similarli": [343, 380, 391], "rewritten": 343, "__pow__": 343, "strang": 343, "power": [343, 344, 345, 482, 502, 515, 547, 564, 589, 612, 619, 657, 667, 780], "enforc": 343, "notic": 343, "appear": [343, 688, 696], "invers": [343, 357, 482, 484, 485, 487, 489, 490, 491, 492, 493, 657, 664, 671], "_wrap_method": 343, "func_wrapp": [343, 359, 360, 361, 362, 363, 364, 365, 366, 367], "__name__": 343, "non_wrapped_method": 343, "_method_wrap": 343, "native_arg": 343, "native_kwarg": 343, "inner_fn": 343, "whist": 343, "unwrap": 343, "transit": 343, "needlessli": 343, "randn": 343, "_unwrap_method": 343, "method_wrap": 343, "compartment": 343, "public": [343, 564, 574], "newshap": [343, 688, 700, 702], "new_shap": 343, "tidi": 343, "shorter": 343, "crystal": 343, "41": [343, 482, 503, 505, 556, 657, 658, 754, 761], "enough": [343, 344, 345], "ton": 344, "ado": [344, 345], "incred": [344, 358], "hash": 344, "soup": 344, "walk": [344, 345], "dct": 344, "cnt": 344, "combo": [344, 768, 774], "hold": [344, 564, 610, 611], "1000": [344, 482, 556], "uda": 344, "3333": 344, "6667": 344, "178": 344, "new_weight": 344, "0600": 344, "3100": 344, "2400": 344, "6900": 344, "delimit": 344, "autocomplet": 344, "midwai": 344, "agent": 344, "total_spe": 344, "total_height": 344, "total_width": 344, "ag": 344, "tot": 344, "total_": 344, "total_h": 344, "batch_siz": [344, 644, 645, 646, 647, 648, 649, 650, 651, 734, 735], "dir": 344, "adam": [344, 345, 346, 628, 630, 631, 635, 768, 805, 807], "cnt0": 344, "cnt1": 344, "diff_0": 344, "diff_1": 344, "config0": 344, "config1": 344, "Not": [344, 345, 358, 379], "decod": 344, "l0": 344, "l1": [344, 657, 680], "depth": [344, 345, 346, 357, 432, 456, 460, 464, 564, 592, 607, 714, 726, 801, 802], "clearer": 344, "truncat": 344, "decoder__l0": 344, "decoder__l1": 344, "encoder__l0": 344, "encoder__l1": 344, "height": 344, "l0__b": 344, "l0__w": 344, "l1__b": 344, "l1__w": 344, "printabl": 344, "obviou": 344, "foresight": 344, "untidili": 344, "update_ag": 344, "normalize_img": 344, "img": 344, "img_max": 344, "reduce_max": [344, 768], "img_min": 344, "reduce_min": [344, 768], "img_rang": 344, "agent_posit": 344, "agent_veloc": 344, "agent_cam_front_rgb": 344, "agent_cam_front_depth": 344, "agent_cam_rear_rgb": 344, "agent_cam_rear_depth": 344, "agent_cam_lidar": 344, "normal": [344, 688, 706, 732, 733, 734, 737, 803, 804], "cleaner": 344, "camera": 344, "front_rgb": 344, "front_depth": 344, "rear_rgb": 344, "rear_depth": 344, "lidar": 344, "rgb": 344, "rear": 344, "veloc": 344, "cam": 344, "cam_max": 344, "cam_min": 344, "cam_rang": 344, "Of": 344, "ideal": 344, "perman": 344, "afterward": 344, "thread": 344, "incorpor": 344, "pretti": 344, "straightforward": 344, "dataload": [344, 356, 768], "_cnt": 344, "img_": 344, "_dataset_s": 344, "_batch_siz": 344, "_count": [344, 345], "__next__": 344, "filenam": 344, "img_fnam": 344, "fname": 344, "loaded_img": 344, "cv2": 344, "imread": 344, "loader": [344, 358], "32": [344, 369, 371, 482, 503, 505, 644, 647, 650, 657, 670, 741, 745, 754, 755], "batch_slic": 344, "model": [344, 345, 768], "mymodel": [344, 768], "linear0": [344, 345, 768], "linear1": [344, 345, 768], "x_in": [344, 345, 346, 768], "001": [344, 345, 732, 733], "loss_fn": [344, 345, 346, 768], "0145": 344, "grad_fn": 344, "addbackward0": 344, "_create_vari": 345, "output_channel": [345, 789, 790, 791, 792, 793, 794, 795, 798, 799], "with_bia": [345, 789, 799], "_input_channel": 345, "_output_channel": 345, "_w_shape": 345, "_b_shape": 345, "_with_bia": 345, "8979": 345, "3198": 345, "0196": 345, "3126": 345, "3717": 345, "9687": 345, "6958": 345, "5122": 345, "3902": 345, "8800": 345, "5613": 345, "1982": 345, "nightmar": 345, "overcom": 345, "fc": 345, "9563": 345, "impact": 345, "v0": 345, "v1": 345, "6440": 345, "key0": 345, "1823": 345, "8075": 345, "linear3": 345, "v2": 345, "2346": 345, "counter": 345, "hidden": [345, 644, 654, 789, 798], "fed": [345, 432, 476], "1300": 345, "decoupl": 345, "scheme": 345, "weight_initi": [345, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799], "glorotuniform": [345, 780, 789, 790, 791, 792, 793, 794, 795, 796, 798, 799], "bias_initi": [345, 789, 790, 791, 792, 793, 794, 795, 796, 799], "_w_init": 345, "_b_init": 345, "create_vari": [345, 780], "var_shap": [345, 780], "fan_out": [345, 780], "fan_in": [345, 780], "fan_mod": [345, 780], "fan_sum": 345, "slight": 345, "misnom": 345, "saw": 345, "vanilla": [345, 710, 712], "descent": [345, 628, 633, 805, 810], "lar": [345, 628, 635, 636, 805], "lamb": [345, 628, 635, 805], "compile_on_next_step": [345, 801, 802, 805, 806, 807, 808, 809, 810], "_beta1": 345, "_beta2": 345, "_epsilon": 345, "_mw": 345, "_vw": 345, "_first_pass": 345, "_should_compil": 345, "_step": [345, 805, 809], "new_v": 345, "_lr": 345, "isinst": [345, 346, 564, 622], "_inplac": 345, "_stop_gradi": 345, "set_stat": [345, 805, 806, 807, 808, 809, 810], "mw": [345, 628, 630, 631], "vw": [345, 628, 630, 631], "pre": [346, 358, 432], "captur": 346, "sparse_funct": 346, "num_class": [346, 734, 735], "num_dim": 346, "new_axi": 346, "_linear": 346, "to_backend": 346, "jax_graph": 346, "learnabl": [346, 732, 733, 803, 804], "to_ivy_modul": [346, 778], "thinli": 346, "whilst": 346, "to_haiku_modul": 346, "hk": 346, "loss_fn_t": 346, "transform": [346, 357, 644, 652, 653], "without_apply_rng": 346, "rng": 346, "prngkei": 346, "init": 346, "update_rul": 346, "01": [346, 482, 549], "tree_multimap": 346, "mechan": [356, 358, 768], "vision": [356, 768], "robot": [356, 768], "focus": 357, "field": [357, 657, 662, 672, 675, 746, 747, 748], "perfect": 357, "3d": [357, 789, 794, 795], "differenti": 357, "demo": [357, 768], "orient": 357, "pose": 357, "euler": [357, 379], "quaternion": 357, "rotat": 357, "matric": [357, 380, 391, 395, 396, 644, 653, 657, 658, 660, 661, 662, 663, 664, 667, 668, 669, 671, 672, 674, 675, 676, 678], "angl": [357, 482, 492, 508, 555, 562], "ivy_mech": 357, "target_facing_rotation_matrix": 357, "polar_to_cartesian_coord": 357, "ordin": [357, 657, 674], "warp": 357, "optic": 357, "voxel": 357, "ivy_vis": 357, "coords_to_voxel_grid": 357, "render_pixel_coord": 357, "neural": [357, 644, 768, 775, 789], "radianc": 357, "nerf": 357, "trajectori": 357, "motion": 357, "plan": [357, 768], "mobil": 357, "ivy_robot": 357, "sample_spline_path": 357, "rigidmobil": 357, "sample_bodi": 357, "drone": 357, "sample_link": 357, "openai": 357, "swimmer": 357, "cumul": [357, 564, 576, 577], "reward": 357, "supervis": 357, "reinforc": 357, "door": [357, 358], "intersect": 357, "cartpol": 357, "mountain_car": 357, "pendulum": 357, "reacher": 357, "polici": 357, "condit": [357, 377, 378, 714, 724, 725, 741, 745], "learnt": 357, "ture": 357, "ntm": 357, "egospher": 357, "spatial": 357, "esm": 357, "ivy_memori": 357, "egocentr": 357, "room": 357, "inspir": 357, "doubt": 358, "grate": 358, "put": 358, "probe": 358, "undergo": 358, "remark": 358, "surpris": 358, "backward": [358, 482, 548, 657, 679, 763, 764, 766, 767], "lock": 358, "contunu": 358, "minor": 358, "xla": 358, "buffer": 358, "kind": [358, 399, 415, 418, 482, 547, 754, 759, 761], "gold": 358, "dex": 358, "phase": 358, "lax": 358, "scan": 358, "tricki": 358, "predictor": 358, "tight": 358, "driver": 358, "schedul": 358, "algorithm": [358, 644, 645, 646, 647, 648, 649, 650, 651, 789, 790, 791, 792, 793, 794, 795, 796], "dispatch": 358, "Will": 358, "ast": 358, "dynamic": 358, "cond": 358, "jacobian": 358, "checkpoint": 358, "autodiff": 358, "shine": 358, "merci": 358, "superset": 358, "cluster": 358, "compet": 358, "paradigm": 358, "parallelis": [358, 432, 441, 442], "spmd": 358, "mixtur": 358, "expert": 358, "sophist": 358, "depart": 358, "routin": 358, "hundr": 358, "thousand": 358, "deepli": [358, 714, 716], "broadli": 358, "heavili": 358, "supplementari": 358, "Is": 358, "reusabl": 358, "fanci": 358, "fusion": 358, "lose": 358, "vmap": 358, "pmap": 358, "overhead": 358, "ineffici": 358, "eventu": 358, "supplement": 358, "backdoor": 358, "callback": 358, "record": 358, "metric": 358, "somewhat": 358, "outsourc": 358, "inputs_to_ivy_arrai": 359, "gaussian": [369, 370], "leaki": [369, 370, 371], "alpha": [369, 371], "rectifi": [369, 371, 372], "slope": [369, 371], "39": [369, 371, 482, 515, 657, 670, 754, 755], "85": [369, 371, 482, 503, 505], "48": [369, 371, 482, 556, 657, 670, 754, 755], "88": [369, 371, 482, 503, 505, 657, 670, 754, 755], "269": [369, 373], "731": [369, 373], "881": [369, 373], "214": [369, 373], "978": [369, 373], "891": [369, 373], "422": [369, 374], "155": [369, 374], "0768": [369, 374], "231": [369, 374], "693": [369, 374, 682, 687], "49": [369, 374, 482, 556, 754, 755], "147": [369, 374], "363": [369, 374], "3461": [369, 375], "6491": [369, 375], "535": [369, 375], "hyperbol": [369, 376, 482, 485, 490, 493, 508, 555, 562], "55": [369, 376, 644, 650, 657, 670, 754, 755], "501": [369, 376], "762": [369, 376], "964": [369, 376], "faster": [377, 378], "invoc": [377, 378], "718281828459045": 379, "newaxi": 379, "alia": 379, "pi": 379, "141592653589793": 379, "mathemat": [379, 482, 486, 492, 516, 543, 657, 680], "half": [380, 381, 734, 736, 738], "chosen": [380, 381, 482, 492, 741, 745], "distanc": [380, 381], "adjac": [380, 381], "interpret": [380, 382, 392], "uniniti": [380, 383, 384], "n_row": [380, 385], "n_col": [380, 385], "elsewher": [380, 385, 741, 745], "row": [380, 385, 657, 674, 675, 734, 735, 741, 744], "column": [380, 385, 657, 662, 672, 674, 675], "__dlpack__": [380, 386, 432, 477], "interchang": [380, 386, 688, 707], "endpoint": [380, 389], "xy": [380, 391], "coordin": [380, 391, 482, 492], "cartesian": [380, 391], "ij": [380, 391, 754, 755], "rank": [380, 391, 564, 626, 657, 659, 668, 672, 674, 678, 679, 680, 688, 695, 696, 706, 709, 741, 744, 763, 764, 766, 767], "ni": [380, 391], "xi": [380, 391], "n1": [380, 391], "n2": [380, 391], "n3": [380, 391], "accordingli": [380, 391, 482, 516, 657, 680, 741, 743, 746, 747, 748, 750, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767], "xv": [380, 391], "yv": [380, 391], "triangular": [380, 395, 396, 657, 658, 672], "innermost": [380, 395, 396, 657, 658, 660, 661, 662, 663, 664, 668, 669, 671, 672, 674, 675, 676, 678], "mxn": [380, 395, 396, 657, 661, 668, 669, 671, 672, 676, 678], "defaultdtyp": [399, 400], "defaultfloatdtyp": [399, 401], "float_dtyp": [399, 411, 425], "defaultintdtyp": [399, 402], "dtype_in": [399, 403, 404, 414, 419, 420, 421, 431], "incompat": [399, 407], "occur": [399, 408, 741, 742, 743, 746, 747, 748, 750], "data_type_funct": [399, 408], "closest": [399, 409, 482, 506, 517, 518, 549, 563], "floatdtyp": [399, 411], "int_dtyp": [399, 412, 426], "intdtyp": [399, 412], "followng": [399, 415], "occupi": [399, 415, 418, 564, 610, 611], "ep": [399, 415, 657, 668, 671], "smallest_norm": [399, 415], "precis": [399, 415, 482, 543, 556], "encapsul": [399, 418], "type1": [399, 422], "type2": [399, 422], "arrays_and_dtyp": [399, 423], "ret1": [399, 427], "ret2": [399, 427], "noinspect": [400, 401, 402, 433, 629], "pyshadowingnam": [400, 401, 402, 433, 629], "defaultdevic": [432, 433], "__enter__": 432, "_dev": 432, "initialis": 432, "devcloneditem": [432, 454], "multidevitem": [432, 434, 437], "devclonedit": 432, "multidevit": [432, 435, 438, 441, 442, 446], "devclonednest": 432, "multidevnest": [432, 436, 439], "devdistitem": 432, "devdistit": 432, "devdistnest": 432, "devmanag": [432, 440], "dev_mapp": 432, "da_dim_s": 432, "safety_factor": 432, "min_dev_dim_s": 432, "max_dev_dim_step_ratio": 432, "min_unit_dev_tune_step": 432, "min_sf_tune_step": 432, "starting_split_factor": 432, "max_split_factor_step_s": 432, "tune_dev_alloc": 432, "tune_dev_split": 432, "mapper": [432, 441, 442], "receivess": 432, "ratio": [432, 628, 635, 805, 807], "safe": [432, 441], "oom": 432, "tune": 432, "da_tune_step": 432, "ds_tune_step": 432, "to_clon": 432, "to_distribut": 432, "multidevic": [432, 441], "parallel": [432, 441, 442], "mutlidevic": [432, 441], "repeated_config_check": 432, "tune_step": 432, "devmapp": [432, 442], "ret_fn": [432, 441, 442], "queue_class": [432, 441, 442], "worker_class": [432, 441, 442], "worker": [432, 441, 442], "used_dev": [432, 441], "sf": [432, 441], "devmappermultiproc": 432, "multidev": [432, 443, 444, 445, 464], "profil": 432, "save_dir": [432, 447], "deviceic": [432, 453], "spread": [432, 464], "139740789224448": [432, 466], "physic": [432, 468], "x3": [432, 470], "x4": [432, 470], "process_specif": [432, 471, 481], "percentag": [432, 471], "ram": [432, 471, 478, 481], "alon": [432, 471, 481], "attr_onli": [432, 472], "chunk": [432, 474, 475, 476], "max_chunk_s": [432, 476], "chunk_siz": [432, 476], "input_ax": [432, 476], "output_ax": [432, 476], "feed": [432, 476], "fist": [432, 476], "stream": [432, 477], "caveat": [432, 477], "portabl": [432, 477, 768], "gb": [432, 478, 481], "reset": [432, 480], "magnitud": [482, 483, 486, 543, 657, 675, 676], "princip": [482, 484, 487, 489, 491], "cosin": [482, 484, 485, 507, 508], "x1_i": [482, 486, 492, 494, 496, 498, 499, 501, 502, 503, 505, 509, 510, 518, 519, 520, 524, 525, 534, 535, 537, 539, 540, 543, 545, 547, 548, 560], "x2_i": [482, 486, 492, 494, 496, 498, 499, 501, 502, 503, 505, 509, 510, 518, 519, 520, 524, 525, 534, 535, 537, 539, 540, 543, 545, 547, 548, 560], "finit": [482, 486, 492, 521, 543, 547, 548], "nor": [482, 486, 543], "nearest": [482, 486, 543, 549], "2019": [482, 486, 516, 543], "commut": [482, 486], "sine": [482, 487, 489, 490, 551, 554, 555], "57": [482, 487, 489, 503, 505, 508], "524": [482, 487, 489], "644": [482, 487, 489], "201": [482, 487, 489, 549], "305": [482, 487, 489], "412": [482, 487, 489], "quotient": [482, 492], "notat": [482, 492, 754, 755], "denot": [482, 492], "pair": [482, 492, 644, 656, 657, 659], "quadrant": [482, 492], "3\u03c0": [482, 492], "549": [482, 493], "bitwis": [482, 494, 499, 501, 503, 505, 540], "AND": [482, 494, 535, 763, 764, 766], "binari": [482, 494, 499, 501, 503, 505, 540, 682, 683], "invert": [482, 495], "arithmet": [482, 502, 754, 757], "propag": [482, 502, 754, 756, 757, 758, 760, 761, 762], "thu": [482, 502, 547, 548, 657, 662], "lh": [482, 502], "rh": [482, 502], "xor": [482, 503, 505, 540], "78": [482, 503, 505, 657, 670, 754, 755], "91": [482, 503, 505, 657, 670, 754, 755], "23": [482, 503, 505, 644, 650, 657, 661, 741, 745], "66": [482, 503, 505, 657, 670, 754, 755], "77": [482, 503, 505, 657, 670, 754, 755], "79": [482, 503, 505], "89": [482, 503, 505, 657, 677, 754, 761], "98": [482, 503, 505, 657, 670, 741, 745, 754, 755], "26": [482, 503, 505, 644, 651, 657, 661, 670, 677, 754, 755], "21": [482, 503, 505, 564, 576, 657, 661, 670, 682, 687, 754, 755], "34": [482, 503, 505, 556], "24": [482, 503, 505, 556, 564, 576, 657, 661, 670, 754, 755], "51": [482, 503, 505], "27": [482, 503, 505, 508, 556, 644, 656, 657, 670, 754, 755], "74": [482, 503, 505], "59": [482, 503, 505], "416": [482, 507], "122": [482, 508], "368": [482, 508], "670": [482, 508], "202": [482, 508, 549], "548": [482, 508], "1490": [482, 508], "dividend": [482, 509, 548], "divisor": [482, 509, 548, 628, 630, 631, 635, 754, 760, 762, 805, 806, 807], "gauss": [482, 511, 514], "exponenti": [482, 511, 514, 515, 534, 547], "logarithm": [482, 515, 526, 528, 529, 530, 531, 533, 534, 657, 673], "72": [482, 515, 657, 670, 754, 755], "accur": [482, 516], "fdlibm": [482, 516], "compliant": [482, 516, 536, 537, 539, 754, 756, 757, 758], "greatest": [482, 517, 518], "out_i": [482, 521, 522, 523], "threshold": [482, 541, 542], "exce": [482, 542], "y_i": [482, 544], "expon": [482, 547, 564, 619], "versu": [482, 547], "odd": [482, 547], "modulu": [482, 548], "primarili": [482, 548], "5654": [482, 549], "034": [482, 549], "433": [482, 549], "343": [482, 549], "44": [482, 549, 556, 557, 559, 657, 670, 741, 745, 754, 755], "30": [482, 549, 657, 670, 754, 755, 780, 786], "81": [482, 549, 557, 559, 754, 755], "527": [482, 549], "301": [482, 549], "indistinguish": [482, 556], "infinit": [482, 556], "83": [482, 556], "32455532": [482, 556], "89897949": [482, 556], "50": [482, 556, 657, 670, 741, 744, 754, 755], "31": [482, 556], "169": [482, 556], "63": [482, 556, 657, 658, 670, 754, 755], "47": [482, 556], "73": [482, 556, 657, 658, 732, 733], "93": [482, 556], "35": [482, 556, 644, 656, 657, 659, 741, 745, 754, 755], "09": [482, 557, 559, 644, 656], "61": [482, 557, 559, 682, 683], "546": [482, 561], "842": [482, 561], "916": [482, 561, 682, 683], "996": [482, 561], "328": [482, 561], "real": [482, 562], "462": [482, 562], "604": [482, 562], "983": [482, 562], "976": [482, 562], "997": [482, 562, 732, 733], "9997": [482, 562], "99997": [482, 562], "999996": [482, 562], "decim": [482, 563], "inspect": [564, 566, 772, 773], "downscal": [564, 572, 573], "60": [564, 576, 657, 670, 754, 755], "default_v": [564, 579], "catch_except": [564, 579], "rev": [564, 579], "with_cal": [564, 579], "arrang": [564, 580], "123": [564, 583], "mod": [564, 584], "max_freq": [564, 585], "num_band": [564, 585], "pad": [564, 585, 644, 645, 646, 647, 648, 649, 650, 651, 688, 695, 709, 789, 790, 791, 792, 793, 794, 795, 796], "fourier": [564, 585], "band": [564, 585], "linearli": [564, 585, 657, 674], "oppos": [564, 585], "geometr": [564, 585], "seen_set": [564, 592], "local_set": [564, 592], "decrement": [564, 596], "is_arrai": 564, "allow_dupl": [564, 604], "forkserv": [564, 605], "spawn": [564, 605], "hot": [564, 607], "scatter": [564, 607, 610, 611], "overrid": [564, 607], "tmp_dr": [564, 615], "temporari": [564, 615], "min_denomin": [564, 618], "stabil": [564, 618, 619, 751, 752, 753], "_min_denomin": [564, 618], "min_bas": [564, 619], "_min_bas": [564, 619, 732, 733, 803, 804], "100000023841858": [564, 622], "200000047683716": [564, 622], "299999952316284": [564, 622], "400000095367432": [564, 622], "599999904632568": [564, 622], "101": [564, 623], "unpack": [564, 626], "gradienttrack": [628, 629], "delta": [628, 630], "cost": [628, 630, 631, 633, 635, 636, 637, 710, 711, 712, 713], "ws": [628, 630, 631, 633, 635, 636, 637], "en": [628, 630, 631], "wikipedia": [628, 630, 631], "wiki": [628, 630, 631], "stochastic_gradient_desc": [628, 630, 631], "dc": [628, 630, 631, 633, 635, 636, 637], "dw": [628, 630, 631, 633, 635, 636, 637], "averag": [628, 630, 631, 635, 710, 711, 712], "forget": [628, 630, 631, 635, 805, 806, 807], "rate": [628, 631, 633, 635, 636, 637, 710, 711, 712, 713, 789, 800, 805, 806, 807, 808, 809, 810], "ws_new": [628, 631, 633, 635, 636, 637], "retain": [628, 632], "trust": [628, 635, 805, 807], "decai": [628, 635, 636, 805, 807, 808], "layerwis": [628, 636, 805, 808], "stride": [644, 645, 646, 647, 648, 649, 650, 651, 789, 790, 791, 792, 793, 794, 795, 796], "data_format": [644, 645, 646, 647, 648, 649, 650, 651, 789, 790, 791, 792, 793, 794, 795, 796], "nwc": [644, 645, 646, 789, 790, 791], "dilat": [644, 645, 646, 647, 648, 649, 650, 651, 789, 790, 791, 792, 793, 794, 795, 796], "convolut": [644, 645, 646, 647, 648, 649, 650, 651, 789, 790, 791, 792, 793, 794, 795, 796], "d_in": [644, 645, 646, 647, 648, 649, 650], "fw": [644, 645, 646, 647, 648, 649, 650, 651], "d_out": [644, 645, 646, 647, 648, 649, 650], "slide": [644, 645, 646, 647, 648, 649, 650, 651, 789, 790, 791, 792, 793, 794, 795, 796], "ncw": [644, 645, 646, 789, 790, 791], "wio": [644, 645], "output_shap": [644, 646, 648, 650, 789, 791, 793, 795], "nhwc": [644, 647, 648, 651, 789, 792, 793, 796], "fh": [644, 647, 648, 649, 650, 651], "nchw": [644, 647, 648, 651, 789, 792, 793, 796], "hwio": [644, 647], "unequ": [644, 647], "28": [644, 647, 650, 651, 657, 670, 754, 755], "unsqueez": [644, 647, 651], "ndhwc": [644, 649, 650, 789, 794, 795], "volum": [644, 649], "fd": [644, 649, 650], "ncdhw": [644, 649, 650, 789, 794, 795], "dhwio": [644, 649], "256": [644, 650], "258": [644, 650], "128": [644, 650, 657, 670], "depthwis": [644, 651, 789, 796], "333": [644, 651], "inp": [644, 651], "prob": [644, 652, 734, 735, 789, 797], "randomli": [644, 652, 789, 797], "bernoulli": [644, 652], "out_featur": [644, 652, 653], "incom": [644, 653], "outer_batch_shap": [644, 653], "inner_batch_shap": [644, 653], "in_featur": [644, 653], "cell": [644, 654, 789, 798], "num_queri": [644, 655, 656], "x_feat_dim": [644, 655], "num_kei": [644, 655, 656], "cont_feat_dim": [644, 655], "numhead": [644, 655], "feat_dim": [644, 655, 656], "out_feat_dim": [644, 655], "score": [644, 656], "04": [644, 656], "03": [644, 656, 732, 733], "08": [644, 656], "decomposit": [657, 658, 672, 675], "symmetr": [657, 658, 662, 663, 681], "u": [657, 658, 675], "577": [657, 658], "707": [657, 658], "vif": [657, 659], "92": [657, 660], "293": [657, 660], "46997": [657, 660], "axis2": [657, 661], "eigendecomposit": [657, 662], "qlq\u1d40": [657, 662], "orthogon": [657, 662], "eig": [657, 662], "namedtupl": [657, 662, 672, 675, 746, 747, 748], "eigenvalu": [657, 662, 663], "eigenvector": [657, 662], "75": [657, 664, 670], "prepend": [657, 665], "fro": [657, 666], "rtol": [657, 668, 671], "singular": [657, 668, 671, 675, 676], "toler": [657, 668, 671], "largest_singular_valu": [657, 668, 671], "array_lik": [657, 670], "33": [657, 670, 732, 733, 754, 755], "36": [657, 670, 754, 755], "45": [657, 670, 688, 704, 732, 733, 754, 755], "65": [657, 670, 754, 755], "84": [657, 670, 754, 755], "105": [657, 670, 682, 683], "112": [657, 670, 754, 755], "104": [657, 670, 754, 755], "120": [657, 670], "moor": [657, 671], "penros": [657, 671], "pseudo": [657, 671], "orthonorm": [657, 672, 675], "2d": [657, 673, 789, 792, 793, 796], "logdet": [657, 673], "coeffici": [657, 674], "full_matric": [657, 675], "usvh": [657, 675], "vh": [657, 675], "hermitian": [657, 675], "et": [657, 675], "cetera": [657, 675], "adjoint": [657, 675], "reconstruct": [657, 675, 746, 747, 749], "reconstructed_x": [657, 675], "contract": [657, 677, 754, 755], "doubl": [657, 677], "singleton": [657, 680, 688, 705, 741, 743, 754, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767], "liter": [657, 680], "manhattan": [657, 680], "l2": [657, 680], "euclidean": [657, 680], "mathbf": [657, 681], "mathbb": [657, 681], "skew": [657, 681], "entropi": [682, 683, 684, 686, 687], "predict": [682, 683, 684, 686, 687], "smooth": [682, 683, 684, 686, 687], "223": [682, 683], "357": [682, 683, 687], "511": [682, 683], "discret": [682, 684, 686], "3862944": [682, 684, 686], "35667497": [682, 684, 686], "spars": [682, 687], "logit": [682, 687], "793291": [682, 687], "512926": [682, 687], "before_1": [688, 695, 709], "after_1": [688, 695, 709], "before_n": [688, 695, 709], "after_n": [688, 695, 709], "insert": [688, 696, 714, 719, 741, 742], "manipulation_funct": [688, 696], "reorder": [688, 697], "permut": [688, 698, 707], "repetit": [688, 699, 708], "restor": [688, 703], "classivi": [688, 704], "famili": [688, 706], "intxx": [688, 706], "floatxx": [688, 706], "fomaml_step": 710, "inner_cost_fn": [710, 711, 712], "outer_cost_fn": [710, 711, 712], "inner_grad_step": [710, 711, 712, 713], "inner_learning_r": [710, 711, 712, 713], "inner_optimization_step": [710, 711, 712, 713], "inner_batch_fn": [710, 711, 712], "outer_batch_fn": [710, 711, 712], "average_across_step": [710, 711, 712], "inner_v": [710, 711, 712], "keep_inner_v": [710, 711, 712], "outer_v": [710, 711, 712], "keep_outer_v": [710, 711, 712], "return_inner_v": [710, 711, 712, 713], "num_task": [710, 711, 712, 713], "maml": [710, 711, 712], "recev": [710, 711, 712], "0x7f667e6443a0": [710, 711, 712, 713], "maml_step": 710, "rece": [710, 712], "reptile_step": 710, "cost_fn": [710, 713], "reptil": [710, 713], "receivng": [710, 713], "all_nested_indic": 714, "include_nest": [714, 715], "_index": [714, 715, 725], "_base": [714, 715, 724, 725], "copy_nest": 714, "to_mut": [714, 716, 726], "mutabl": [714, 716, 726], "insert_into_nest_at_index": 714, "insert_into_nest_at_indic": 714, "map_nest_at_index": 714, "map_nest_at_indic": 714, "multi_index_nest": 714, "nested_ani": 714, "check_nest": [714, 724, 725], "conditon": [714, 724, 725], "nested_indices_wher": 714, "stop_after_n_found": [714, 725], "_depth": [714, 726], "_tuple_check_fn": [714, 726], "_list_check_fn": [714, 726], "_dict_check_fn": [714, 726], "nested_multi_map": 714, "nest0": [714, 727], "ivy_arrai": [714, 727], "funciton": [714, 727], "prune_nest_at_index": 714, "prune_nest_at_indic": 714, "set_nest_at_index": 714, "set_nest_at_indic": 714, "mini": [732, 733, 803, 804], "gamma": [732, 733], "beta": [732, 733], "0976": [732, 733], "3452": [732, 733], "2740": [732, 733], "1047": [732, 733], "5886": [732, 733], "2732": [732, 733], "7696": [732, 733], "7024": [732, 733], "2518": [732, 733], "58": [732, 733, 746, 747], "283": [732, 733], "585": [732, 733], "909": [732, 733], "628": [732, 733], "225": [732, 733], "425": [732, 733], "norm_idx": [732, 733], "228": [732, 733], "0285": [732, 733], "199": [732, 733], "204": [732, 733], "population_s": [734, 735], "num_sampl": [734, 735], "draw": [734, 735, 737, 738], "unnorm": [734, 735], "drawn": [734, 735, 736, 737, 738], "home": [734, 735, 737, 738], "uniformli": [734, 736, 738], "highest": [734, 736], "parameter": [734, 737, 738], "6444774682897879": [734, 737], "811": [734, 737], "508": [734, 737], "564": [734, 737], "7268672": [734, 737], "968": [734, 737], "175": [734, 737, 746, 747], "064": [734, 737], "40935726": [734, 737], "556": [734, 737], "26431865": [734, 738], "475": [734, 738], "878": [734, 738], "861": [734, 738], "89150229": [734, 738], "89629126": [734, 738], "94198485": [734, 738], "91405606": [734, 738], "72848724": [734, 738], "7550739": [734, 738], "624": [734, 738], "00109": [734, 738], "occurr": [741, 742, 743, 746, 747], "yield": [741, 745], "43": [741, 745], "x_j": [746, 747, 748, 750], "impli": [746, 747, 748, 750], "inverse_indic": [746, 747, 749], "aggreg": [746, 747], "fourth": [746, 747], "607": [746, 747], "735": [746, 747], "667": [746, 747], "381": [746, 747], "857": [746, 747], "0396": [746, 747], "166": [746, 747], "828": [746, 747], "144": [746, 747], "40501155": [746, 747], "77361575": [746, 747], "97776199": [746, 747], "36831157": [746, 747], "89148434": [746, 747], "9512272": [746, 747], "67542176": [746, 747], "41985657": [746, 747], "23478023": [746, 747], "1141": [746, 747], "8101": [746, 747], "9298": [746, 747], "8460": [746, 747], "2119": [746, 747], "3519": [746, 747], "6252": [746, 747], "4033": [746, 747], "7443": [746, 747], "2577": [746, 747], "3707": [746, 747], "0545": [746, 747], "3238": [746, 747], "5944": [746, 747], "0775": [746, 747], "4327": [746, 747], "176": [746, 747], "889": [746, 747], "763": [746, 747], "071": [746, 747], "262": [746, 747], "456": [746, 747], "114": [746, 747], "349": [746, 747], "615": [746, 747], "594": [746, 747], "335": [746, 747], "212": [746, 747], "457": [746, 747], "827": [746, 747], "209": [746, 747], "ascend": [751, 752], "einstein": [754, 755], "summat": [754, 755], "seq": [754, 755], "jk": [754, 755], "ik": [754, 755], "126": [754, 755], "510": [754, 755], "99": [754, 755], "108": [754, 755], "117": [754, 755], "sentinel": [754, 756, 758], "unsign": [754, 759, 761], "degre": [754, 760, 762], "bessel": [754, 760, 762], "8164966": [754, 760], "varianc": [754, 762], "unbias": [754, 762], "simplicit": [763, 764, 766], "autom": 768, "grow": 768, "ai": 768, "got": 768, "colab": 768, "sharp": 768, "weekli": 768, "event": 768, "immedi": 768, "favorit": 768, "jax_concat": 768, "tf_concat": 768, "np_concat": 768, "mx_concat": 768, "torch_concat": 768, "prompt": 768, "get_devic": 768, "reduce_prod": 768, "gradient_imag": 768, "linalg": 768, "bilinear_resampl": 768, "stack_imag": 768, "neural_net": 768, "ecosystem": [768, 774], "popular": [768, 774], "acceler": 768, "articl": 768, "lenton2021ivi": 768, "inter": 768, "lenton": 768, "daniel": 768, "pardo": 768, "fabio": 768, "falck": 768, "fabian": 768, "jame": 768, "stephen": 768, "clark": 768, "ronald": 768, "journal": 768, "arxiv": 768, "preprint": 768, "2102": 768, "02886": 768, "2021": 768, "add_array_spec": 771, "fn_array_spec": 771, "geglu": 775, "native_modul": [778, 779], "native_module_class": [778, 779], "firstlayersiren": 780, "kaimingnorm": [780, 784], "negative_slop": 780, "Ones": 780, "siren": 780, "w0": [780, 786], "filter_s": [789, 790, 791], "1d": [789, 790, 791], "conv1dtranspos": 789, "filter_shap": [789, 792, 793, 794, 795, 796], "conv2dtranspos": 789, "conv3dtranspos": 789, "depthwiseconv2d": 789, "num_channel": [789, 796], "bernoul": [789, 797], "num_lay": [789, 798], "return_sequ": [789, 798], "return_st": [789, 798], "get_initial_st": [789, 798], "dens": [789, 799], "multiheadattent": 789, "query_dim": [789, 800], "head_dim": [789, 800], "dropout_r": [789, 800], "context_dim": [789, 800], "with_to_q_fn": [789, 800], "with_to_kv_fn": [789, 800], "with_to_out_fn": [789, 800], "build_mod": [789, 800, 801, 802], "on_init": [789, 800, 801, 802], "__call__": [789, 800, 801, 802], "store_var": [801, 802], "arg_stateful_idx": [801, 802], "kwarg_stateful_idx": [801, 802], "fallback_to_non_compil": [801, 802, 805, 809], "with_partial_v": [801, 802], "initialz": [801, 802], "from_cal": [801, 802], "check_submod_ret": [801, 802], "get_mod_kei": [801, 802], "top_mod": [801, 802], "mod_depth": [801, 802], "mod_height": [801, 802], "mod_with_top_mod_key_chain": [801, 802], "save_weight": [801, 802], "weights_path": [801, 802], "show_mod_in_top_mod": [801, 802], "upper_depth": [801, 802], "lower_depth": [801, 802], "show_structur": [801, 802], "show_v_in_top_v": [801, 802], "sub_mod": [801, 802], "show_v": [801, 802], "track_submod_call_ord": [801, 802], "track_submod_ret": [801, 802], "v_with_top_v_key_chain": [801, 802], "layernorm": 803, "normalized_shap": [803, 804], "elementwise_affin": [803, 804], "trail": [803, 804], "affin": [803, 804], "0001": [805, 806, 807], "init_on_first_step": [805, 809], "ignore_miss": [805, 809], "overriden": [805, 809], "sgd": 805, "stochast": [805, 810], "sub_modul": [811, 812]}, "objects": {"ivy.array": [[0, 0, 0, "-", "activations"], [2, 0, 0, "-", "array_methods"], [93, 0, 0, "-", "conversions"], [98, 0, 0, "-", "creation"], [100, 0, 0, "-", "data_types"], [102, 0, 0, "-", "device"], [104, 0, 0, "-", "elementwise"], [106, 0, 0, "-", "general"], [108, 0, 0, "-", "gradients"], [110, 0, 0, "-", "image"], [112, 0, 0, "-", "layers"], [114, 0, 0, "-", "linear_algebra"], [116, 0, 0, "-", "losses"], [118, 0, 0, "-", "manipulation"], [120, 0, 0, "-", "norms"], [122, 0, 0, "-", "random"], [124, 0, 0, "-", "searching"], [126, 0, 0, "-", "set"], [128, 0, 0, "-", "sorting"], [130, 0, 0, "-", "statistical"], [132, 0, 0, "-", "utility"], [134, 0, 0, "-", "wrapping"]], "ivy.array.activations": [[1, 1, 1, "", "ArrayWithActivations"]], "ivy.array.array_methods": [[3, 2, 1, "", "abs"], [4, 2, 1, "", "acos"], [5, 2, 1, "", "acosh"], [6, 2, 1, "", "add"], [765, 2, 1, "", "all"], [8, 2, 1, "", "all_equal"], [9, 2, 1, "", "any"], [10, 2, 1, "", "argsort"], [488, 2, 1, "", "asin"], [12, 2, 1, "", "asinh"], [13, 2, 1, "", "atan"], [14, 2, 1, "", "atan2"], [15, 2, 1, "", "atanh"], [16, 2, 1, "", "binary_cross_entropy"], [17, 2, 1, "", "bitwise_and"], [18, 2, 1, "", "bitwise_invert"], [497, 2, 1, "", "bitwise_left_shift"], [500, 2, 1, "", "bitwise_or"], [21, 2, 1, "", "bitwise_right_shift"], [504, 2, 1, "", "bitwise_xor"], [23, 2, 1, "", "can_cast"], [24, 2, 1, "", "ceil"], [25, 2, 1, "", "clip"], [693, 2, 1, "", "concat"], [27, 2, 1, "", "constant_pad"], [28, 2, 1, "", "cos"], [29, 2, 1, "", "cosh"], [685, 2, 1, "", "cross_entropy"], [31, 2, 1, "", "divide"], [32, 2, 1, "", "einsum"], [33, 2, 1, "", "equal"], [512, 2, 1, "", "erf"], [35, 2, 1, "", "exp"], [36, 2, 1, "", "expand_dims"], [37, 2, 1, "", "expm1"], [38, 2, 1, "", "flip"], [39, 2, 1, "", "floor"], [40, 2, 1, "", "floor_divide"], [41, 2, 1, "", "greater"], [42, 2, 1, "", "greater_equal"], [43, 2, 1, "", "isfinite"], [44, 2, 1, "", "isinf"], [45, 2, 1, "", "isnan"], [46, 2, 1, "", "layer_norm"], [47, 2, 1, "", "less"], [48, 2, 1, "", "less_equal"], [527, 2, 1, "", "log"], [50, 2, 1, "", "log10"], [51, 2, 1, "", "log1p"], [532, 2, 1, "", "log2"], [53, 2, 1, "", "logaddexp"], [54, 2, 1, "", "logical_and"], [55, 2, 1, "", "logical_not"], [538, 2, 1, "", "logical_or"], [57, 2, 1, "", "logical_xor"], [58, 2, 1, "", "matmul"], [59, 2, 1, "", "max"], [60, 2, 1, "", "mean"], [61, 2, 1, "", "min"], [62, 2, 1, "", "multiply"], [63, 2, 1, "", "negative"], [64, 2, 1, "", "not_equal"], [65, 2, 1, "", "permute_dims"], [66, 2, 1, "", "positive"], [67, 2, 1, "", "pow"], [68, 2, 1, "", "prod"], [69, 2, 1, "", "remainder"], [70, 2, 1, "", "repeat"], [701, 2, 1, "", "reshape"], [72, 2, 1, "", "roll"], [73, 2, 1, "", "round"], [74, 2, 1, "", "sign"], [552, 2, 1, "", "sin"], [76, 2, 1, "", "sinh"], [77, 2, 1, "", "sort"], [78, 2, 1, "", "sparse_cross_entropy"], [79, 2, 1, "", "sqrt"], [558, 2, 1, "", "square"], [81, 2, 1, "", "squeeze"], [82, 2, 1, "", "stack"], [83, 2, 1, "", "std"], [84, 2, 1, "", "subtract"], [85, 2, 1, "", "sum"], [86, 2, 1, "", "swapaxes"], [87, 2, 1, "", "tan"], [88, 2, 1, "", "tanh"], [89, 2, 1, "", "tile"], [90, 2, 1, "", "trunc"], [91, 2, 1, "", "var"], [92, 2, 1, "", "zero_pad"]], "ivy.array.conversions": [[94, 2, 1, "", "args_to_ivy"], [95, 2, 1, "", "args_to_native"], [96, 2, 1, "", "to_ivy"], [97, 2, 1, "", "to_native"]], "ivy.array.creation": [[99, 1, 1, "", "ArrayWithCreation"]], "ivy.array.data_types": [[101, 1, 1, "", "ArrayWithDataTypes"]], "ivy.array.data_types.ArrayWithDataTypes": [[101, 3, 1, "", "can_cast"]], "ivy.array.device": [[103, 1, 1, "", "ArrayWithDevice"]], "ivy.array.elementwise": [[105, 1, 1, "", "ArrayWithElementwise"]], "ivy.array.elementwise.ArrayWithElementwise": [[105, 3, 1, "", "abs"], [105, 3, 1, "", "acos"], [105, 3, 1, "", "acosh"], [105, 3, 1, "", "add"], [105, 3, 1, "", "asin"], [105, 3, 1, "", "asinh"], [105, 3, 1, "", "atan"], [105, 3, 1, "", "atan2"], [105, 3, 1, "", "atanh"], [105, 3, 1, "", "bitwise_and"], [105, 3, 1, "", "bitwise_invert"], [105, 3, 1, "", "bitwise_left_shift"], [105, 3, 1, "", "bitwise_or"], [105, 3, 1, "", "bitwise_right_shift"], [105, 3, 1, "", "bitwise_xor"], [105, 3, 1, "", "ceil"], [105, 3, 1, "", "cos"], [105, 3, 1, "", "cosh"], [105, 3, 1, "", "divide"], [105, 3, 1, "", "equal"], [105, 3, 1, "", "erf"], [105, 3, 1, "", "exp"], [105, 3, 1, "", "expm1"], [105, 3, 1, "", "floor"], [105, 3, 1, "", "floor_divide"], [105, 3, 1, "", "greater"], [105, 3, 1, "", "greater_equal"], [105, 3, 1, "", "isfinite"], [105, 3, 1, "", "isinf"], [105, 3, 1, "", "isnan"], [105, 3, 1, "", "less"], [105, 3, 1, "", "less_equal"], [105, 3, 1, "", "log"], [105, 3, 1, "", "log10"], [105, 3, 1, "", "log1p"], [105, 3, 1, "", "log2"], [105, 3, 1, "", "logaddexp"], [105, 3, 1, "", "logical_and"], [105, 3, 1, "", "logical_not"], [105, 3, 1, "", "logical_or"], [105, 3, 1, "", "logical_xor"], [105, 3, 1, "", "multiply"], [105, 3, 1, "", "negative"], [105, 3, 1, "", "not_equal"], [105, 3, 1, "", "positive"], [105, 3, 1, "", "pow"], [105, 3, 1, "", "remainder"], [105, 3, 1, "", "round"], [105, 3, 1, "", "sign"], [105, 3, 1, "", "sin"], [105, 3, 1, "", "sinh"], [105, 3, 1, "", "sqrt"], [105, 3, 1, "", "square"], [105, 3, 1, "", "subtract"], [105, 3, 1, "", "tan"], [105, 3, 1, "", "tanh"], [105, 3, 1, "", "trunc"]], "ivy.array.general": [[107, 1, 1, "", "ArrayWithGeneral"]], "ivy.array.general.ArrayWithGeneral": [[107, 3, 1, "", "all_equal"]], "ivy.array.gradients": [[109, 1, 1, "", "ArrayWithGradients"]], "ivy.array.image": [[111, 1, 1, "", "ArrayWithImage"]], "ivy.array.layers": [[113, 1, 1, "", "ArrayWithLayers"]], "ivy.array.linear_algebra": [[115, 1, 1, "", "ArrayWithLinearAlgebra"]], "ivy.array.linear_algebra.ArrayWithLinearAlgebra": [[115, 3, 1, "", "matmul"]], "ivy.array.losses": [[117, 1, 1, "", "ArrayWithLosses"]], "ivy.array.losses.ArrayWithLosses": [[117, 3, 1, "", "binary_cross_entropy"], [117, 3, 1, "", "cross_entropy"], [117, 3, 1, "", "sparse_cross_entropy"]], "ivy.array.manipulation": [[119, 1, 1, "", "ArrayWithManipulation"]], "ivy.array.manipulation.ArrayWithManipulation": [[119, 3, 1, "", "clip"], [119, 3, 1, "", "concat"], [119, 3, 1, "", "constant_pad"], [119, 3, 1, "", "expand_dims"], [119, 3, 1, "", "flip"], [119, 3, 1, "", "permute_dims"], [119, 3, 1, "", "repeat"], [119, 3, 1, "", "reshape"], [119, 3, 1, "", "roll"], [119, 3, 1, "", "squeeze"], [119, 3, 1, "", "stack"], [119, 3, 1, "", "swapaxes"], [119, 3, 1, "", "tile"], [119, 3, 1, "", "zero_pad"]], "ivy.array.norms": [[121, 1, 1, "", "ArrayWithNorms"]], "ivy.array.norms.ArrayWithNorms": [[121, 3, 1, "", "layer_norm"]], "ivy.array.random": [[123, 1, 1, "", "ArrayWithRandom"]], "ivy.array.searching": [[125, 1, 1, "", "ArrayWithSearching"]], "ivy.array.set": [[127, 1, 1, "", "ArrayWithSet"]], "ivy.array.sorting": [[129, 1, 1, "", "ArrayWithSorting"]], "ivy.array.sorting.ArrayWithSorting": [[129, 3, 1, "", "argsort"], [129, 3, 1, "", "sort"]], "ivy.array.statistical": [[131, 1, 1, "", "ArrayWithStatistical"]], "ivy.array.statistical.ArrayWithStatistical": [[131, 3, 1, "", "einsum"], [131, 3, 1, "", "max"], [131, 3, 1, "", "mean"], [131, 3, 1, "", "min"], [131, 3, 1, "", "prod"], [131, 3, 1, "", "std"], [131, 3, 1, "", "sum"], [131, 3, 1, "", "var"]], "ivy.array.utility": [[133, 1, 1, "", "ArrayWithUtility"]], "ivy.array.utility.ArrayWithUtility": [[133, 3, 1, "", "all"], [133, 3, 1, "", "any"]], "ivy.array.wrapping": [[135, 2, 1, "", "add_ivy_array_instance_methods"]], "ivy": [[136, 0, 0, "-", "backend_handler"], [359, 0, 0, "-", "func_wrapper"], [771, 0, 0, "-", "inspection"], [814, 0, 0, "-", "verbosity"]], "ivy.backend_handler": [[136, 1, 1, "", "ContextManager"], [138, 2, 1, "", "choose_random_backend"], [139, 2, 1, "", "clear_backend_stack"], [140, 2, 1, "", "current_backend"], [141, 2, 1, "", "get_backend"], [142, 2, 1, "", "set_backend"], [143, 2, 1, "", "try_import_ivy_jax"], [144, 2, 1, "", "try_import_ivy_mxnet"], [145, 2, 1, "", "try_import_ivy_numpy"], [146, 2, 1, "", "try_import_ivy_tf"], [147, 2, 1, "", "try_import_ivy_torch"], [148, 2, 1, "", "unset_backend"]], "ivy.backend_handler.ContextManager": [[136, 3, 1, "", "__init__"]], "ivy.container": [[153, 0, 0, "-", "activations"], [155, 0, 0, "-", "base"], [157, 0, 0, "-", "container"], [160, 0, 0, "-", "container_methods"], [282, 0, 0, "-", "creation"], [284, 0, 0, "-", "data_types"], [286, 0, 0, "-", "device"], [288, 0, 0, "-", "elementwise"], [290, 0, 0, "-", "general"], [292, 0, 0, "-", "gradients"], [294, 0, 0, "-", "image"], [296, 0, 0, "-", "layers"], [298, 0, 0, "-", "linear_algebra"], [300, 0, 0, "-", "losses"], [302, 0, 0, "-", "manipulation"], [304, 0, 0, "-", "norms"], [306, 0, 0, "-", "random"], [308, 0, 0, "-", "searching"], [310, 0, 0, "-", "set"], [312, 0, 0, "-", "sorting"], [314, 0, 0, "-", "statistical"], [316, 0, 0, "-", "utility"], [318, 0, 0, "-", "wrapping"]], "ivy.container.activations": [[154, 1, 1, "", "ContainerWithActivations"]], "ivy.container.base": [[156, 1, 1, "", "ContainerBase"]], "ivy.container.base.ContainerBase": [[156, 3, 1, "", "__getitem__"], [156, 3, 1, "", "__init__"], [156, 3, 1, "", "__setitem__"], [156, 3, 1, "", "all_false"], [156, 3, 1, "", "all_key_chains"], [156, 3, 1, "", "all_true"], [156, 3, 1, "", "arrays_as_lists"], [156, 3, 1, "", "as_arrays"], [156, 3, 1, "", "as_bools"], [156, 3, 1, "", "as_ones"], [156, 3, 1, "", "as_random_uniform"], [156, 3, 1, "", "as_variables"], [156, 3, 1, "", "as_zeros"], [156, 3, 1, "", "assert_contains_sub_container"], [156, 3, 1, "", "assert_contains_sub_structure"], [156, 3, 1, "", "assert_identical"], [156, 3, 1, "", "assert_identical_structure"], [156, 3, 1, "", "at_key_chain"], [156, 3, 1, "", "at_key_chains"], [156, 3, 1, "", "at_keys"], [156, 3, 1, "", "clip"], [156, 3, 1, "", "combine"], [156, 3, 1, "", "common_key_chains"], [156, 4, 1, "", "config"], [156, 3, 1, "", "contains_sub_container"], [156, 3, 1, "", "contains_sub_structure"], [156, 3, 1, "", "copy"], [156, 3, 1, "", "create_if_absent"], [156, 3, 1, "", "cutoff_at_depth"], [156, 3, 1, "", "cutoff_at_height"], [156, 3, 1, "", "deep_copy"], [156, 4, 1, "", "dev"], [156, 3, 1, "", "dev_clone"], [156, 3, 1, "", "dev_dist"], [156, 4, 1, "", "dev_str"], [156, 3, 1, "", "diff"], [156, 3, 1, "", "dtype"], [156, 3, 1, "", "einops_rearrange"], [156, 3, 1, "", "einops_reduce"], [156, 3, 1, "", "einops_repeat"], [156, 3, 1, "", "find_sub_container"], [156, 3, 1, "", "find_sub_structure"], [156, 3, 1, "", "flatten_key_chain"], [156, 3, 1, "", "flatten_key_chains"], [156, 3, 1, "", "format_key_chains"], [156, 3, 1, "", "from_disk_as_hdf5"], [156, 3, 1, "", "from_disk_as_json"], [156, 3, 1, "", "from_disk_as_pickled"], [156, 3, 1, "", "from_flat_list"], [156, 3, 1, "", "from_numpy"], [156, 3, 1, "", "gather"], [156, 3, 1, "", "gather_nd"], [156, 3, 1, "", "h5_file_size"], [156, 3, 1, "", "handle_inplace"], [156, 3, 1, "", "has_key"], [156, 3, 1, "", "has_key_chain"], [156, 3, 1, "", "has_nans"], [156, 3, 1, "", "identical"], [156, 3, 1, "", "identical_array_shapes"], [156, 3, 1, "", "identical_configs"], [156, 3, 1, "", "identical_structure"], [156, 3, 1, "", "if_exists"], [156, 3, 1, "", "inplace_update"], [156, 4, 1, "", "ivy"], [156, 3, 1, "", "key_chains_containing"], [156, 3, 1, "", "list_join"], [156, 3, 1, "", "list_stack"], [156, 3, 1, "", "map"], [156, 3, 1, "", "map_conts"], [156, 3, 1, "", "matrix_norm"], [156, 4, 1, "", "max_depth"], [156, 3, 1, "", "maximum"], [156, 3, 1, "", "minimum"], [156, 3, 1, "", "multi_map"], [156, 3, 1, "", "multi_map_in_static_method"], [156, 3, 1, "", "num_arrays"], [156, 3, 1, "", "overwrite_at_key_chain"], [156, 3, 1, "", "overwrite_at_key_chains"], [156, 3, 1, "", "prune_empty"], [156, 3, 1, "", "prune_key_chain"], [156, 3, 1, "", "prune_key_chains"], [156, 3, 1, "", "prune_key_from_key_chains"], [156, 3, 1, "", "prune_keys"], [156, 3, 1, "", "prune_keys_from_key_chains"], [156, 3, 1, "", "reduce"], [156, 3, 1, "", "remove_key_length_limit"], [156, 3, 1, "", "remove_print_limit"], [156, 3, 1, "", "reshape_like"], [156, 3, 1, "", "restructure"], [156, 3, 1, "", "restructure_key_chains"], [156, 3, 1, "", "set_at_key_chain"], [156, 3, 1, "", "set_at_key_chains"], [156, 3, 1, "", "set_at_keys"], [156, 3, 1, "", "set_framework"], [156, 3, 1, "", "set_ivy_backend"], [156, 4, 1, "", "shape"], [156, 4, 1, "", "shapes"], [156, 3, 1, "", "show"], [156, 3, 1, "", "show_sub_container"], [156, 3, 1, "", "shuffle"], [156, 3, 1, "", "shuffle_h5_file"], [156, 3, 1, "", "size_ordered_arrays"], [156, 3, 1, "", "slice_keys"], [156, 3, 1, "", "slice_via_key"], [156, 3, 1, "", "sort_by_key"], [156, 3, 1, "", "split"], [156, 3, 1, "", "stop_gradients"], [156, 3, 1, "", "structural_diff"], [156, 3, 1, "", "to_device"], [156, 3, 1, "", "to_dict"], [156, 3, 1, "", "to_disk_as_hdf5"], [156, 3, 1, "", "to_disk_as_json"], [156, 3, 1, "", "to_disk_as_pickled"], [156, 3, 1, "", "to_flat_list"], [156, 3, 1, "", "to_iterator"], [156, 3, 1, "", "to_iterator_keys"], [156, 3, 1, "", "to_iterator_values"], [156, 3, 1, "", "to_ivy"], [156, 3, 1, "", "to_jsonable"], [156, 3, 1, "", "to_list"], [156, 3, 1, "", "to_multi_dev"], [156, 3, 1, "", "to_native"], [156, 3, 1, "", "to_numpy"], [156, 3, 1, "", "to_raw"], [156, 3, 1, "", "trim_key"], [156, 3, 1, "", "try_kc"], [156, 3, 1, "", "unify"], [156, 3, 1, "", "unstack"], [156, 3, 1, "", "update_config"], [156, 3, 1, "", "vector_norm"], [156, 3, 1, "", "with_default_key_color"], [156, 3, 1, "", "with_entries_as_lists"], [156, 3, 1, "", "with_ivy_backend"], [156, 3, 1, "", "with_key_length_limit"], [156, 3, 1, "", "with_print_indent"], [156, 3, 1, "", "with_print_limit"], [156, 3, 1, "", "with_print_line_spacing"]], "ivy.container.container": [[158, 1, 1, "", "Container"], [159, 1, 1, "", "MultiDevContainer"]], "ivy.container.container.Container": [[158, 3, 1, "", "__add__"], [158, 3, 1, "", "__init__"], [158, 3, 1, "", "__radd__"], [158, 3, 1, "", "adam_step"], [158, 3, 1, "", "arange"], [158, 3, 1, "", "arg_info"], [158, 3, 1, "", "arg_names"], [158, 3, 1, "", "argmax"], [158, 3, 1, "", "argmin"], [158, 3, 1, "", "array"], [158, 3, 1, "", "array_equal"], [158, 3, 1, "", "arrays_equal"], [158, 3, 1, "", "as_ivy_dev"], [158, 3, 1, "", "as_ivy_dtype"], [158, 3, 1, "", "as_native_dev"], [158, 3, 1, "", "as_native_dtype"], [158, 3, 1, "", "asarray"], [158, 3, 1, "", "assert_supports_inplace"], [158, 3, 1, "", "astype"], [158, 3, 1, "", "broadcast_arrays"], [158, 3, 1, "", "broadcast_to"], [158, 3, 1, "", "cache_fn"], [158, 3, 1, "", "cholesky"], [158, 3, 1, "", "clear_mem_on_dev"], [158, 3, 1, "", "clip_matrix_norm"], [158, 3, 1, "", "closest_valid_dtype"], [158, 3, 1, "", "container_types"], [158, 3, 1, "", "conv1d"], [158, 3, 1, "", "conv1d_transpose"], [158, 3, 1, "", "conv2d"], [158, 3, 1, "", "conv2d_transpose"], [158, 3, 1, "", "conv3d"], [158, 3, 1, "", "conv3d_transpose"], [158, 3, 1, "", "copy_array"], [158, 3, 1, "", "cross"], [158, 3, 1, "", "cumprod"], [158, 3, 1, "", "cumsum"], [158, 3, 1, "", "current_backend"], [158, 3, 1, "", "current_backend_str"], [158, 3, 1, "", "default"], [158, 3, 1, "", "default_device"], [158, 3, 1, "", "default_dtype"], [158, 3, 1, "", "default_float_dtype"], [158, 3, 1, "", "default_int_dtype"], [158, 3, 1, "", "depthwise_conv2d"], [158, 3, 1, "", "det"], [158, 3, 1, "", "dev_clone_array"], [158, 3, 1, "", "dev_clone_iter"], [158, 3, 1, "", "dev_clone_nest"], [158, 3, 1, "", "dev_dist_array"], [158, 3, 1, "", "dev_dist_iter"], [158, 3, 1, "", "dev_dist_nest"], [158, 3, 1, "", "dev_unify"], [158, 3, 1, "", "dev_unify_array"], [158, 3, 1, "", "dev_unify_iter"], [158, 3, 1, "", "dev_unify_nest"], [158, 3, 1, "", "dev_util"], [158, 3, 1, "", "diagonal"], [158, 3, 1, "", "dropout"], [158, 3, 1, "", "dtype_bits"], [158, 3, 1, "", "eigh"], [158, 3, 1, "", "eigvalsh"], [158, 3, 1, "", "empty"], [158, 3, 1, "", "empty_like"], [158, 3, 1, "", "execute_with_gradients"], [158, 3, 1, "", "exists"], [158, 3, 1, "", "eye"], [158, 3, 1, "", "finfo"], [158, 3, 1, "", "floormod"], [158, 3, 1, "", "fourier_encode"], [158, 3, 1, "", "from_dlpack"], [158, 3, 1, "", "full"], [158, 3, 1, "", "full_like"], [158, 3, 1, "", "function_supported_dtypes"], [158, 3, 1, "", "function_unsupported_dtypes"], [158, 3, 1, "", "gelu"], [158, 3, 1, "", "get_all_arrays_in_memory"], [158, 3, 1, "", "get_all_ivy_arrays_on_dev"], [158, 3, 1, "", "get_min_base"], [158, 3, 1, "", "get_min_denominator"], [158, 3, 1, "", "get_num_dims"], [158, 3, 1, "", "get_referrers_recursive"], [158, 3, 1, "", "gpu_is_available"], [158, 3, 1, "", "handle_nestable"], [158, 3, 1, "", "handle_out_argument"], [158, 3, 1, "", "iinfo"], [158, 3, 1, "", "indices_where"], [158, 3, 1, "", "infer_device"], [158, 3, 1, "", "infer_dtype"], [158, 3, 1, "", "inplace_arrays_supported"], [158, 3, 1, "", "inplace_decrement"], [158, 3, 1, "", "inplace_increment"], [158, 3, 1, "", "inplace_variables_supported"], [158, 3, 1, "", "inputs_to_native_arrays"], [158, 3, 1, "", "inv"], [158, 3, 1, "", "invalid_dtype"], [158, 3, 1, "", "is_float_dtype"], [158, 3, 1, "", "is_int_dtype"], [158, 3, 1, "", "is_ivy_container"], [158, 3, 1, "", "leaky_relu"], [158, 3, 1, "", "linear"], [158, 3, 1, "", "linspace"], [158, 3, 1, "", "logspace"], [158, 3, 1, "", "lstm_update"], [158, 3, 1, "", "match_kwargs"], [158, 3, 1, "", "matrix_power"], [158, 3, 1, "", "matrix_rank"], [158, 3, 1, "", "matrix_transpose"], [158, 3, 1, "", "meshgrid"], [158, 3, 1, "", "multi_head_attention"], [158, 3, 1, "", "multinomial"], [158, 3, 1, "", "multiprocessing"], [158, 3, 1, "", "native_array"], [158, 3, 1, "", "nonzero"], [158, 3, 1, "", "num_arrays_in_memory"], [158, 3, 1, "", "num_cpu_cores"], [158, 3, 1, "", "num_gpus"], [158, 3, 1, "", "num_ivy_arrays_on_dev"], [158, 3, 1, "", "one_hot"], [158, 3, 1, "", "ones"], [158, 3, 1, "", "ones_like"], [158, 3, 1, "", "outer"], [158, 3, 1, "", "outputs_to_ivy_arrays"], [158, 3, 1, "", "percent_used_mem_on_dev"], [158, 3, 1, "", "pinv"], [158, 3, 1, "", "print_all_arrays_in_memory"], [158, 3, 1, "", "print_all_ivy_arrays_on_dev"], [158, 3, 1, "", "promote_types"], [158, 3, 1, "", "qr"], [158, 3, 1, "", "queue_timeout"], [158, 3, 1, "", "randint"], [158, 3, 1, "", "random_normal"], [158, 3, 1, "", "relu"], [158, 3, 1, "", "result_type"], [158, 3, 1, "", "scaled_dot_product_attention"], [158, 3, 1, "", "scatter_flat"], [158, 3, 1, "", "scatter_nd"], [158, 3, 1, "", "seed"], [158, 3, 1, "", "set_default_device"], [158, 3, 1, "", "set_default_dtype"], [158, 3, 1, "", "set_default_float_dtype"], [158, 3, 1, "", "set_default_int_dtype"], [158, 3, 1, "", "set_min_base"], [158, 3, 1, "", "set_min_denominator"], [158, 3, 1, "", "set_queue_timeout"], [158, 3, 1, "", "set_split_factor"], [158, 3, 1, "", "set_tmp_dir"], [158, 3, 1, "", "set_with_grads"], [158, 3, 1, "", "shape_to_tuple"], [158, 3, 1, "", "sigmoid"], [158, 3, 1, "", "slogdet"], [158, 3, 1, "", "softmax"], [158, 3, 1, "", "softplus"], [158, 3, 1, "", "solve"], [158, 3, 1, "", "split_factor"], [158, 3, 1, "", "split_func_call"], [158, 3, 1, "", "stable_divide"], [158, 3, 1, "", "stable_pow"], [158, 3, 1, "", "static_abs"], [158, 3, 1, "", "static_acos"], [158, 3, 1, "", "static_acosh"], [158, 3, 1, "", "static_adam_step"], [158, 3, 1, "", "static_all"], [158, 3, 1, "", "static_any"], [158, 3, 1, "", "static_arange"], [158, 3, 1, "", "static_arg_info"], [158, 3, 1, "", "static_arg_names"], [158, 3, 1, "", "static_argmax"], [158, 3, 1, "", "static_argmin"], [158, 3, 1, "", "static_array"], [158, 3, 1, "", "static_array_equal"], [158, 3, 1, "", "static_arrays_equal"], [158, 3, 1, "", "static_as_ivy_dev"], [158, 3, 1, "", "static_as_ivy_dtype"], [158, 3, 1, "", "static_as_native_dev"], [158, 3, 1, "", "static_as_native_dtype"], [158, 3, 1, "", "static_asarray"], [158, 3, 1, "", "static_asin"], [158, 3, 1, "", "static_asinh"], [158, 3, 1, "", "static_assert_supports_inplace"], [158, 3, 1, "", "static_astype"], [158, 3, 1, "", "static_atan"], [158, 3, 1, "", "static_atan2"], [158, 3, 1, "", "static_atanh"], [158, 3, 1, "", "static_bitwise_and"], [158, 3, 1, "", "static_bitwise_invert"], [158, 3, 1, "", "static_bitwise_left_shift"], [158, 3, 1, "", "static_bitwise_or"], [158, 3, 1, "", "static_bitwise_right_shift"], [158, 3, 1, "", "static_bitwise_xor"], [158, 3, 1, "", "static_broadcast_arrays"], [158, 3, 1, "", "static_broadcast_to"], [158, 3, 1, "", "static_cache_fn"], [158, 3, 1, "", "static_ceil"], [158, 3, 1, "", "static_cholesky"], [158, 3, 1, "", "static_clear_mem_on_dev"], [158, 3, 1, "", "static_clip_matrix_norm"], [158, 3, 1, "", "static_clip_vector_norm"], [158, 3, 1, "", "static_closest_valid_dtype"], [158, 3, 1, "", "static_concat"], [158, 3, 1, "", "static_constant_pad"], [158, 3, 1, "", "static_container_types"], [158, 3, 1, "", "static_conv1d"], [158, 3, 1, "", "static_conv1d_transpose"], [158, 3, 1, "", "static_conv2d"], [158, 3, 1, "", "static_conv2d_transpose"], [158, 3, 1, "", "static_conv3d"], [158, 3, 1, "", "static_conv3d_transpose"], [158, 3, 1, "", "static_copy_array"], [158, 3, 1, "", "static_cos"], [158, 3, 1, "", "static_cosh"], [158, 3, 1, "", "static_cross"], [158, 3, 1, "", "static_cumprod"], [158, 3, 1, "", "static_cumsum"], [158, 3, 1, "", "static_current_backend"], [158, 3, 1, "", "static_current_backend_str"], [158, 3, 1, "", "static_default"], [158, 3, 1, "", "static_default_device"], [158, 3, 1, "", "static_default_dtype"], [158, 3, 1, "", "static_default_float_dtype"], [158, 3, 1, "", "static_default_int_dtype"], [158, 3, 1, "", "static_depthwise_conv2d"], [158, 3, 1, "", "static_det"], [158, 3, 1, "", "static_dev"], [158, 3, 1, "", "static_dev_clone"], [158, 3, 1, "", "static_dev_clone_array"], [158, 3, 1, "", "static_dev_clone_iter"], [158, 3, 1, "", "static_dev_clone_nest"], [158, 3, 1, "", "static_dev_dist"], [158, 3, 1, "", "static_dev_dist_array"], [158, 3, 1, "", "static_dev_dist_iter"], [158, 3, 1, "", "static_dev_dist_nest"], [158, 3, 1, "", "static_dev_unify"], [158, 3, 1, "", "static_dev_unify_array"], [158, 3, 1, "", "static_dev_unify_iter"], [158, 3, 1, "", "static_dev_unify_nest"], [158, 3, 1, "", "static_dev_util"], [158, 3, 1, "", "static_diagonal"], [158, 3, 1, "", "static_dropout"], [158, 3, 1, "", "static_dtype"], [158, 3, 1, "", "static_dtype_bits"], [158, 3, 1, "", "static_eigh"], [158, 3, 1, "", "static_eigvalsh"], [158, 3, 1, "", "static_einops_rearrange"], [158, 3, 1, "", "static_einops_reduce"], [158, 3, 1, "", "static_einops_repeat"], [158, 3, 1, "", "static_einsum"], [158, 3, 1, "", "static_empty"], [158, 3, 1, "", "static_empty_like"], [158, 3, 1, "", "static_equal"], [158, 3, 1, "", "static_erf"], [158, 3, 1, "", "static_execute_with_gradients"], [158, 3, 1, "", "static_exists"], [158, 3, 1, "", "static_exp"], [158, 3, 1, "", "static_expand_dims"], [158, 3, 1, "", "static_expm1"], [158, 3, 1, "", "static_eye"], [158, 3, 1, "", "static_finfo"], [158, 3, 1, "", "static_flip"], [158, 3, 1, "", "static_floor"], [158, 3, 1, "", "static_floor_divide"], [158, 3, 1, "", "static_floormod"], [158, 3, 1, "", "static_fourier_encode"], [158, 3, 1, "", "static_from_dlpack"], [158, 3, 1, "", "static_full"], [158, 3, 1, "", "static_full_like"], [158, 3, 1, "", "static_function_supported_dtypes"], [158, 3, 1, "", "static_function_unsupported_dtypes"], [158, 3, 1, "", "static_gather"], [158, 3, 1, "", "static_gather_nd"], [158, 3, 1, "", "static_gelu"], [158, 3, 1, "", "static_get_all_arrays_in_memory"], [158, 3, 1, "", "static_get_all_ivy_arrays_on_dev"], [158, 3, 1, "", "static_get_min_base"], [158, 3, 1, "", "static_get_min_denominator"], [158, 3, 1, "", "static_get_num_dims"], [158, 3, 1, "", "static_get_referrers_recursive"], [158, 3, 1, "", "static_gpu_is_available"], [158, 3, 1, "", "static_greater"], [158, 3, 1, "", "static_greater_equal"], [158, 3, 1, "", "static_handle_nestable"], [158, 3, 1, "", "static_handle_out_argument"], [158, 3, 1, "", "static_has_nans"], [158, 3, 1, "", "static_iinfo"], [158, 3, 1, "", "static_indices_where"], [158, 3, 1, "", "static_infer_device"], [158, 3, 1, "", "static_infer_dtype"], [158, 3, 1, "", "static_inplace_arrays_supported"], [158, 3, 1, "", "static_inplace_decrement"], [158, 3, 1, "", "static_inplace_increment"], [158, 3, 1, "", "static_inplace_update"], [158, 3, 1, "", "static_inplace_variables_supported"], [158, 3, 1, "", "static_inputs_to_native_arrays"], [158, 3, 1, "", "static_inv"], [158, 3, 1, "", "static_invalid_dtype"], [158, 3, 1, "", "static_is_array"], [158, 3, 1, "", "static_is_float_dtype"], [158, 3, 1, "", "static_is_int_dtype"], [158, 3, 1, "", "static_is_ivy_array"], [158, 3, 1, "", "static_is_ivy_container"], [158, 3, 1, "", "static_is_native_array"], [158, 3, 1, "", "static_is_variable"], [158, 3, 1, "", "static_isfinite"], [158, 3, 1, "", "static_isinf"], [158, 3, 1, "", "static_isnan"], [158, 3, 1, "", "static_layer_norm"], [158, 3, 1, "", "static_leaky_relu"], [158, 3, 1, "", "static_less"], [158, 3, 1, "", "static_less_equal"], [158, 3, 1, "", "static_linear"], [158, 3, 1, "", "static_linspace"], [158, 3, 1, "", "static_log"], [158, 3, 1, "", "static_log10"], [158, 3, 1, "", "static_log1p"], [158, 3, 1, "", "static_log2"], [158, 3, 1, "", "static_logaddexp"], [158, 3, 1, "", "static_logical_and"], [158, 3, 1, "", "static_logical_not"], [158, 3, 1, "", "static_logical_or"], [158, 3, 1, "", "static_logical_xor"], [158, 3, 1, "", "static_logspace"], [158, 3, 1, "", "static_lstm_update"], [158, 3, 1, "", "static_match_kwargs"], [158, 3, 1, "", "static_matmul"], [158, 3, 1, "", "static_matrix_norm"], [158, 3, 1, "", "static_matrix_power"], [158, 3, 1, "", "static_matrix_rank"], [158, 3, 1, "", "static_matrix_transpose"], [158, 3, 1, "", "static_max"], [158, 3, 1, "", "static_maximum"], [158, 3, 1, "", "static_mean"], [158, 3, 1, "", "static_meshgrid"], [158, 3, 1, "", "static_min"], [158, 3, 1, "", "static_minimum"], [158, 3, 1, "", "static_multi_head_attention"], [158, 3, 1, "", "static_multinomial"], [158, 3, 1, "", "static_multiprocessing"], [158, 3, 1, "", "static_native_array"], [158, 3, 1, "", "static_negative"], [158, 3, 1, "", "static_nonzero"], [158, 3, 1, "", "static_not_equal"], [158, 3, 1, "", "static_num_arrays_in_memory"], [158, 3, 1, "", "static_num_cpu_cores"], [158, 3, 1, "", "static_num_gpus"], [158, 3, 1, "", "static_num_ivy_arrays_on_dev"], [158, 3, 1, "", "static_one_hot"], [158, 3, 1, "", "static_ones"], [158, 3, 1, "", "static_ones_like"], [158, 3, 1, "", "static_outer"], [158, 3, 1, "", "static_outputs_to_ivy_arrays"], [158, 3, 1, "", "static_percent_used_mem_on_dev"], [158, 3, 1, "", "static_permute_dims"], [158, 3, 1, "", "static_pinv"], [158, 3, 1, "", "static_positive"], [158, 3, 1, "", "static_pow"], [158, 3, 1, "", "static_print_all_arrays_in_memory"], [158, 3, 1, "", "static_print_all_ivy_arrays_on_dev"], [158, 3, 1, "", "static_prod"], [158, 3, 1, "", "static_promote_types"], [158, 3, 1, "", "static_qr"], [158, 3, 1, "", "static_queue_timeout"], [158, 3, 1, "", "static_random_normal"], [158, 3, 1, "", "static_relu"], [158, 3, 1, "", "static_remainder"], [158, 3, 1, "", "static_repeat"], [158, 3, 1, "", "static_reshape"], [158, 3, 1, "", "static_result_type"], [158, 3, 1, "", "static_round"], [158, 3, 1, "", "static_scaled_dot_product_attention"], [158, 3, 1, "", "static_scatter_flat"], [158, 3, 1, "", "static_scatter_nd"], [158, 3, 1, "", "static_seed"], [158, 3, 1, "", "static_set_default_device"], [158, 3, 1, "", "static_set_default_dtype"], [158, 3, 1, "", "static_set_default_float_dtype"], [158, 3, 1, "", "static_set_default_int_dtype"], [158, 3, 1, "", "static_set_min_base"], [158, 3, 1, "", "static_set_min_denominator"], [158, 3, 1, "", "static_set_queue_timeout"], [158, 3, 1, "", "static_set_split_factor"], [158, 3, 1, "", "static_set_tmp_dir"], [158, 3, 1, "", "static_set_with_grads"], [158, 3, 1, "", "static_shape"], [158, 3, 1, "", "static_shape_to_tuple"], [158, 3, 1, "", "static_shuffle"], [158, 3, 1, "", "static_sigmoid"], [158, 3, 1, "", "static_sign"], [158, 3, 1, "", "static_sin"], [158, 3, 1, "", "static_sinh"], [158, 3, 1, "", "static_slogdet"], [158, 3, 1, "", "static_softmax"], [158, 3, 1, "", "static_softplus"], [158, 3, 1, "", "static_solve"], [158, 3, 1, "", "static_split"], [158, 3, 1, "", "static_split_factor"], [158, 3, 1, "", "static_split_func_call"], [158, 3, 1, "", "static_sqrt"], [158, 3, 1, "", "static_square"], [158, 3, 1, "", "static_squeeze"], [158, 3, 1, "", "static_stable_divide"], [158, 3, 1, "", "static_stable_pow"], [158, 3, 1, "", "static_stack"], [158, 3, 1, "", "static_std"], [158, 3, 1, "", "static_stop_gradient"], [158, 3, 1, "", "static_sum"], [158, 3, 1, "", "static_supports_inplace"], [158, 3, 1, "", "static_svd"], [158, 3, 1, "", "static_svdvals"], [158, 3, 1, "", "static_swapaxes"], [158, 3, 1, "", "static_tensordot"], [158, 3, 1, "", "static_tile"], [158, 3, 1, "", "static_tmp_dir"], [158, 3, 1, "", "static_to_device"], [158, 3, 1, "", "static_to_list"], [158, 3, 1, "", "static_to_native_arrays_and_back"], [158, 3, 1, "", "static_to_numpy"], [158, 3, 1, "", "static_to_scalar"], [158, 3, 1, "", "static_total_mem_on_dev"], [158, 3, 1, "", "static_tpu_is_available"], [158, 3, 1, "", "static_trace"], [158, 3, 1, "", "static_tril"], [158, 3, 1, "", "static_triu"], [158, 3, 1, "", "static_trunc"], [158, 3, 1, "", "static_try_else_none"], [158, 3, 1, "", "static_type_promote_arrays"], [158, 3, 1, "", "static_unique_all"], [158, 3, 1, "", "static_unique_counts"], [158, 3, 1, "", "static_unique_inverse"], [158, 3, 1, "", "static_unique_values"], [158, 3, 1, "", "static_unset_default_device"], [158, 3, 1, "", "static_unset_default_dtype"], [158, 3, 1, "", "static_unset_default_float_dtype"], [158, 3, 1, "", "static_unset_default_int_dtype"], [158, 3, 1, "", "static_unset_with_grads"], [158, 3, 1, "", "static_unstack"], [158, 3, 1, "", "static_used_mem_on_dev"], [158, 3, 1, "", "static_valid_dtype"], [158, 3, 1, "", "static_value_is_nan"], [158, 3, 1, "", "static_var"], [158, 3, 1, "", "static_variable"], [158, 3, 1, "", "static_variable_data"], [158, 3, 1, "", "static_vecdot"], [158, 3, 1, "", "static_vector_norm"], [158, 3, 1, "", "static_vector_to_skew_symmetric_matrix"], [158, 3, 1, "", "static_where"], [158, 3, 1, "", "static_with_grads"], [158, 3, 1, "", "static_zero_pad"], [158, 3, 1, "", "static_zeros"], [158, 3, 1, "", "static_zeros_like"], [158, 3, 1, "", "stop_gradient"], [158, 3, 1, "", "supports_inplace"], [158, 3, 1, "", "svd"], [158, 3, 1, "", "svdvals"], [158, 3, 1, "", "tensordot"], [158, 3, 1, "", "tmp_dir"], [158, 3, 1, "", "to_native_arrays_and_back"], [158, 3, 1, "", "to_scalar"], [158, 3, 1, "", "total_mem_on_dev"], [158, 3, 1, "", "tpu_is_available"], [158, 3, 1, "", "trace"], [158, 3, 1, "", "tril"], [158, 3, 1, "", "triu"], [158, 3, 1, "", "try_else_none"], [158, 3, 1, "", "type_promote_arrays"], [158, 3, 1, "", "unique_all"], [158, 3, 1, "", "unique_counts"], [158, 3, 1, "", "unique_inverse"], [158, 3, 1, "", "unique_values"], [158, 3, 1, "", "unset_default_device"], [158, 3, 1, "", "unset_default_dtype"], [158, 3, 1, "", "unset_default_float_dtype"], [158, 3, 1, "", "unset_default_int_dtype"], [158, 3, 1, "", "unset_with_grads"], [158, 3, 1, "", "used_mem_on_dev"], [158, 3, 1, "", "valid_dtype"], [158, 3, 1, "", "value_is_nan"], [158, 3, 1, "", "variable"], [158, 3, 1, "", "variable_data"], [158, 3, 1, "", "vecdot"], [158, 3, 1, "", "vector_to_skew_symmetric_matrix"], [158, 3, 1, "", "where"], [158, 3, 1, "", "with_grads"], [158, 3, 1, "", "zeros"], [158, 3, 1, "", "zeros_like"]], "ivy.container.container.MultiDevContainer": [[159, 3, 1, "", "__init__"], [159, 3, 1, "", "at_dev"], [159, 3, 1, "", "at_devs"]], "ivy.container.container_methods": [[160, 2, 1, "", "__add__"], [160, 2, 1, "", "__init__"], [160, 2, 1, "", "__radd__"], [161, 2, 1, "", "abs"], [162, 2, 1, "", "acos"], [163, 2, 1, "", "acosh"], [164, 2, 1, "", "adam_update"], [165, 2, 1, "", "add"], [166, 2, 1, "", "all"], [167, 2, 1, "", "all_equal"], [168, 2, 1, "", "any"], [169, 2, 1, "", "argsort"], [170, 2, 1, "", "asin"], [171, 2, 1, "", "asinh"], [172, 2, 1, "", "at_dev"], [173, 2, 1, "", "at_devs"], [174, 2, 1, "", "atan"], [175, 2, 1, "", "atan2"], [176, 2, 1, "", "atanh"], [177, 2, 1, "", "binary_cross_entropy"], [178, 2, 1, "", "bitwise_and"], [179, 2, 1, "", "bitwise_invert"], [180, 2, 1, "", "bitwise_left_shift"], [181, 2, 1, "", "bitwise_or"], [182, 2, 1, "", "bitwise_right_shift"], [183, 2, 1, "", "bitwise_xor"], [184, 2, 1, "", "can_cast"], [185, 2, 1, "", "ceil"], [186, 2, 1, "", "clip"], [187, 2, 1, "", "clip_vector_norm"], [188, 2, 1, "", "concat"], [189, 2, 1, "", "constant_pad"], [190, 2, 1, "", "cos"], [191, 2, 1, "", "cosh"], [192, 2, 1, "", "cross_entropy"], [193, 2, 1, "", "divide"], [194, 2, 1, "", "einsum"], [195, 2, 1, "", "equal"], [513, 2, 1, "", "erf"], [197, 2, 1, "", "exp"], [198, 2, 1, "", "expand_dims"], [199, 2, 1, "", "expm1"], [200, 2, 1, "", "flip"], [201, 2, 1, "", "floor"], [202, 2, 1, "", "floor_divide"], [203, 2, 1, "", "gradient_descent_update"], [204, 2, 1, "", "greater"], [205, 2, 1, "", "greater_equal"], [206, 2, 1, "", "isfinite"], [207, 2, 1, "", "isinf"], [208, 2, 1, "", "isnan"], [209, 2, 1, "", "lamb_update"], [210, 2, 1, "", "lars_update"], [211, 2, 1, "", "layer_norm"], [212, 2, 1, "", "less"], [213, 2, 1, "", "less_equal"], [214, 2, 1, "", "log"], [215, 2, 1, "", "log10"], [216, 2, 1, "", "log1p"], [217, 2, 1, "", "log2"], [218, 2, 1, "", "logaddexp"], [219, 2, 1, "", "logical_and"], [220, 2, 1, "", "logical_not"], [221, 2, 1, "", "logical_or"], [222, 2, 1, "", "logical_xor"], [223, 2, 1, "", "matmul"], [224, 2, 1, "", "max"], [225, 2, 1, "", "mean"], [226, 2, 1, "", "min"], [227, 2, 1, "", "multiply"], [228, 2, 1, "", "negative"], [229, 2, 1, "", "not_equal"], [230, 2, 1, "", "optimizer_update"], [231, 2, 1, "", "permute_dims"], [232, 2, 1, "", "positive"], [233, 2, 1, "", "pow"], [234, 2, 1, "", "prod"], [235, 2, 1, "", "random_uniform"], [236, 2, 1, "", "remainder"], [237, 2, 1, "", "repeat"], [238, 2, 1, "", "reshape"], [239, 2, 1, "", "roll"], [240, 2, 1, "", "round"], [241, 2, 1, "", "sign"], [553, 2, 1, "", "sin"], [243, 2, 1, "", "sinh"], [244, 2, 1, "", "sort"], [245, 2, 1, "", "sparse_cross_entropy"], [246, 2, 1, "", "sqrt"], [247, 2, 1, "", "square"], [248, 2, 1, "", "squeeze"], [249, 2, 1, "", "stack"], [250, 2, 1, "", "static_adam_update"], [251, 2, 1, "", "static_add"], [252, 2, 1, "", "static_all_equal"], [253, 2, 1, "", "static_argsort"], [254, 2, 1, "", "static_binary_cross_entropy"], [255, 2, 1, "", "static_can_cast"], [691, 2, 1, "", "static_clip"], [257, 2, 1, "", "static_cross_entropy"], [258, 2, 1, "", "static_divide"], [259, 2, 1, "", "static_gradient_descent_update"], [260, 2, 1, "", "static_lamb_update"], [261, 2, 1, "", "static_lars_update"], [262, 2, 1, "", "static_multiply"], [263, 2, 1, "", "static_optimizer_update"], [264, 2, 1, "", "static_randint"], [265, 2, 1, "", "static_random_uniform"], [266, 2, 1, "", "static_roll"], [267, 2, 1, "", "static_sort"], [268, 2, 1, "", "static_sparse_cross_entropy"], [269, 2, 1, "", "static_subtract"], [270, 2, 1, "", "static_tan"], [271, 2, 1, "", "static_tanh"], [272, 2, 1, "", "std"], [273, 2, 1, "", "subtract"], [274, 2, 1, "", "sum"], [275, 2, 1, "", "swapaxes"], [276, 2, 1, "", "tan"], [277, 2, 1, "", "tanh"], [278, 2, 1, "", "tile"], [279, 2, 1, "", "trunc"], [280, 2, 1, "", "var"], [281, 2, 1, "", "zero_pad"]], "ivy.container.creation": [[283, 1, 1, "", "ContainerWithCreation"]], "ivy.container.data_types": [[285, 1, 1, "", "ContainerWithDataTypes"]], "ivy.container.data_types.ContainerWithDataTypes": [[285, 3, 1, "", "can_cast"], [285, 3, 1, "", "static_can_cast"]], "ivy.container.device": [[287, 1, 1, "", "ContainerWithDevice"]], "ivy.container.elementwise": [[289, 1, 1, "", "ContainerWithElementwise"]], "ivy.container.elementwise.ContainerWithElementwise": [[289, 3, 1, "", "abs"], [289, 3, 1, "", "acos"], [289, 3, 1, "", "acosh"], [289, 3, 1, "", "add"], [289, 3, 1, "", "asin"], [289, 3, 1, "", "asinh"], [289, 3, 1, "", "atan"], [289, 3, 1, "", "atan2"], [289, 3, 1, "", "atanh"], [289, 3, 1, "", "bitwise_and"], [289, 3, 1, "", "bitwise_invert"], [289, 3, 1, "", "bitwise_left_shift"], [289, 3, 1, "", "bitwise_or"], [289, 3, 1, "", "bitwise_right_shift"], [289, 3, 1, "", "bitwise_xor"], [289, 3, 1, "", "ceil"], [289, 3, 1, "", "cos"], [289, 3, 1, "", "cosh"], [289, 3, 1, "", "divide"], [289, 3, 1, "", "equal"], [289, 3, 1, "", "erf"], [289, 3, 1, "", "exp"], [289, 3, 1, "", "expm1"], [289, 3, 1, "", "floor"], [289, 3, 1, "", "floor_divide"], [289, 3, 1, "", "greater"], [289, 3, 1, "", "greater_equal"], [289, 3, 1, "", "isfinite"], [289, 3, 1, "", "isinf"], [289, 3, 1, "", "isnan"], [289, 3, 1, "", "less"], [289, 3, 1, "", "less_equal"], [289, 3, 1, "", "log"], [289, 3, 1, "", "log10"], [289, 3, 1, "", "log1p"], [289, 3, 1, "", "log2"], [289, 3, 1, "", "logaddexp"], [289, 3, 1, "", "logical_and"], [289, 3, 1, "", "logical_not"], [289, 3, 1, "", "logical_or"], [289, 3, 1, "", "logical_xor"], [289, 3, 1, "", "multiply"], [289, 3, 1, "", "negative"], [289, 3, 1, "", "not_equal"], [289, 3, 1, "", "positive"], [289, 3, 1, "", "pow"], [289, 3, 1, "", "remainder"], [289, 3, 1, "", "round"], [289, 3, 1, "", "sign"], [289, 3, 1, "", "sin"], [289, 3, 1, "", "sinh"], [289, 3, 1, "", "sqrt"], [289, 3, 1, "", "square"], [289, 3, 1, "", "static_add"], [289, 3, 1, "", "static_divide"], [289, 3, 1, "", "static_multiply"], [289, 3, 1, "", "static_subtract"], [289, 3, 1, "", "static_tan"], [289, 3, 1, "", "static_tanh"], [289, 3, 1, "", "subtract"], [289, 3, 1, "", "tan"], [289, 3, 1, "", "tanh"], [289, 3, 1, "", "trunc"]], "ivy.container.general": [[291, 1, 1, "", "ContainerWithGeneral"]], "ivy.container.general.ContainerWithGeneral": [[291, 3, 1, "", "all_equal"], [291, 3, 1, "", "clip_vector_norm"], [291, 3, 1, "", "static_all_equal"]], "ivy.container.gradients": [[293, 1, 1, "", "ContainerWithGradients"]], "ivy.container.gradients.ContainerWithGradients": [[293, 3, 1, "", "adam_update"], [293, 3, 1, "", "gradient_descent_update"], [293, 3, 1, "", "lamb_update"], [293, 3, 1, "", "lars_update"], [293, 3, 1, "", "optimizer_update"], [293, 3, 1, "", "static_adam_update"], [293, 3, 1, "", "static_gradient_descent_update"], [293, 3, 1, "", "static_lamb_update"], [293, 3, 1, "", "static_lars_update"], [293, 3, 1, "", "static_optimizer_update"]], "ivy.container.image": [[295, 1, 1, "", "ContainerWithImage"]], "ivy.container.layers": [[297, 1, 1, "", "ContainerWithLayers"]], "ivy.container.linear_algebra": [[299, 1, 1, "", "ContainerWithLinearAlgebra"]], "ivy.container.linear_algebra.ContainerWithLinearAlgebra": [[299, 3, 1, "", "matmul"]], "ivy.container.losses": [[301, 1, 1, "", "ContainerWithLosses"]], "ivy.container.losses.ContainerWithLosses": [[301, 3, 1, "", "binary_cross_entropy"], [301, 3, 1, "", "cross_entropy"], [301, 3, 1, "", "sparse_cross_entropy"], [301, 3, 1, "", "static_binary_cross_entropy"], [301, 3, 1, "", "static_cross_entropy"], [301, 3, 1, "", "static_sparse_cross_entropy"]], "ivy.container.manipulation": [[303, 1, 1, "", "ContainerWithManipulation"]], "ivy.container.manipulation.ContainerWithManipulation": [[303, 3, 1, "", "clip"], [303, 3, 1, "", "concat"], [303, 3, 1, "", "constant_pad"], [303, 3, 1, "", "expand_dims"], [303, 3, 1, "", "flip"], [303, 3, 1, "", "permute_dims"], [303, 3, 1, "", "repeat"], [303, 3, 1, "", "reshape"], [303, 3, 1, "", "roll"], [303, 3, 1, "", "squeeze"], [303, 3, 1, "", "stack"], [303, 3, 1, "", "static_clip"], [303, 3, 1, "", "static_roll"], [303, 3, 1, "", "swapaxes"], [303, 3, 1, "", "tile"], [303, 3, 1, "", "zero_pad"]], "ivy.container.norms": [[305, 1, 1, "", "ContainerWithNorms"]], "ivy.container.norms.ContainerWithNorms": [[305, 3, 1, "", "layer_norm"]], "ivy.container.random": [[307, 1, 1, "", "ContainerWithRandom"]], "ivy.container.random.ContainerWithRandom": [[307, 3, 1, "", "random_uniform"], [307, 3, 1, "", "static_randint"], [307, 3, 1, "", "static_random_uniform"]], "ivy.container.searching": [[309, 1, 1, "", "ContainerWithSearching"]], "ivy.container.set": [[311, 1, 1, "", "ContainerWithSet"]], "ivy.container.sorting": [[313, 1, 1, "", "ContainerWithSorting"]], "ivy.container.sorting.ContainerWithSorting": [[313, 3, 1, "", "argsort"], [313, 3, 1, "", "sort"], [313, 3, 1, "", "static_argsort"], [313, 3, 1, "", "static_sort"]], "ivy.container.statistical": [[315, 1, 1, "", "ContainerWithStatistical"]], "ivy.container.statistical.ContainerWithStatistical": [[315, 3, 1, "", "einsum"], [315, 3, 1, "", "max"], [315, 3, 1, "", "mean"], [315, 3, 1, "", "min"], [315, 3, 1, "", "prod"], [315, 3, 1, "", "std"], [315, 3, 1, "", "sum"], [315, 3, 1, "", "var"]], "ivy.container.utility": [[317, 1, 1, "", "ContainerWithUtility"]], "ivy.container.utility.ContainerWithUtility": [[317, 3, 1, "", "all"], [317, 3, 1, "", "any"]], "ivy.container.wrapping": [[319, 2, 1, "", "add_ivy_container_instance_methods"]], "ivy.func_wrapper": [[360, 2, 1, "", "handle_nestable"], [361, 2, 1, "", "handle_out_argument"], [362, 2, 1, "", "infer_device"], [363, 2, 1, "", "infer_dtype"], [364, 2, 1, "", "inputs_to_ivy_arrays"], [365, 2, 1, "", "inputs_to_native_arrays"], [366, 2, 1, "", "outputs_to_ivy_arrays"], [367, 2, 1, "", "to_native_arrays_and_back"]], "ivy.functional.ivy": [[369, 0, 0, "-", "activations"], [377, 0, 0, "-", "compilation"], [379, 0, 0, "-", "constants"], [380, 0, 0, "-", "creation"], [399, 0, 0, "-", "data_type"], [432, 0, 0, "-", "device"], [482, 0, 0, "-", "elementwise"], [564, 0, 0, "-", "general"], [628, 0, 0, "-", "gradients"], [644, 0, 0, "-", "layers"], [657, 0, 0, "-", "linear_algebra"], [682, 0, 0, "-", "losses"], [688, 0, 0, "-", "manipulation"], [710, 0, 0, "-", "meta"], [714, 0, 0, "-", "nest"], [732, 0, 0, "-", "norms"], [734, 0, 0, "-", "random"], [741, 0, 0, "-", "searching"], [746, 0, 0, "-", "set"], [751, 0, 0, "-", "sorting"], [754, 0, 0, "-", "statistical"], [763, 0, 0, "-", "utility"]], "ivy.functional.ivy.activations": [[370, 2, 1, "", "gelu"], [371, 2, 1, "", "leaky_relu"], [372, 2, 1, "", "relu"], [373, 2, 1, "", "sigmoid"], [374, 2, 1, "", "softmax"], [375, 2, 1, "", "softplus"], [376, 2, 1, "", "tanh"]], "ivy.functional.ivy.compilation": [[378, 2, 1, "", "compile"]], "ivy.functional.ivy.constants": [[379, 5, 1, "", "e"], [379, 5, 1, "", "inf"], [379, 5, 1, "", "nan"], [379, 5, 1, "", "newaxis"], [379, 5, 1, "", "pi"]], "ivy.functional.ivy.creation": [[381, 2, 1, "", "arange"], [380, 2, 1, "", "array"], [382, 2, 1, "", "asarray"], [383, 2, 1, "", "empty"], [384, 2, 1, "", "empty_like"], [385, 2, 1, "", "eye"], [386, 2, 1, "", "from_dlpack"], [387, 2, 1, "", "full"], [388, 2, 1, "", "full_like"], [389, 2, 1, "", "linspace"], [390, 2, 1, "", "logspace"], [391, 2, 1, "", "meshgrid"], [392, 2, 1, "", "native_array"], [393, 2, 1, "", "ones"], [394, 2, 1, "", "ones_like"], [395, 2, 1, "", "tril"], [396, 2, 1, "", "triu"], [397, 2, 1, "", "zeros"], [398, 2, 1, "", "zeros_like"]], "ivy.functional.ivy.data_type": [[399, 1, 1, "", "DefaultDtype"], [399, 1, 1, "", "DefaultFloatDtype"], [399, 1, 1, "", "DefaultIntDtype"], [403, 2, 1, "", "as_ivy_dtype"], [404, 2, 1, "", "as_native_dtype"], [405, 2, 1, "", "astype"], [406, 2, 1, "", "broadcast_arrays"], [407, 2, 1, "", "broadcast_to"], [408, 2, 1, "", "can_cast"], [409, 2, 1, "", "closest_valid_dtype"], [410, 2, 1, "", "default_dtype"], [411, 2, 1, "", "default_float_dtype"], [412, 2, 1, "", "default_int_dtype"], [413, 2, 1, "", "dtype"], [414, 2, 1, "", "dtype_bits"], [415, 2, 1, "", "finfo"], [416, 2, 1, "", "function_supported_dtypes"], [417, 2, 1, "", "function_unsupported_dtypes"], [418, 2, 1, "", "iinfo"], [419, 2, 1, "", "invalid_dtype"], [420, 2, 1, "", "is_float_dtype"], [421, 2, 1, "", "is_int_dtype"], [422, 2, 1, "", "promote_types"], [423, 2, 1, "", "result_type"], [424, 2, 1, "", "set_default_dtype"], [425, 2, 1, "", "set_default_float_dtype"], [426, 2, 1, "", "set_default_int_dtype"], [427, 2, 1, "", "type_promote_arrays"], [428, 2, 1, "", "unset_default_dtype"], [429, 2, 1, "", "unset_default_float_dtype"], [430, 2, 1, "", "unset_default_int_dtype"], [431, 2, 1, "", "valid_dtype"]], "ivy.functional.ivy.data_type.DefaultDtype": [[399, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultFloatDtype": [[399, 3, 1, "", "__init__"]], "ivy.functional.ivy.data_type.DefaultIntDtype": [[399, 3, 1, "", "__init__"]], "ivy.functional.ivy.device": [[432, 1, 1, "", "DefaultDevice"], [434, 1, 1, "", "DevClonedItem"], [435, 1, 1, "", "DevClonedIter"], [436, 1, 1, "", "DevClonedNest"], [437, 1, 1, "", "DevDistItem"], [438, 1, 1, "", "DevDistIter"], [439, 1, 1, "", "DevDistNest"], [432, 1, 1, "", "DevManager"], [441, 1, 1, "", "DevMapper"], [442, 1, 1, "", "DevMapperMultiProc"], [432, 1, 1, "", "MultiDev"], [444, 1, 1, "", "MultiDevItem"], [445, 1, 1, "", "MultiDevIter"], [446, 1, 1, "", "MultiDevNest"], [447, 1, 1, "", "Profiler"], [448, 2, 1, "", "as_ivy_dev"], [449, 2, 1, "", "as_native_dev"], [450, 2, 1, "", "clear_mem_on_dev"], [451, 2, 1, "", "default_device"], [452, 2, 1, "", "dev"], [453, 2, 1, "", "dev_clone"], [454, 2, 1, "", "dev_clone_array"], [455, 2, 1, "", "dev_clone_iter"], [456, 2, 1, "", "dev_clone_nest"], [457, 2, 1, "", "dev_dist"], [458, 2, 1, "", "dev_dist_array"], [459, 2, 1, "", "dev_dist_iter"], [460, 2, 1, "", "dev_dist_nest"], [461, 2, 1, "", "dev_unify"], [462, 2, 1, "", "dev_unify_array"], [463, 2, 1, "", "dev_unify_iter"], [464, 2, 1, "", "dev_unify_nest"], [465, 2, 1, "", "dev_util"], [466, 2, 1, "", "get_all_ivy_arrays_on_dev"], [467, 2, 1, "", "gpu_is_available"], [468, 2, 1, "", "num_cpu_cores"], [469, 2, 1, "", "num_gpus"], [470, 2, 1, "", "num_ivy_arrays_on_dev"], [471, 2, 1, "", "percent_used_mem_on_dev"], [472, 2, 1, "", "print_all_ivy_arrays_on_dev"], [473, 2, 1, "", "set_default_device"], [474, 2, 1, "", "set_split_factor"], [475, 2, 1, "", "split_factor"], [476, 2, 1, "", "split_func_call"], [477, 2, 1, "", "to_device"], [478, 2, 1, "", "total_mem_on_dev"], [479, 2, 1, "", "tpu_is_available"], [480, 2, 1, "", "unset_default_device"], [481, 2, 1, "", "used_mem_on_dev"]], "ivy.functional.ivy.device.DefaultDevice": [[432, 3, 1, "", "__enter__"], [432, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.DevManager": [[432, 3, 1, "", "__init__"], [432, 3, 1, "", "da_tune_step"], [432, 4, 1, "", "dim_size"], [432, 3, 1, "", "ds_tune_step"], [432, 3, 1, "", "map"], [432, 3, 1, "", "repeated_config_check"], [432, 4, 1, "", "tune_step"], [432, 4, 1, "", "tuned"]], "ivy.functional.ivy.device.DevMapper": [[441, 3, 1, "", "__init__"], [441, 3, 1, "", "map"]], "ivy.functional.ivy.device.DevMapperMultiProc": [[442, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDev": [[432, 3, 1, "", "__init__"]], "ivy.functional.ivy.device.MultiDevItem": [[444, 3, 1, "", "__init__"], [444, 3, 1, "", "items"], [444, 3, 1, "", "keys"], [444, 4, 1, "", "shape"], [444, 3, 1, "", "values"]], "ivy.functional.ivy.device.MultiDevIter": [[445, 3, 1, "", "__init__"], [445, 3, 1, "", "at_dev"], [445, 3, 1, "", "at_devs"]], "ivy.functional.ivy.device.MultiDevNest": [[446, 3, 1, "", "__init__"], [446, 3, 1, "", "at_dev"]], "ivy.functional.ivy.device.Profiler": [[447, 3, 1, "", "__init__"], [447, 3, 1, "", "start"], [447, 3, 1, "", "stop"]], "ivy.functional.ivy.elementwise": [[483, 2, 1, "", "abs"], [484, 2, 1, "", "acos"], [485, 2, 1, "", "acosh"], [486, 2, 1, "", "add"], [489, 2, 1, "", "asin"], [490, 2, 1, "", "asinh"], [491, 2, 1, "", "atan"], [492, 2, 1, "", "atan2"], [493, 2, 1, "", "atanh"], [494, 2, 1, "", "bitwise_and"], [495, 2, 1, "", "bitwise_invert"], [498, 2, 1, "", "bitwise_left_shift"], [501, 2, 1, "", "bitwise_or"], [502, 2, 1, "", "bitwise_right_shift"], [505, 2, 1, "", "bitwise_xor"], [506, 2, 1, "", "ceil"], [507, 2, 1, "", "cos"], [508, 2, 1, "", "cosh"], [509, 2, 1, "", "divide"], [510, 2, 1, "", "equal"], [514, 2, 1, "", "erf"], [515, 2, 1, "", "exp"], [516, 2, 1, "", "expm1"], [517, 2, 1, "", "floor"], [518, 2, 1, "", "floor_divide"], [519, 2, 1, "", "greater"], [520, 2, 1, "", "greater_equal"], [521, 2, 1, "", "isfinite"], [522, 2, 1, "", "isinf"], [523, 2, 1, "", "isnan"], [524, 2, 1, "", "less"], [525, 2, 1, "", "less_equal"], [528, 2, 1, "", "log"], [529, 2, 1, "", "log10"], [530, 2, 1, "", "log1p"], [533, 2, 1, "", "log2"], [534, 2, 1, "", "logaddexp"], [535, 2, 1, "", "logical_and"], [536, 2, 1, "", "logical_not"], [539, 2, 1, "", "logical_or"], [540, 2, 1, "", "logical_xor"], [541, 2, 1, "", "maximum"], [542, 2, 1, "", "minimum"], [543, 2, 1, "", "multiply"], [544, 2, 1, "", "negative"], [545, 2, 1, "", "not_equal"], [546, 2, 1, "", "positive"], [547, 2, 1, "", "pow"], [548, 2, 1, "", "remainder"], [549, 2, 1, "", "round"], [550, 2, 1, "", "sign"], [554, 2, 1, "", "sin"], [555, 2, 1, "", "sinh"], [556, 2, 1, "", "sqrt"], [559, 2, 1, "", "square"], [560, 2, 1, "", "subtract"], [561, 2, 1, "", "tan"], [562, 2, 1, "", "tanh"], [563, 2, 1, "", "trunc"]], "ivy.functional.ivy.general": [[565, 2, 1, "", "all_equal"], [566, 2, 1, "", "arg_info"], [567, 2, 1, "", "arg_names"], [568, 2, 1, "", "array_equal"], [569, 2, 1, "", "arrays_equal"], [570, 2, 1, "", "assert_supports_inplace"], [571, 2, 1, "", "cache_fn"], [572, 2, 1, "", "clip_matrix_norm"], [573, 2, 1, "", "clip_vector_norm"], [574, 2, 1, "", "container_types"], [575, 2, 1, "", "copy_array"], [576, 2, 1, "", "cumprod"], [577, 2, 1, "", "cumsum"], [578, 2, 1, "", "current_backend_str"], [579, 2, 1, "", "default"], [580, 2, 1, "", "einops_rearrange"], [581, 2, 1, "", "einops_reduce"], [582, 2, 1, "", "einops_repeat"], [583, 2, 1, "", "exists"], [584, 2, 1, "", "floormod"], [585, 2, 1, "", "fourier_encode"], [586, 2, 1, "", "gather"], [587, 2, 1, "", "gather_nd"], [588, 2, 1, "", "get_all_arrays_in_memory"], [589, 2, 1, "", "get_min_base"], [590, 2, 1, "", "get_min_denominator"], [591, 2, 1, "", "get_num_dims"], [592, 2, 1, "", "get_referrers_recursive"], [593, 2, 1, "", "has_nans"], [594, 2, 1, "", "indices_where"], [595, 2, 1, "", "inplace_arrays_supported"], [596, 2, 1, "", "inplace_decrement"], [597, 2, 1, "", "inplace_increment"], [598, 2, 1, "", "inplace_update"], [599, 2, 1, "", "inplace_variables_supported"], [600, 2, 1, "", "is_array"], [601, 2, 1, "", "is_ivy_array"], [602, 2, 1, "", "is_ivy_container"], [603, 2, 1, "", "is_native_array"], [604, 2, 1, "", "match_kwargs"], [605, 2, 1, "", "multiprocessing"], [606, 2, 1, "", "num_arrays_in_memory"], [607, 2, 1, "", "one_hot"], [608, 2, 1, "", "print_all_arrays_in_memory"], [609, 2, 1, "", "queue_timeout"], [610, 2, 1, "", "scatter_flat"], [611, 2, 1, "", "scatter_nd"], [612, 2, 1, "", "set_min_base"], [613, 2, 1, "", "set_min_denominator"], [614, 2, 1, "", "set_queue_timeout"], [615, 2, 1, "", "set_tmp_dir"], [616, 2, 1, "", "shape"], [617, 2, 1, "", "shape_to_tuple"], [618, 2, 1, "", "stable_divide"], [619, 2, 1, "", "stable_pow"], [620, 2, 1, "", "supports_inplace"], [621, 2, 1, "", "tmp_dir"], [622, 2, 1, "", "to_list"], [623, 2, 1, "", "to_numpy"], [624, 2, 1, "", "to_scalar"], [625, 2, 1, "", "try_else_none"], [626, 2, 1, "", "unstack"], [627, 2, 1, "", "value_is_nan"]], "ivy.functional.ivy.gradients": [[628, 1, 1, "", "GradientTracking"], [630, 2, 1, "", "adam_step"], [631, 2, 1, "", "adam_update"], [632, 2, 1, "", "execute_with_gradients"], [633, 2, 1, "", "gradient_descent_update"], [634, 2, 1, "", "is_variable"], [635, 2, 1, "", "lamb_update"], [636, 2, 1, "", "lars_update"], [637, 2, 1, "", "optimizer_update"], [638, 2, 1, "", "set_with_grads"], [639, 2, 1, "", "stop_gradient"], [640, 2, 1, "", "unset_with_grads"], [641, 2, 1, "", "variable"], [642, 2, 1, "", "variable_data"], [643, 2, 1, "", "with_grads"]], "ivy.functional.ivy.gradients.GradientTracking": [[628, 3, 1, "", "__init__"]], "ivy.functional.ivy.layers": [[645, 2, 1, "", "conv1d"], [646, 2, 1, "", "conv1d_transpose"], [647, 2, 1, "", "conv2d"], [648, 2, 1, "", "conv2d_transpose"], [649, 2, 1, "", "conv3d"], [650, 2, 1, "", "conv3d_transpose"], [651, 2, 1, "", "depthwise_conv2d"], [652, 2, 1, "", "dropout"], [653, 2, 1, "", "linear"], [654, 2, 1, "", "lstm_update"], [655, 2, 1, "", "multi_head_attention"], [656, 2, 1, "", "scaled_dot_product_attention"]], "ivy.functional.ivy.linear_algebra": [[658, 2, 1, "", "cholesky"], [659, 2, 1, "", "cross"], [660, 2, 1, "", "det"], [661, 2, 1, "", "diagonal"], [662, 2, 1, "", "eigh"], [663, 2, 1, "", "eigvalsh"], [664, 2, 1, "", "inv"], [665, 2, 1, "", "matmul"], [666, 2, 1, "", "matrix_norm"], [667, 2, 1, "", "matrix_power"], [668, 2, 1, "", "matrix_rank"], [669, 2, 1, "", "matrix_transpose"], [670, 2, 1, "", "outer"], [671, 2, 1, "", "pinv"], [672, 2, 1, "", "qr"], [673, 2, 1, "", "slogdet"], [674, 2, 1, "", "solve"], [675, 2, 1, "", "svd"], [676, 2, 1, "", "svdvals"], [677, 2, 1, "", "tensordot"], [678, 2, 1, "", "trace"], [679, 2, 1, "", "vecdot"], [680, 2, 1, "", "vector_norm"], [681, 2, 1, "", "vector_to_skew_symmetric_matrix"]], "ivy.functional.ivy.losses": [[683, 2, 1, "", "binary_cross_entropy"], [686, 2, 1, "", "cross_entropy"], [687, 2, 1, "", "sparse_cross_entropy"]], "ivy.functional.ivy.manipulation": [[690, 2, 1, "", "clip"], [694, 2, 1, "", "concat"], [695, 2, 1, "", "constant_pad"], [696, 2, 1, "", "expand_dims"], [697, 2, 1, "", "flip"], [698, 2, 1, "", "permute_dims"], [699, 2, 1, "", "repeat"], [702, 2, 1, "", "reshape"], [703, 2, 1, "", "roll"], [704, 2, 1, "", "split"], [705, 2, 1, "", "squeeze"], [706, 2, 1, "", "stack"], [707, 2, 1, "", "swapaxes"], [708, 2, 1, "", "tile"], [709, 2, 1, "", "zero_pad"]], "ivy.functional.ivy.meta": [[711, 2, 1, "", "fomaml_step"], [712, 2, 1, "", "maml_step"], [713, 2, 1, "", "reptile_step"]], "ivy.functional.ivy.nest": [[715, 2, 1, "", "all_nested_indices"], [716, 2, 1, "", "copy_nest"], [717, 2, 1, "", "index_nest"], [718, 2, 1, "", "insert_into_nest_at_index"], [719, 2, 1, "", "insert_into_nest_at_indices"], [720, 2, 1, "", "map"], [721, 2, 1, "", "map_nest_at_index"], [722, 2, 1, "", "map_nest_at_indices"], [723, 2, 1, "", "multi_index_nest"], [724, 2, 1, "", "nested_any"], [725, 2, 1, "", "nested_indices_where"], [726, 2, 1, "", "nested_map"], [727, 2, 1, "", "nested_multi_map"], [728, 2, 1, "", "prune_nest_at_index"], [729, 2, 1, "", "prune_nest_at_indices"], [730, 2, 1, "", "set_nest_at_index"], [731, 2, 1, "", "set_nest_at_indices"]], "ivy.functional.ivy.norms": [[733, 2, 1, "", "layer_norm"]], "ivy.functional.ivy.random": [[735, 2, 1, "", "multinomial"], [736, 2, 1, "", "randint"], [737, 2, 1, "", "random_normal"], [738, 2, 1, "", "random_uniform"], [739, 2, 1, "", "seed"], [740, 2, 1, "", "shuffle"]], "ivy.functional.ivy.searching": [[742, 2, 1, "", "argmax"], [743, 2, 1, "", "argmin"], [744, 2, 1, "", "nonzero"], [745, 2, 1, "", "where"]], "ivy.functional.ivy.set": [[747, 2, 1, "", "unique_all"], [748, 2, 1, "", "unique_counts"], [749, 2, 1, "", "unique_inverse"], [750, 2, 1, "", "unique_values"]], "ivy.functional.ivy.sorting": [[752, 2, 1, "", "argsort"], [753, 2, 1, "", "sort"]], "ivy.functional.ivy.statistical": [[755, 2, 1, "", "einsum"], [756, 2, 1, "", "max"], [757, 2, 1, "", "mean"], [758, 2, 1, "", "min"], [759, 2, 1, "", "prod"], [760, 2, 1, "", "std"], [761, 2, 1, "", "sum"], [762, 2, 1, "", "var"]], "ivy.functional.ivy.utility": [[766, 2, 1, "", "all"], [767, 2, 1, "", "any"]], "ivy.inspection": [[772, 2, 1, "", "add_array_specs"], [773, 2, 1, "", "fn_array_spec"]], "ivy.stateful": [[775, 0, 0, "-", "activations"], [778, 0, 0, "-", "converters"], [780, 0, 0, "-", "initializers"], [789, 0, 0, "-", "layers"], [801, 0, 0, "-", "module"], [803, 0, 0, "-", "norms"], [805, 0, 0, "-", "optimizers"], [811, 0, 0, "-", "sequential"]], "ivy.stateful.activations": [[776, 1, 1, "", "GEGLU"], [777, 1, 1, "", "GELU"]], "ivy.stateful.activations.GEGLU": [[776, 3, 1, "", "__init__"]], "ivy.stateful.activations.GELU": [[777, 3, 1, "", "__init__"]], "ivy.stateful.converters": [[779, 2, 1, "", "to_ivy_module"]], "ivy.stateful.initializers": [[780, 1, 1, "", "Constant"], [782, 1, 1, "", "FirstLayerSiren"], [783, 1, 1, "", "GlorotUniform"], [780, 1, 1, "", "KaimingNormal"], [785, 1, 1, "", "Ones"], [786, 1, 1, "", "Siren"], [780, 1, 1, "", "Uniform"], [788, 1, 1, "", "Zeros"]], "ivy.stateful.initializers.Constant": [[780, 3, 1, "", "__init__"], [780, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.FirstLayerSiren": [[782, 3, 1, "", "__init__"]], "ivy.stateful.initializers.GlorotUniform": [[783, 3, 1, "", "__init__"]], "ivy.stateful.initializers.KaimingNormal": [[780, 3, 1, "", "__init__"], [780, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Ones": [[785, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Siren": [[786, 3, 1, "", "__init__"]], "ivy.stateful.initializers.Uniform": [[780, 3, 1, "", "__init__"], [780, 3, 1, "", "create_variables"]], "ivy.stateful.initializers.Zeros": [[788, 3, 1, "", "__init__"]], "ivy.stateful.layers": [[790, 1, 1, "", "Conv1D"], [791, 1, 1, "", "Conv1DTranspose"], [792, 1, 1, "", "Conv2D"], [793, 1, 1, "", "Conv2DTranspose"], [794, 1, 1, "", "Conv3D"], [795, 1, 1, "", "Conv3DTranspose"], [796, 1, 1, "", "DepthwiseConv2D"], [797, 1, 1, "", "Dropout"], [798, 1, 1, "", "LSTM"], [799, 1, 1, "", "Linear"], [800, 1, 1, "", "MultiHeadAttention"]], "ivy.stateful.layers.Conv1D": [[790, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv1DTranspose": [[791, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2D": [[792, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv2DTranspose": [[793, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3D": [[794, 3, 1, "", "__init__"]], "ivy.stateful.layers.Conv3DTranspose": [[795, 3, 1, "", "__init__"]], "ivy.stateful.layers.DepthwiseConv2D": [[796, 3, 1, "", "__init__"]], "ivy.stateful.layers.Dropout": [[797, 3, 1, "", "__init__"]], "ivy.stateful.layers.LSTM": [[798, 3, 1, "", "__init__"], [798, 3, 1, "", "get_initial_state"]], "ivy.stateful.layers.Linear": [[799, 3, 1, "", "__init__"]], "ivy.stateful.layers.MultiHeadAttention": [[800, 3, 1, "", "__init__"]], "ivy.stateful.module": [[802, 1, 1, "", "Module"]], "ivy.stateful.module.Module": [[802, 3, 1, "", "__init__"], [802, 3, 1, "", "build"], [802, 4, 1, "", "build_mode"], [802, 4, 1, "", "built"], [802, 3, 1, "", "check_submod_rets"], [802, 3, 1, "", "get_mod_key"], [802, 3, 1, "", "mod_depth"], [802, 3, 1, "", "mod_height"], [802, 3, 1, "", "mod_with_top_mod_key_chain"], [802, 3, 1, "", "save_weights"], [802, 3, 1, "", "show_mod_in_top_mod"], [802, 3, 1, "", "show_structure"], [802, 3, 1, "", "show_v_in_top_v"], [802, 3, 1, "", "sub_mods"], [802, 3, 1, "", "track_submod_call_order"], [802, 3, 1, "", "track_submod_rets"], [802, 3, 1, "", "v_with_top_v_key_chains"]], "ivy.stateful.norms": [[804, 1, 1, "", "LayerNorm"]], "ivy.stateful.norms.LayerNorm": [[804, 3, 1, "", "__init__"]], "ivy.stateful.optimizers": [[806, 1, 1, "", "Adam"], [807, 1, 1, "", "LAMB"], [808, 1, 1, "", "LARS"], [809, 1, 1, "", "Optimizer"], [810, 1, 1, "", "SGD"]], "ivy.stateful.optimizers.Adam": [[806, 3, 1, "", "__init__"], [806, 3, 1, "", "set_state"], [806, 4, 1, "", "state"]], "ivy.stateful.optimizers.LAMB": [[807, 3, 1, "", "__init__"], [807, 3, 1, "", "set_state"], [807, 4, 1, "", "state"]], "ivy.stateful.optimizers.LARS": [[808, 3, 1, "", "__init__"], [808, 3, 1, "", "set_state"], [808, 4, 1, "", "state"]], "ivy.stateful.optimizers.Optimizer": [[809, 3, 1, "", "__init__"], [809, 3, 1, "", "set_state"], [809, 3, 1, "", "step"]], "ivy.stateful.optimizers.SGD": [[810, 3, 1, "", "__init__"], [810, 3, 1, "", "set_state"], [810, 4, 1, "", "state"]], "ivy.stateful.sequential": [[812, 1, 1, "", "Sequential"]], "ivy.stateful.sequential.Sequential": [[812, 3, 1, "", "__init__"]], "ivy.verbosity": [[815, 2, 1, "", "cprint"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:method", "4": "py:property", "5": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "data", "Python data"]}, "titleterms": {"activ": [0, 153, 369, 775], "arraywithactiv": 1, "arrai": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 151, 329, 334, 339, 343, 488, 497, 500, 504, 512, 527, 532, 538, 552, 558, 685, 693, 701, 765], "method": [2, 160, 335, 343, 344], "ab": [3, 161, 483], "aco": [4, 162, 484], "acosh": [5, 163, 485], "add": [6, 165, 328, 486], "all": [7, 166, 764, 765, 766], "all_equ": [8, 167, 565], "ani": [9, 168, 767], "argsort": [10, 169, 752], "asin": [11, 170, 487, 488, 489], "asinh": [12, 171, 490], "atan": [13, 174, 491], "atan2": [14, 175, 492], "atanh": [15, 176, 493], "binary_cross_entropi": [16, 177, 683], "bitwise_and": [17, 178, 494], "bitwise_invert": [18, 179, 495], "bitwise_left_shift": [19, 180, 496, 497, 498], "bitwise_or": [20, 181, 499, 500, 501], "bitwise_right_shift": [21, 182, 502], "bitwise_xor": [22, 183, 503, 504, 505], "can_cast": [23, 184, 408], "ceil": [24, 185, 506], "clip": [25, 186, 689, 690], "concat": [26, 188, 692, 693, 694], "constant_pad": [27, 189, 695], "co": [28, 190, 507], "cosh": [29, 191, 508], "cross_entropi": [30, 192, 684, 685, 686], "divid": [31, 193, 509], "einsum": [32, 194, 755], "equal": [33, 195, 510], "erf": [34, 196, 511, 512, 513, 514], "exp": [35, 197, 515], "expand_dim": [36, 198, 696], "expm1": [37, 199, 516], "flip": [38, 200, 697], "floor": [39, 201, 517], "floor_divid": [40, 202, 518], "greater": [41, 204, 519], "greater_equ": [42, 205, 520], "isfinit": [43, 206, 521], "isinf": [44, 207, 522], "isnan": [45, 208, 523], "layer_norm": [46, 211, 733], "less": [47, 212, 524], "less_equ": [48, 213, 525], "log": [49, 214, 526, 527, 528], "log10": [50, 215, 529], "log1p": [51, 216, 530], "log2": [52, 217, 531, 532, 533], "logaddexp": [53, 218, 534], "logical_and": [54, 219, 535], "logical_not": [55, 220, 536], "logical_or": [56, 221, 537, 538, 539], "logical_xor": [57, 222, 540], "matmul": [58, 223, 665], "max": [59, 224, 756], "mean": [60, 225, 757], "min": [61, 226, 758], "multipli": [62, 227, 543], "neg": [63, 228, 544], "not_equ": [64, 229, 545], "permute_dim": [65, 231, 698], "posit": [66, 232, 546], "pow": [67, 233, 547], "prod": [68, 234, 759], "remaind": [69, 236, 548], "repeat": [70, 237, 699], "reshap": [71, 238, 700, 701, 702], "roll": [72, 239, 328, 703], "round": [73, 240, 549], "sign": [74, 241, 550], "sin": [75, 242, 551, 552, 553, 554], "sinh": [76, 243, 555], "sort": [77, 128, 244, 312, 751, 753], "sparse_cross_entropi": [78, 245, 687], "sqrt": [79, 246, 556], "squar": [80, 247, 557, 558, 559], "squeez": [81, 248, 705], "stack": [82, 249, 706], "std": [83, 272, 760], "subtract": [84, 273, 560], "sum": [85, 274, 761], "swapax": [86, 275, 707], "tan": [87, 276, 328, 561], "tanh": [88, 277, 376, 562], "tile": [89, 278, 708], "trunc": [90, 279, 563], "var": [91, 280, 762], "zero_pad": [92, 281, 709], "convers": 93, "args_to_ivi": 94, "args_to_n": 95, "to_ivi": 96, "to_n": 97, "creation": [98, 282, 380], "arraywithcr": 99, "data": [100, 284, 330, 336, 344, 358, 399, 746, 747, 748, 750], "type": [100, 284, 331, 336, 358, 399], "arraywithdatatyp": 101, "devic": [102, 286, 337, 339, 432], "arraywithdevic": 103, "elementwis": [104, 288, 482], "arraywithelementwis": 105, "gener": [106, 290, 330, 564], "arraywithgener": 107, "gradient": [108, 292, 628], "arraywithgradi": 109, "imag": [110, 294], "arraywithimag": 111, "layer": [112, 296, 644, 789], "arraywithlay": 113, "linear": [114, 298, 653, 657, 799], "algebra": [114, 298, 657], "arraywithlinearalgebra": 115, "loss": [116, 300, 682], "arraywithloss": 117, "manipul": [118, 302, 688], "arraywithmanipul": 119, "norm": [120, 304, 732, 803], "arraywithnorm": 121, "random": [122, 306, 734], "arraywithrandom": 123, "search": [124, 308, 741], "arraywithsearch": 125, "set": [126, 310, 321, 332, 746], "arraywithset": 127, "arraywithsort": 129, "statist": [130, 314, 754], "arraywithstatist": 131, "util": [132, 316, 763], "arraywithutil": 133, "wrap": [134, 318, 333], "add_ivy_array_instance_method": 135, "backend": [136, 326, 332, 341, 358], "handler": [136, 341], "choose_random_backend": 138, "clear_backend_stack": 139, "current_backend": 140, "get_backend": 141, "set_backend": 142, "try_import_ivy_jax": 143, "try_import_ivy_mxnet": 144, "try_import_ivy_numpi": 145, "try_import_ivy_tf": 146, "try_import_ivy_torch": 147, "unset_backend": 148, "background": [149, 768], "ml": 150, "explos": 150, "standard": 151, "skeptic": 151, "complimentari": 151, "vs": [151, 358], "competit": 151, "do": 151, "work": [151, 324], "The": [151, 322, 343, 358], "api": [151, 323, 326, 329, 335, 341, 343, 345, 346], "why": 152, "unifi": [152, 343], "No": [152, 321], "more": 152, "re": 152, "implement": 152, "infinit": 152, "shelf": 152, "life": 152, "containerwithactiv": 154, "base": 155, "containerbas": 156, "contain": [157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 335, 344, 513, 553, 691], "multidevcontain": 159, "adam_upd": [164, 631], "at_dev": [172, 173], "clip_vector_norm": [187, 573], "gradient_descent_upd": [203, 633], "lamb_upd": [209, 635], "lars_upd": [210, 636], "optimizer_upd": [230, 637], "random_uniform": [235, 738], "static_adam_upd": 250, "static_add": 251, "static_all_equ": 252, "static_argsort": 253, "static_binary_cross_entropi": 254, "static_can_cast": 255, "static_clip": [256, 691], "static_cross_entropi": 257, "static_divid": 258, "static_gradient_descent_upd": 259, "static_lamb_upd": 260, "static_lars_upd": 261, "static_multipli": 262, "static_optimizer_upd": 263, "static_randint": 264, "static_random_uniform": 265, "static_rol": 266, "static_sort": 267, "static_sparse_cross_entropi": 268, "static_subtract": 269, "static_tan": 270, "static_tanh": 271, "containerwithcr": 283, "containerwithdatatyp": 285, "containerwithdevic": 287, "containerwithelementwis": 289, "containerwithgener": 291, "containerwithgradi": 293, "containerwithimag": 295, "containerwithlay": 297, "containerwithlinearalgebra": 299, "containerwithloss": 301, "containerwithmanipul": 303, "containerwithnorm": 305, "containerwithrandom": 307, "containerwithsearch": 309, "containerwithset": 311, "containerwithsort": 313, "containerwithstatist": 315, "containerwithutil": 317, "add_ivy_container_instance_method": 319, "contribut": [320, 768], "up": 321, "clone": 321, "ivi": [321, 326, 328, 330, 334, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357], "pycharm": 321, "virtual": 321, "environ": 321, "docker": [321, 322, 324], "us": [321, 324, 344], "miniconda": [321, 324], "venv": [321, 324], "interpret": 321, "window": 321, "maco": 321, "ubuntu": 321, "github": 321, "codespac": 321, "pre": 321, "commit": [321, 322], "basic": 322, "get": 322, "help": 322, "todo": 322, "list": 322, "issu": 322, "manag": 322, "your": 322, "fork": 322, "who": 322, "To": 322, "ask": 322, "With": 322, "command": 322, "line": 322, "browser": 322, "pull": 322, "request": 322, "small": 322, "often": 322, "run": 322, "test": [322, 329, 330], "local": 322, "open": 323, "task": 323, "function": [323, 331, 333, 335, 336, 337, 339, 341, 346, 358, 489, 498, 501, 505, 514, 528, 533, 539, 554, 559, 686, 690, 694, 702, 766], "format": 323, "frontend": [323, 346], "build": [324, 341], "doc": 324, "dockerless": 324, "document": 324, "pipelin": [324, 358], "make_doc": 324, "sh": 324, "entrypoint": 324, "_make_doc": 324, "generate_src_rst_fil": 324, "py": 324, "sphinx": 324, "correct_built_html_fil": 324, "remove_fil": 324, "deep": 325, "dive": 325, "navig": 326, "code": 326, "categor": 326, "submodul": 326, "design": [326, 340, 768], "docstr": [327, 328], "exampl": [328, 339], "hypothesi": 330, "self": 330, "consist": 330, "explicit": 330, "test_array_funct": 330, "primari": 331, "composit": 331, "mix": 331, "standalon": 331, "nestabl": [331, 335, 339], "conveni": 331, "nativ": 334, "handl": 334, "instanc": [335, 343], "static": 335, "special": 335, "modul": [336, 337, 345, 801, 802], "argument": [336, 337, 338, 339], "other": [336, 337], "inplac": 338, "updat": 338, "out": [338, 339], "copi": 338, "dtype": [339, 413], "number": 339, "oper": [339, 343, 358], "integ": 339, "sequenc": 339, "block": 341, "framework": [341, 342], "graph": [341, 346], "compil": [341, 346, 377, 378], "class": 343, "monkei": 343, "patch": 343, "construct": 344, "represent": 344, "recurs": 344, "built": 344, "ins": 344, "access": 344, "save": 344, "load": 344, "comparison": 344, "custom": [344, 358], "case": 344, "compartment": 344, "configur": 344, "network": [344, 346], "weight": 344, "state": [345, 358], "initi": [345, 780], "optim": [345, 805, 809], "transpil": 346, "role": 346, "convert": [346, 778], "model": [346, 353, 358], "builder": 348, "ecosystem": 349, "gym": [350, 357], "mech": 351, "memori": [352, 357], "robot": [354, 357], "vision": [355, 357], "extens": [356, 768], "appli": 357, "librari": 357, "mechan": 357, "faq": 358, "mana": 358, "version": 358, "dynam": 358, "size": 358, "shape": [358, 616, 746, 747, 748, 750], "check": 358, "control": 358, "flow": 358, "auto": 358, "differenti": 358, "replica": 358, "parallel": 358, "support": 358, "altern": 358, "structur": 358, "func": 359, "wrapper": 359, "handle_nest": 360, "handle_out_argu": 361, "infer_devic": 362, "infer_dtyp": 363, "inputs_to_ivy_arrai": 364, "inputs_to_native_arrai": 365, "outputs_to_ivy_arrai": 366, "to_native_arrays_and_back": 367, "gelu": [370, 777], "leaky_relu": 371, "relu": 372, "sigmoid": 373, "softmax": 374, "softplu": 375, "constant": 379, "note": [380, 386], "arang": 381, "asarrai": 382, "empti": 383, "empty_lik": 384, "ey": 385, "from_dlpack": 386, "full": 387, "full_lik": 388, "linspac": 389, "logspac": 390, "meshgrid": 391, "native_arrai": 392, "ones": 393, "ones_lik": 394, "tril": 395, "triu": 396, "zero": [397, 788], "zeros_lik": 398, "as_ivy_dtyp": 403, "as_native_dtyp": 404, "astyp": 405, "broadcast_arrai": 406, "broadcast_to": 407, "closest_valid_dtyp": 409, "default_dtyp": 410, "default_float_dtyp": 411, "default_int_dtyp": 412, "dtype_bit": 414, "finfo": 415, "function_supported_dtyp": 416, "function_unsupported_dtyp": 417, "iinfo": 418, "invalid_dtyp": 419, "is_float_dtyp": 420, "is_int_dtyp": 421, "promote_typ": 422, "result_typ": 423, "set_default_dtyp": 424, "set_default_float_dtyp": 425, "set_default_int_dtyp": 426, "type_promote_arrai": 427, "unset_default_dtyp": 428, "unset_default_float_dtyp": 429, "unset_default_int_dtyp": 430, "valid_dtyp": 431, "devcloneditem": 434, "devclonedit": 435, "devclonednest": 436, "devdistitem": 437, "devdistit": 438, "devdistnest": 439, "devmapp": 441, "devmappermultiproc": 442, "multidevitem": 444, "multidevit": 445, "multidevnest": 446, "profil": 447, "as_ivy_dev": 448, "as_native_dev": 449, "clear_mem_on_dev": 450, "default_devic": 451, "dev": 452, "dev_clon": 453, "dev_clone_arrai": 454, "dev_clone_it": 455, "dev_clone_nest": 456, "dev_dist": 457, "dev_dist_arrai": 458, "dev_dist_it": 459, "dev_dist_nest": 460, "dev_unifi": 461, "dev_unify_arrai": 462, "dev_unify_it": 463, "dev_unify_nest": 464, "dev_util": 465, "get_all_ivy_arrays_on_dev": 466, "gpu_is_avail": 467, "num_cpu_cor": 468, "num_gpu": 469, "num_ivy_arrays_on_dev": 470, "percent_used_mem_on_dev": 471, "print_all_ivy_arrays_on_dev": 472, "set_default_devic": 473, "set_split_factor": 474, "split_factor": 475, "split_func_cal": 476, "to_devic": 477, "total_mem_on_dev": 478, "tpu_is_avail": 479, "unset_default_devic": 480, "used_mem_on_dev": 481, "maximum": 541, "minimum": 542, "arg_info": 566, "arg_nam": 567, "array_equ": 568, "arrays_equ": 569, "assert_supports_inplac": 570, "cache_fn": 571, "clip_matrix_norm": 572, "container_typ": 574, "copy_arrai": 575, "cumprod": 576, "cumsum": 577, "current_backend_str": 578, "default": 579, "einops_rearrang": 580, "einops_reduc": 581, "einops_repeat": 582, "exist": 583, "floormod": 584, "fourier_encod": 585, "gather": 586, "gather_nd": 587, "get_all_arrays_in_memori": 588, "get_min_bas": 589, "get_min_denomin": 590, "get_num_dim": 591, "get_referrers_recurs": 592, "has_nan": 593, "indices_wher": 594, "inplace_arrays_support": 595, "inplace_decr": 596, "inplace_incr": 597, "inplace_upd": 598, "inplace_variables_support": 599, "is_arrai": 600, "is_ivy_arrai": 601, "is_ivy_contain": 602, "is_native_arrai": 603, "match_kwarg": 604, "multiprocess": 605, "num_arrays_in_memori": 606, "one_hot": 607, "print_all_arrays_in_memori": 608, "queue_timeout": 609, "scatter_flat": 610, "scatter_nd": 611, "set_min_bas": 612, "set_min_denomin": 613, "set_queue_timeout": 614, "set_tmp_dir": 615, "shape_to_tupl": 617, "stable_divid": 618, "stable_pow": 619, "supports_inplac": 620, "tmp_dir": 621, "to_list": 622, "to_numpi": 623, "to_scalar": 624, "try_else_non": 625, "unstack": 626, "value_is_nan": 627, "adam_step": 630, "execute_with_gradi": 632, "is_vari": 634, "set_with_grad": 638, "stop_gradi": 639, "unset_with_grad": 640, "variabl": 641, "variable_data": 642, "with_grad": 643, "conv1d": [645, 790], "conv1d_transpos": 646, "conv2d": [647, 792], "conv2d_transpos": 648, "conv3d": [649, 794], "conv3d_transpos": 650, "depthwise_conv2d": 651, "dropout": [652, 797], "lstm_updat": 654, "multi_head_attent": 655, "scaled_dot_product_attent": 656, "choleski": 658, "cross": 659, "det": 660, "diagon": 661, "eigh": 662, "eigvalsh": 663, "inv": 664, "matrix_norm": 666, "matrix_pow": 667, "matrix_rank": 668, "matrix_transpos": 669, "outer": 670, "pinv": 671, "qr": 672, "slogdet": 673, "solv": 674, "svd": 675, "svdval": 676, "tensordot": 677, "trace": 678, "vecdot": 679, "vector_norm": 680, "vector_to_skew_symmetric_matrix": 681, "split": 704, "meta": 710, "fomaml_step": 711, "maml_step": 712, "reptile_step": 713, "nest": 714, "all_nested_indic": 715, "copy_nest": 716, "index_nest": 717, "insert_into_nest_at_index": 718, "insert_into_nest_at_indic": 719, "map": 720, "map_nest_at_index": 721, "map_nest_at_indic": 722, "multi_index_nest": 723, "nested_ani": 724, "nested_indices_wher": 725, "nested_map": 726, "nested_multi_map": 727, "prune_nest_at_index": 728, "prune_nest_at_indic": 729, "set_nest_at_index": 730, "set_nest_at_indic": 731, "multinomi": 735, "randint": 736, "random_norm": 737, "seed": 739, "shuffl": 740, "argmax": 742, "argmin": 743, "nonzero": 744, "where": 745, "depend": [746, 747, 748, 750], "output": [746, 747, 748, 750], "unique_al": 747, "unique_count": 748, "unique_invers": 749, "unique_valu": 750, "content": 768, "overview": 768, "quick": 768, "start": 768, "roadmap": [768, 774], "citat": 768, "inspect": 771, "add_array_spec": 772, "fn_array_spec": 773, "geglu": 776, "to_ivy_modul": 779, "firstlayersiren": 782, "glorotuniform": 783, "Ones": 785, "siren": 786, "conv1dtranspos": 791, "conv2dtranspos": 793, "conv3dtranspos": 795, "depthwiseconv2d": 796, "lstm": 798, "multiheadattent": 800, "layernorm": 804, "adam": 806, "lamb": 807, "lar": 808, "sgd": 810, "sequenti": [811, 812], "verbos": 814, "cprint": 815}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}})